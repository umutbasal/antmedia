// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StreamFetcherManager stream fetcher manager
//
// swagger:model StreamFetcherManager
type StreamFetcherManager struct {

	// datastore
	Datastore *DataStore `json:"datastore,omitempty"`

	// restart stream automatically
	RestartStreamAutomatically bool `json:"restartStreamAutomatically,omitempty"`

	// stream checker count
	StreamCheckerCount int32 `json:"streamCheckerCount,omitempty"`

	// stream checker interval
	StreamCheckerInterval int32 `json:"streamCheckerInterval,omitempty"`

	// stream fetcher list
	StreamFetcherList []*StreamFetcher `json:"streamFetcherList"`
}

// Validate validates this stream fetcher manager
func (m *StreamFetcherManager) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamFetcherList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamFetcherManager) validateDatastore(formats strfmt.Registry) error {
	if swag.IsZero(m.Datastore) { // not required
		return nil
	}

	if m.Datastore != nil {
		if err := m.Datastore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastore")
			}
			return err
		}
	}

	return nil
}

func (m *StreamFetcherManager) validateStreamFetcherList(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamFetcherList) { // not required
		return nil
	}

	for i := 0; i < len(m.StreamFetcherList); i++ {
		if swag.IsZero(m.StreamFetcherList[i]) { // not required
			continue
		}

		if m.StreamFetcherList[i] != nil {
			if err := m.StreamFetcherList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streamFetcherList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("streamFetcherList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stream fetcher manager based on the context it is used
func (m *StreamFetcherManager) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreamFetcherList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamFetcherManager) contextValidateDatastore(ctx context.Context, formats strfmt.Registry) error {

	if m.Datastore != nil {
		if err := m.Datastore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastore")
			}
			return err
		}
	}

	return nil
}

func (m *StreamFetcherManager) contextValidateStreamFetcherList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StreamFetcherList); i++ {

		if m.StreamFetcherList[i] != nil {
			if err := m.StreamFetcherList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streamFetcherList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("streamFetcherList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StreamFetcherManager) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamFetcherManager) UnmarshalBinary(b []byte) error {
	var res StreamFetcherManager
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
