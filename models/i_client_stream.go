// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IClientStream i client stream
//
// swagger:model IClientStream
type IClientStream struct {

	// broadcast stream publish name
	BroadcastStreamPublishName string `json:"broadcastStreamPublishName,omitempty"`

	// client buffer duration
	ClientBufferDuration int32 `json:"clientBufferDuration,omitempty"`

	// codec info
	CodecInfo *IStreamCodecInfo `json:"codecInfo,omitempty"`

	// connection
	Connection *IStreamCapableConnection `json:"connection,omitempty"`

	// creation time
	CreationTime int64 `json:"creationTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// scope
	Scope *IScope `json:"scope,omitempty"`

	// stream Id
	StreamID Number `json:"streamId,omitempty"`
}

// Validate validates this i client stream
func (m *IClientStream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodecInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IClientStream) validateCodecInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CodecInfo) { // not required
		return nil
	}

	if m.CodecInfo != nil {
		if err := m.CodecInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codecInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("codecInfo")
			}
			return err
		}
	}

	return nil
}

func (m *IClientStream) validateConnection(formats strfmt.Registry) error {
	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *IClientStream) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this i client stream based on the context it is used
func (m *IClientStream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCodecInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IClientStream) contextValidateCodecInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CodecInfo != nil {
		if err := m.CodecInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codecInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("codecInfo")
			}
			return err
		}
	}

	return nil
}

func (m *IClientStream) contextValidateConnection(ctx context.Context, formats strfmt.Registry) error {

	if m.Connection != nil {
		if err := m.Connection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *IClientStream) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {
		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IClientStream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IClientStream) UnmarshalBinary(b []byte) error {
	var res IClientStream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
