// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User The basic user class
//
// swagger:model User
type User struct {

	// the email of the user
	Email string `json:"email,omitempty"`

	// Fist name of the user
	FirstName string `json:"firstName,omitempty"`

	// the name of the user
	FullName string `json:"fullName,omitempty"`

	// last name of the user
	LastName string `json:"lastName,omitempty"`

	// the URL of the user picture
	Picture string `json:"picture,omitempty"`

	// Scope can be 'system' or name of the application. Scope of the user. If it's scope is system, it can access the stuff in system-level. If it's scope is an application, it can access the stuff in application-levelIt makes more sense with UserType
	Scope string `json:"scope,omitempty"`

	// the type of the user
	// Enum: [ADMIN READ-ONLY USER]
	UserType string `json:"userType,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADMIN","READ-ONLY","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeUserTypePropEnum = append(userTypeUserTypePropEnum, v)
	}
}

const (

	// UserUserTypeADMIN captures enum value "ADMIN"
	UserUserTypeADMIN string = "ADMIN"

	// UserUserTypeREADDashONLY captures enum value "READ-ONLY"
	UserUserTypeREADDashONLY string = "READ-ONLY"

	// UserUserTypeUSER captures enum value "USER"
	UserUserTypeUSER string = "USER"
)

// prop value enum
func (m *User) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateUserType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", m.UserType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
