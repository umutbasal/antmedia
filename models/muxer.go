// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Muxer muxer
//
// swagger:model Muxer
type Muxer struct {

	// add date time to source name
	AddDateTimeToSourceName bool `json:"addDateTimeToSourceName,omitempty"`

	// bit stream filter
	BitStreamFilter string `json:"bitStreamFilter,omitempty"`

	// file
	File io.ReadCloser `json:"file,omitempty"`

	// file name
	FileName string `json:"fileName,omitempty"`

	// format
	Format string `json:"format,omitempty"`

	// input time base map
	InputTimeBaseMap map[string]AVRational `json:"inputTimeBaseMap,omitempty"`

	// is running
	IsRunning *AtomicBoolean `json:"isRunning,omitempty"`

	// output format context
	OutputFormatContext *AVFormatContext `json:"outputFormatContext,omitempty"`

	// output URL
	OutputURL string `json:"outputURL,omitempty"`

	// registered stream index list
	RegisteredStreamIndexList []int32 `json:"registeredStreamIndexList"`

	// tmp packet
	TmpPacket *AVPacket `json:"tmpPacket,omitempty"`

	// video height
	VideoHeight int32 `json:"videoHeight,omitempty"`

	// video width
	VideoWidth int32 `json:"videoWidth,omitempty"`
}

// Validate validates this muxer
func (m *Muxer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputTimeBaseMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRunning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputFormatContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTmpPacket(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Muxer) validateInputTimeBaseMap(formats strfmt.Registry) error {
	if swag.IsZero(m.InputTimeBaseMap) { // not required
		return nil
	}

	for k := range m.InputTimeBaseMap {

		if err := validate.Required("inputTimeBaseMap"+"."+k, "body", m.InputTimeBaseMap[k]); err != nil {
			return err
		}
		if val, ok := m.InputTimeBaseMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputTimeBaseMap" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputTimeBaseMap" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *Muxer) validateIsRunning(formats strfmt.Registry) error {
	if swag.IsZero(m.IsRunning) { // not required
		return nil
	}

	if m.IsRunning != nil {
		if err := m.IsRunning.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isRunning")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isRunning")
			}
			return err
		}
	}

	return nil
}

func (m *Muxer) validateOutputFormatContext(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputFormatContext) { // not required
		return nil
	}

	if m.OutputFormatContext != nil {
		if err := m.OutputFormatContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputFormatContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outputFormatContext")
			}
			return err
		}
	}

	return nil
}

func (m *Muxer) validateTmpPacket(formats strfmt.Registry) error {
	if swag.IsZero(m.TmpPacket) { // not required
		return nil
	}

	if m.TmpPacket != nil {
		if err := m.TmpPacket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tmpPacket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tmpPacket")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this muxer based on the context it is used
func (m *Muxer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputTimeBaseMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsRunning(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputFormatContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTmpPacket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Muxer) contextValidateInputTimeBaseMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.InputTimeBaseMap {

		if val, ok := m.InputTimeBaseMap[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Muxer) contextValidateIsRunning(ctx context.Context, formats strfmt.Registry) error {

	if m.IsRunning != nil {
		if err := m.IsRunning.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isRunning")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isRunning")
			}
			return err
		}
	}

	return nil
}

func (m *Muxer) contextValidateOutputFormatContext(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputFormatContext != nil {
		if err := m.OutputFormatContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputFormatContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outputFormatContext")
			}
			return err
		}
	}

	return nil
}

func (m *Muxer) contextValidateTmpPacket(ctx context.Context, formats strfmt.Registry) error {

	if m.TmpPacket != nil {
		if err := m.TmpPacket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tmpPacket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tmpPacket")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Muxer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Muxer) UnmarshalBinary(b []byte) error {
	var res Muxer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
