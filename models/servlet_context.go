// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServletContext servlet context
//
// swagger:model ServletContext
type ServletContext struct {

	// attribute names
	AttributeNames EnumerationString `json:"attributeNames,omitempty"`

	// class loader
	ClassLoader *ClassLoader `json:"classLoader,omitempty"`

	// context path
	ContextPath string `json:"contextPath,omitempty"`

	// default session tracking modes
	// Unique: true
	DefaultSessionTrackingModes []string `json:"defaultSessionTrackingModes"`

	// effective major version
	EffectiveMajorVersion int32 `json:"effectiveMajorVersion,omitempty"`

	// effective minor version
	EffectiveMinorVersion int32 `json:"effectiveMinorVersion,omitempty"`

	// effective session tracking modes
	// Unique: true
	EffectiveSessionTrackingModes []string `json:"effectiveSessionTrackingModes"`

	// filter registrations
	FilterRegistrations map[string]FilterRegistration `json:"filterRegistrations,omitempty"`

	// init parameter names
	InitParameterNames EnumerationString `json:"initParameterNames,omitempty"`

	// jsp config descriptor
	JspConfigDescriptor *JspConfigDescriptor `json:"jspConfigDescriptor,omitempty"`

	// major version
	MajorVersion int32 `json:"majorVersion,omitempty"`

	// minor version
	MinorVersion int32 `json:"minorVersion,omitempty"`

	// server info
	ServerInfo string `json:"serverInfo,omitempty"`

	// servlet context name
	ServletContextName string `json:"servletContextName,omitempty"`

	// servlet names
	ServletNames EnumerationString `json:"servletNames,omitempty"`

	// servlet registrations
	ServletRegistrations map[string]ServletRegistration `json:"servletRegistrations,omitempty"`

	// servlets
	Servlets EnumerationServlet `json:"servlets,omitempty"`

	// session cookie config
	SessionCookieConfig *SessionCookieConfig `json:"sessionCookieConfig,omitempty"`

	// virtual server name
	VirtualServerName string `json:"virtualServerName,omitempty"`
}

// Validate validates this servlet context
func (m *ServletContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassLoader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultSessionTrackingModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveSessionTrackingModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterRegistrations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJspConfigDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServletRegistrations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionCookieConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServletContext) validateClassLoader(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassLoader) { // not required
		return nil
	}

	if m.ClassLoader != nil {
		if err := m.ClassLoader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

var servletContextDefaultSessionTrackingModesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COOKIE","URL","SSL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		servletContextDefaultSessionTrackingModesItemsEnum = append(servletContextDefaultSessionTrackingModesItemsEnum, v)
	}
}

func (m *ServletContext) validateDefaultSessionTrackingModesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, servletContextDefaultSessionTrackingModesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServletContext) validateDefaultSessionTrackingModes(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultSessionTrackingModes) { // not required
		return nil
	}

	if err := validate.UniqueItems("defaultSessionTrackingModes", "body", m.DefaultSessionTrackingModes); err != nil {
		return err
	}

	for i := 0; i < len(m.DefaultSessionTrackingModes); i++ {

		// value enum
		if err := m.validateDefaultSessionTrackingModesItemsEnum("defaultSessionTrackingModes"+"."+strconv.Itoa(i), "body", m.DefaultSessionTrackingModes[i]); err != nil {
			return err
		}

	}

	return nil
}

var servletContextEffectiveSessionTrackingModesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COOKIE","URL","SSL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		servletContextEffectiveSessionTrackingModesItemsEnum = append(servletContextEffectiveSessionTrackingModesItemsEnum, v)
	}
}

func (m *ServletContext) validateEffectiveSessionTrackingModesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, servletContextEffectiveSessionTrackingModesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServletContext) validateEffectiveSessionTrackingModes(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveSessionTrackingModes) { // not required
		return nil
	}

	if err := validate.UniqueItems("effectiveSessionTrackingModes", "body", m.EffectiveSessionTrackingModes); err != nil {
		return err
	}

	for i := 0; i < len(m.EffectiveSessionTrackingModes); i++ {

		// value enum
		if err := m.validateEffectiveSessionTrackingModesItemsEnum("effectiveSessionTrackingModes"+"."+strconv.Itoa(i), "body", m.EffectiveSessionTrackingModes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ServletContext) validateFilterRegistrations(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterRegistrations) { // not required
		return nil
	}

	for k := range m.FilterRegistrations {

		if err := validate.Required("filterRegistrations"+"."+k, "body", m.FilterRegistrations[k]); err != nil {
			return err
		}
		if val, ok := m.FilterRegistrations[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterRegistrations" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filterRegistrations" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServletContext) validateJspConfigDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.JspConfigDescriptor) { // not required
		return nil
	}

	if m.JspConfigDescriptor != nil {
		if err := m.JspConfigDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jspConfigDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jspConfigDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ServletContext) validateServletRegistrations(formats strfmt.Registry) error {
	if swag.IsZero(m.ServletRegistrations) { // not required
		return nil
	}

	for k := range m.ServletRegistrations {

		if err := validate.Required("servletRegistrations"+"."+k, "body", m.ServletRegistrations[k]); err != nil {
			return err
		}
		if val, ok := m.ServletRegistrations[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servletRegistrations" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servletRegistrations" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServletContext) validateSessionCookieConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionCookieConfig) { // not required
		return nil
	}

	if m.SessionCookieConfig != nil {
		if err := m.SessionCookieConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionCookieConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sessionCookieConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this servlet context based on the context it is used
func (m *ServletContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassLoader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterRegistrations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJspConfigDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServletRegistrations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSessionCookieConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServletContext) contextValidateClassLoader(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassLoader != nil {
		if err := m.ClassLoader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *ServletContext) contextValidateFilterRegistrations(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.FilterRegistrations {

		if val, ok := m.FilterRegistrations[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ServletContext) contextValidateJspConfigDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.JspConfigDescriptor != nil {
		if err := m.JspConfigDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jspConfigDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jspConfigDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ServletContext) contextValidateServletRegistrations(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ServletRegistrations {

		if val, ok := m.ServletRegistrations[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ServletContext) contextValidateSessionCookieConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SessionCookieConfig != nil {
		if err := m.SessionCookieConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionCookieConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sessionCookieConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServletContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServletContext) UnmarshalBinary(b []byte) error {
	var res ServletContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
