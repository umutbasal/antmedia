// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StreamAcceptFilter stream accept filter
//
// swagger:model StreamAcceptFilter
type StreamAcceptFilter struct {

	// app settings
	AppSettings *AppSettings `json:"appSettings,omitempty"`

	// max bitrate
	MaxBitrate int32 `json:"maxBitrate,omitempty"`

	// max fps
	MaxFps int32 `json:"maxFps,omitempty"`

	// max resolution
	MaxResolution int32 `json:"maxResolution,omitempty"`
}

// Validate validates this stream accept filter
func (m *StreamAcceptFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamAcceptFilter) validateAppSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AppSettings) { // not required
		return nil
	}

	if m.AppSettings != nil {
		if err := m.AppSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stream accept filter based on the context it is used
func (m *StreamAcceptFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamAcceptFilter) contextValidateAppSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AppSettings != nil {
		if err := m.AppSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StreamAcceptFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamAcceptFilter) UnmarshalBinary(b []byte) error {
	var res StreamAcceptFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
