// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IServiceCall i service call
//
// swagger:model IServiceCall
type IServiceCall struct {

	// arguments
	Arguments []interface{} `json:"arguments"`

	// exception
	Exception *Exception `json:"exception,omitempty"`

	// read time
	ReadTime int64 `json:"readTime,omitempty"`

	// service method name
	ServiceMethodName string `json:"serviceMethodName,omitempty"`

	// service name
	ServiceName string `json:"serviceName,omitempty"`

	// status
	// Format: byte
	Status strfmt.Base64 `json:"status,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// write time
	WriteTime int64 `json:"writeTime,omitempty"`
}

// Validate validates this i service call
func (m *IServiceCall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateException(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IServiceCall) validateException(formats strfmt.Registry) error {
	if swag.IsZero(m.Exception) { // not required
		return nil
	}

	if m.Exception != nil {
		if err := m.Exception.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exception")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exception")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this i service call based on the context it is used
func (m *IServiceCall) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateException(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IServiceCall) contextValidateException(ctx context.Context, formats strfmt.Registry) error {

	if m.Exception != nil {
		if err := m.Exception.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exception")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exception")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IServiceCall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IServiceCall) UnmarshalBinary(b []byte) error {
	var res IServiceCall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
