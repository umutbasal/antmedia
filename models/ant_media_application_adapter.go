// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntMediaApplicationAdapter ant media application adapter
//
// swagger:model AntMediaApplicationAdapter
type AntMediaApplicationAdapter struct {

	// app settings
	AppSettings *AppSettings `json:"appSettings,omitempty"`

	// attribute names
	// Unique: true
	AttributeNames []string `json:"attributeNames"`

	// attributes
	Attributes map[string]interface{} `json:"attributes,omitempty"`

	// child scope names
	// Unique: true
	ChildScopeNames []string `json:"childScopeNames"`

	// client TTL
	ClientTTL int64 `json:"clientTTL,omitempty"`

	// clients
	// Unique: true
	Clients []*IClient `json:"clients"`

	// connections
	Connections [][]*IConnection `json:"connections"`

	// context
	Context *IContext `json:"context,omitempty"`

	// data channel enabled
	DataChannelEnabled bool `json:"dataChannelEnabled,omitempty"`

	// data channel messaging supported
	DataChannelMessagingSupported bool `json:"dataChannelMessagingSupported,omitempty"`

	// data store
	DataStore *DataStore `json:"dataStore,omitempty"`

	// data store factory
	DataStoreFactory *DataStoreFactory `json:"dataStoreFactory,omitempty"`

	// depth
	Depth int32 `json:"depth,omitempty"`

	// ghost conns cleanup period
	GhostConnsCleanupPeriod int32 `json:"ghostConnsCleanupPeriod,omitempty"`

	// http client
	HTTPClient *CloseableHTTPClient `json:"httpClient,omitempty"`

	// listeners
	// Unique: true
	Listeners []IApplication `json:"listeners"`

	// mux adaptors
	MuxAdaptors []*MuxAdaptor `json:"muxAdaptors"`

	// name
	Name string `json:"name,omitempty"`

	// number of encoder not opened errors
	NumberOfEncoderNotOpenedErrors int32 `json:"numberOfEncoderNotOpenedErrors,omitempty"`

	// number of encoders blocked
	NumberOfEncodersBlocked int32 `json:"numberOfEncodersBlocked,omitempty"`

	// number of publish timeout error
	NumberOfPublishTimeoutError int32 `json:"numberOfPublishTimeoutError,omitempty"`

	// parent
	Parent *IScope `json:"parent,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// plugins
	Plugins []*PluginDescriptor `json:"plugins"`

	// scheduled job names
	ScheduledJobNames []string `json:"scheduledJobNames"`

	// scope
	Scope *IScope `json:"scope,omitempty"`

	// server settings
	ServerSettings *ServerSettings `json:"serverSettings,omitempty"`

	// server shutting down
	ServerShuttingDown bool `json:"serverShuttingDown,omitempty"`

	// shutdown properly
	ShutdownProperly bool `json:"shutdownProperly,omitempty"`

	// storage client
	StorageClient *StorageClient `json:"storageClient,omitempty"`

	// stream accept filter
	StreamAcceptFilter *StreamAcceptFilter `json:"streamAcceptFilter,omitempty"`

	// stream fetcher manager
	StreamFetcherManager *StreamFetcherManager `json:"streamFetcherManager,omitempty"`

	// stream playback security
	// Unique: true
	StreamPlaybackSecurity []IStreamPlaybackSecurity `json:"streamPlaybackSecurity"`

	// stream publish security
	// Unique: true
	StreamPublishSecurity []IStreamPublishSecurity `json:"streamPublishSecurity"`

	// stream publish security list
	StreamPublishSecurityList []IStreamPublishSecurity `json:"streamPublishSecurityList"`

	// vertx
	Vertx *Vertx `json:"vertx,omitempty"`

	// web r t c audio receive stats
	WebRTCAudioReceiveStats *WebRTCAudioReceiveStats `json:"webRTCAudioReceiveStats,omitempty"`

	// web r t c audio send stats
	WebRTCAudioSendStats *WebRTCAudioSendStats `json:"webRTCAudioSendStats,omitempty"`

	// web r t c video receive stats
	WebRTCVideoReceiveStats *WebRTCVideoReceiveStats `json:"webRTCVideoReceiveStats,omitempty"`

	// web r t c video send stats
	WebRTCVideoSendStats *WebRTCVideoSendStats `json:"webRTCVideoSendStats,omitempty"`
}

// Validate validates this ant media application adapter
func (m *AntMediaApplicationAdapter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributeNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildScopeNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataStoreFactory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMuxAdaptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamAcceptFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamFetcherManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamPlaybackSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamPublishSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVertx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebRTCAudioReceiveStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebRTCAudioSendStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebRTCVideoReceiveStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebRTCVideoSendStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntMediaApplicationAdapter) validateAppSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AppSettings) { // not required
		return nil
	}

	if m.AppSettings != nil {
		if err := m.AppSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateAttributeNames(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("attributeNames", "body", m.AttributeNames); err != nil {
		return err
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateChildScopeNames(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildScopeNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("childScopeNames", "body", m.ChildScopeNames); err != nil {
		return err
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateClients(formats strfmt.Registry) error {
	if swag.IsZero(m.Clients) { // not required
		return nil
	}

	if err := validate.UniqueItems("clients", "body", m.Clients); err != nil {
		return err
	}

	for i := 0; i < len(m.Clients); i++ {
		if swag.IsZero(m.Clients[i]) { // not required
			continue
		}

		if m.Clients[i] != nil {
			if err := m.Clients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {

		if err := validate.UniqueItems("connections"+"."+strconv.Itoa(i), "body", m.Connections[i]); err != nil {
			return err
		}

		for ii := 0; ii < len(m.Connections[i]); ii++ {
			if swag.IsZero(m.Connections[i][ii]) { // not required
				continue
			}

			if m.Connections[i][ii] != nil {
				if err := m.Connections[i][ii].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateDataStore(formats strfmt.Registry) error {
	if swag.IsZero(m.DataStore) { // not required
		return nil
	}

	if m.DataStore != nil {
		if err := m.DataStore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataStore")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateDataStoreFactory(formats strfmt.Registry) error {
	if swag.IsZero(m.DataStoreFactory) { // not required
		return nil
	}

	if m.DataStoreFactory != nil {
		if err := m.DataStoreFactory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataStoreFactory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataStoreFactory")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateHTTPClient(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPClient) { // not required
		return nil
	}

	if m.HTTPClient != nil {
		if err := m.HTTPClient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("httpClient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("httpClient")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateListeners(formats strfmt.Registry) error {
	if swag.IsZero(m.Listeners) { // not required
		return nil
	}

	if err := validate.UniqueItems("listeners", "body", m.Listeners); err != nil {
		return err
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateMuxAdaptors(formats strfmt.Registry) error {
	if swag.IsZero(m.MuxAdaptors) { // not required
		return nil
	}

	for i := 0; i < len(m.MuxAdaptors); i++ {
		if swag.IsZero(m.MuxAdaptors[i]) { // not required
			continue
		}

		if m.MuxAdaptors[i] != nil {
			if err := m.MuxAdaptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("muxAdaptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("muxAdaptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateServerSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerSettings) { // not required
		return nil
	}

	if m.ServerSettings != nil {
		if err := m.ServerSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateStorageClient(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClient) { // not required
		return nil
	}

	if m.StorageClient != nil {
		if err := m.StorageClient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageClient")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateStreamAcceptFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamAcceptFilter) { // not required
		return nil
	}

	if m.StreamAcceptFilter != nil {
		if err := m.StreamAcceptFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamAcceptFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streamAcceptFilter")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateStreamFetcherManager(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamFetcherManager) { // not required
		return nil
	}

	if m.StreamFetcherManager != nil {
		if err := m.StreamFetcherManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamFetcherManager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streamFetcherManager")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateStreamPlaybackSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamPlaybackSecurity) { // not required
		return nil
	}

	if err := validate.UniqueItems("streamPlaybackSecurity", "body", m.StreamPlaybackSecurity); err != nil {
		return err
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateStreamPublishSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamPublishSecurity) { // not required
		return nil
	}

	if err := validate.UniqueItems("streamPublishSecurity", "body", m.StreamPublishSecurity); err != nil {
		return err
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateVertx(formats strfmt.Registry) error {
	if swag.IsZero(m.Vertx) { // not required
		return nil
	}

	if m.Vertx != nil {
		if err := m.Vertx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertx")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateWebRTCAudioReceiveStats(formats strfmt.Registry) error {
	if swag.IsZero(m.WebRTCAudioReceiveStats) { // not required
		return nil
	}

	if m.WebRTCAudioReceiveStats != nil {
		if err := m.WebRTCAudioReceiveStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCAudioReceiveStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCAudioReceiveStats")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateWebRTCAudioSendStats(formats strfmt.Registry) error {
	if swag.IsZero(m.WebRTCAudioSendStats) { // not required
		return nil
	}

	if m.WebRTCAudioSendStats != nil {
		if err := m.WebRTCAudioSendStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCAudioSendStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCAudioSendStats")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateWebRTCVideoReceiveStats(formats strfmt.Registry) error {
	if swag.IsZero(m.WebRTCVideoReceiveStats) { // not required
		return nil
	}

	if m.WebRTCVideoReceiveStats != nil {
		if err := m.WebRTCVideoReceiveStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCVideoReceiveStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCVideoReceiveStats")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) validateWebRTCVideoSendStats(formats strfmt.Registry) error {
	if swag.IsZero(m.WebRTCVideoSendStats) { // not required
		return nil
	}

	if m.WebRTCVideoSendStats != nil {
		if err := m.WebRTCVideoSendStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCVideoSendStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCVideoSendStats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ant media application adapter based on the context it is used
func (m *AntMediaApplicationAdapter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataStore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataStoreFactory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMuxAdaptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreamAcceptFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreamFetcherManager(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVertx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebRTCAudioReceiveStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebRTCAudioSendStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebRTCVideoReceiveStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebRTCVideoSendStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateAppSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AppSettings != nil {
		if err := m.AppSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateClients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clients); i++ {

		if m.Clients[i] != nil {
			if err := m.Clients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		for ii := 0; ii < len(m.Connections[i]); ii++ {

			if m.Connections[i][ii] != nil {
				if err := m.Connections[i][ii].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {
		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateDataStore(ctx context.Context, formats strfmt.Registry) error {

	if m.DataStore != nil {
		if err := m.DataStore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataStore")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateDataStoreFactory(ctx context.Context, formats strfmt.Registry) error {

	if m.DataStoreFactory != nil {
		if err := m.DataStoreFactory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataStoreFactory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataStoreFactory")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateHTTPClient(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPClient != nil {
		if err := m.HTTPClient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("httpClient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("httpClient")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateMuxAdaptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MuxAdaptors); i++ {

		if m.MuxAdaptors[i] != nil {
			if err := m.MuxAdaptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("muxAdaptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("muxAdaptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {
		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plugins); i++ {

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {
		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateServerSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerSettings != nil {
		if err := m.ServerSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateStorageClient(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageClient != nil {
		if err := m.StorageClient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageClient")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateStreamAcceptFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.StreamAcceptFilter != nil {
		if err := m.StreamAcceptFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamAcceptFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streamAcceptFilter")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateStreamFetcherManager(ctx context.Context, formats strfmt.Registry) error {

	if m.StreamFetcherManager != nil {
		if err := m.StreamFetcherManager.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamFetcherManager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streamFetcherManager")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateVertx(ctx context.Context, formats strfmt.Registry) error {

	if m.Vertx != nil {
		if err := m.Vertx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertx")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateWebRTCAudioReceiveStats(ctx context.Context, formats strfmt.Registry) error {

	if m.WebRTCAudioReceiveStats != nil {
		if err := m.WebRTCAudioReceiveStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCAudioReceiveStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCAudioReceiveStats")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateWebRTCAudioSendStats(ctx context.Context, formats strfmt.Registry) error {

	if m.WebRTCAudioSendStats != nil {
		if err := m.WebRTCAudioSendStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCAudioSendStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCAudioSendStats")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateWebRTCVideoReceiveStats(ctx context.Context, formats strfmt.Registry) error {

	if m.WebRTCVideoReceiveStats != nil {
		if err := m.WebRTCVideoReceiveStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCVideoReceiveStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCVideoReceiveStats")
			}
			return err
		}
	}

	return nil
}

func (m *AntMediaApplicationAdapter) contextValidateWebRTCVideoSendStats(ctx context.Context, formats strfmt.Registry) error {

	if m.WebRTCVideoSendStats != nil {
		if err := m.WebRTCVideoSendStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webRTCVideoSendStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webRTCVideoSendStats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntMediaApplicationAdapter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntMediaApplicationAdapter) UnmarshalBinary(b []byte) error {
	var res AntMediaApplicationAdapter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
