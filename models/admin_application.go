// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminApplication admin application
//
// swagger:model AdminApplication
type AdminApplication struct {

	// application info
	ApplicationInfo []*ApplicationInfo `json:"applicationInfo"`

	// applications
	Applications []string `json:"applications"`

	// attribute names
	// Unique: true
	AttributeNames []string `json:"attributeNames"`

	// attributes
	Attributes map[string]interface{} `json:"attributes,omitempty"`

	// child scope names
	// Unique: true
	ChildScopeNames []string `json:"childScopeNames"`

	// client TTL
	ClientTTL int64 `json:"clientTTL,omitempty"`

	// clients
	// Unique: true
	Clients []*IClient `json:"clients"`

	// cluster notifier
	ClusterNotifier *IClusterNotifier `json:"clusterNotifier,omitempty"`

	// connections
	Connections [][]*IConnection `json:"connections"`

	// context
	Context *IContext `json:"context,omitempty"`

	// data store factory
	DataStoreFactory *ConsoleDataStoreFactory `json:"dataStoreFactory,omitempty"`

	// depth
	Depth int32 `json:"depth,omitempty"`

	// ghost conns cleanup period
	GhostConnsCleanupPeriod int32 `json:"ghostConnsCleanupPeriod,omitempty"`

	// listeners
	// Unique: true
	Listeners []IApplication `json:"listeners"`

	// name
	Name string `json:"name,omitempty"`

	// parent
	Parent *IScope `json:"parent,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// plugins
	Plugins []*PluginDescriptor `json:"plugins"`

	// root scope
	RootScope *IScope `json:"rootScope,omitempty"`

	// scheduled job names
	ScheduledJobNames []string `json:"scheduledJobNames"`

	// scope
	Scope *IScope `json:"scope,omitempty"`

	// stream playback security
	// Unique: true
	StreamPlaybackSecurity []IStreamPlaybackSecurity `json:"streamPlaybackSecurity"`

	// stream publish security
	// Unique: true
	StreamPublishSecurity []IStreamPublishSecurity `json:"streamPublishSecurity"`

	// total connection size
	TotalConnectionSize int32 `json:"totalConnectionSize,omitempty"`

	// total live stream size
	TotalLiveStreamSize int32 `json:"totalLiveStreamSize,omitempty"`
}

// Validate validates this admin application
func (m *AdminApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributeNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildScopeNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterNotifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataStoreFactory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamPlaybackSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamPublishSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminApplication) validateApplicationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationInfo); i++ {
		if swag.IsZero(m.ApplicationInfo[i]) { // not required
			continue
		}

		if m.ApplicationInfo[i] != nil {
			if err := m.ApplicationInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminApplication) validateAttributeNames(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("attributeNames", "body", m.AttributeNames); err != nil {
		return err
	}

	return nil
}

func (m *AdminApplication) validateChildScopeNames(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildScopeNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("childScopeNames", "body", m.ChildScopeNames); err != nil {
		return err
	}

	return nil
}

func (m *AdminApplication) validateClients(formats strfmt.Registry) error {
	if swag.IsZero(m.Clients) { // not required
		return nil
	}

	if err := validate.UniqueItems("clients", "body", m.Clients); err != nil {
		return err
	}

	for i := 0; i < len(m.Clients); i++ {
		if swag.IsZero(m.Clients[i]) { // not required
			continue
		}

		if m.Clients[i] != nil {
			if err := m.Clients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminApplication) validateClusterNotifier(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterNotifier) { // not required
		return nil
	}

	if m.ClusterNotifier != nil {
		if err := m.ClusterNotifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNotifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNotifier")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {

		if err := validate.UniqueItems("connections"+"."+strconv.Itoa(i), "body", m.Connections[i]); err != nil {
			return err
		}

		for ii := 0; ii < len(m.Connections[i]); ii++ {
			if swag.IsZero(m.Connections[i][ii]) { // not required
				continue
			}

			if m.Connections[i][ii] != nil {
				if err := m.Connections[i][ii].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *AdminApplication) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) validateDataStoreFactory(formats strfmt.Registry) error {
	if swag.IsZero(m.DataStoreFactory) { // not required
		return nil
	}

	if m.DataStoreFactory != nil {
		if err := m.DataStoreFactory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataStoreFactory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataStoreFactory")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) validateListeners(formats strfmt.Registry) error {
	if swag.IsZero(m.Listeners) { // not required
		return nil
	}

	if err := validate.UniqueItems("listeners", "body", m.Listeners); err != nil {
		return err
	}

	return nil
}

func (m *AdminApplication) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminApplication) validateRootScope(formats strfmt.Registry) error {
	if swag.IsZero(m.RootScope) { // not required
		return nil
	}

	if m.RootScope != nil {
		if err := m.RootScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootScope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootScope")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) validateStreamPlaybackSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamPlaybackSecurity) { // not required
		return nil
	}

	if err := validate.UniqueItems("streamPlaybackSecurity", "body", m.StreamPlaybackSecurity); err != nil {
		return err
	}

	return nil
}

func (m *AdminApplication) validateStreamPublishSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamPublishSecurity) { // not required
		return nil
	}

	if err := validate.UniqueItems("streamPublishSecurity", "body", m.StreamPublishSecurity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this admin application based on the context it is used
func (m *AdminApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterNotifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataStoreFactory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminApplication) contextValidateApplicationInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationInfo); i++ {

		if m.ApplicationInfo[i] != nil {
			if err := m.ApplicationInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminApplication) contextValidateClients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clients); i++ {

		if m.Clients[i] != nil {
			if err := m.Clients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminApplication) contextValidateClusterNotifier(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterNotifier != nil {
		if err := m.ClusterNotifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNotifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNotifier")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		for ii := 0; ii < len(m.Connections[i]); ii++ {

			if m.Connections[i][ii] != nil {
				if err := m.Connections[i][ii].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("connections" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *AdminApplication) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {
		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) contextValidateDataStoreFactory(ctx context.Context, formats strfmt.Registry) error {

	if m.DataStoreFactory != nil {
		if err := m.DataStoreFactory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataStoreFactory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataStoreFactory")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {
		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plugins); i++ {

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdminApplication) contextValidateRootScope(ctx context.Context, formats strfmt.Registry) error {

	if m.RootScope != nil {
		if err := m.RootScope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootScope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootScope")
			}
			return err
		}
	}

	return nil
}

func (m *AdminApplication) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {
		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminApplication) UnmarshalBinary(b []byte) error {
	var res AdminApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
