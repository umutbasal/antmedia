// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IContext i context
//
// swagger:model IContext
type IContext struct {

	// application context
	ApplicationContext *ApplicationContext `json:"applicationContext,omitempty"`

	// class loader
	ClassLoader *ClassLoader `json:"classLoader,omitempty"`

	// client registry
	ClientRegistry IClientRegistry `json:"clientRegistry,omitempty"`

	// global scope
	GlobalScope *IGlobalScope `json:"globalScope,omitempty"`

	// mapping strategy
	MappingStrategy IMappingStrategy `json:"mappingStrategy,omitempty"`

	// persistance store
	PersistanceStore *IPersistenceStore `json:"persistanceStore,omitempty"`

	// service invoker
	ServiceInvoker IServiceInvoker `json:"serviceInvoker,omitempty"`
}

// Validate validates this i context
func (m *IContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassLoader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistanceStore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IContext) validateApplicationContext(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationContext) { // not required
		return nil
	}

	if m.ApplicationContext != nil {
		if err := m.ApplicationContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationContext")
			}
			return err
		}
	}

	return nil
}

func (m *IContext) validateClassLoader(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassLoader) { // not required
		return nil
	}

	if m.ClassLoader != nil {
		if err := m.ClassLoader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *IContext) validateGlobalScope(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalScope) { // not required
		return nil
	}

	if m.GlobalScope != nil {
		if err := m.GlobalScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalScope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalScope")
			}
			return err
		}
	}

	return nil
}

func (m *IContext) validatePersistanceStore(formats strfmt.Registry) error {
	if swag.IsZero(m.PersistanceStore) { // not required
		return nil
	}

	if m.PersistanceStore != nil {
		if err := m.PersistanceStore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistanceStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistanceStore")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this i context based on the context it is used
func (m *IContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClassLoader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersistanceStore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IContext) contextValidateApplicationContext(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationContext != nil {
		if err := m.ApplicationContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationContext")
			}
			return err
		}
	}

	return nil
}

func (m *IContext) contextValidateClassLoader(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassLoader != nil {
		if err := m.ClassLoader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *IContext) contextValidateGlobalScope(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalScope != nil {
		if err := m.GlobalScope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalScope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalScope")
			}
			return err
		}
	}

	return nil
}

func (m *IContext) contextValidatePersistanceStore(ctx context.Context, formats strfmt.Registry) error {

	if m.PersistanceStore != nil {
		if err := m.PersistanceStore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistanceStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistanceStore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IContext) UnmarshalBinary(b []byte) error {
	var res IContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
