// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkerThread worker thread
//
// swagger:model WorkerThread
type WorkerThread struct {

	// alive
	Alive bool `json:"alive,omitempty"`

	// buffered duration ms
	BufferedDurationMs int64 `json:"bufferedDurationMs,omitempty"`

	// context class loader
	ContextClassLoader *ClassLoader `json:"contextClassLoader,omitempty"`

	// daemon
	Daemon bool `json:"daemon,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// interrupted
	Interrupted bool `json:"interrupted,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// stack trace
	StackTrace []*StackTraceElement `json:"stackTrace"`

	// state
	// Enum: [NEW RUNNABLE BLOCKED WAITING TIMED_WAITING TERMINATED]
	State string `json:"state,omitempty"`

	// thread group
	ThreadGroup *ThreadGroup `json:"threadGroup,omitempty"`

	// uncaught exception handler
	UncaughtExceptionHandler UncaughtExceptionHandler `json:"uncaughtExceptionHandler,omitempty"`
}

// Validate validates this worker thread
func (m *WorkerThread) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextClassLoader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackTrace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreadGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkerThread) validateContextClassLoader(formats strfmt.Registry) error {
	if swag.IsZero(m.ContextClassLoader) { // not required
		return nil
	}

	if m.ContextClassLoader != nil {
		if err := m.ContextClassLoader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contextClassLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contextClassLoader")
			}
			return err
		}
	}

	return nil
}

func (m *WorkerThread) validateStackTrace(formats strfmt.Registry) error {
	if swag.IsZero(m.StackTrace) { // not required
		return nil
	}

	for i := 0; i < len(m.StackTrace); i++ {
		if swag.IsZero(m.StackTrace[i]) { // not required
			continue
		}

		if m.StackTrace[i] != nil {
			if err := m.StackTrace[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stackTrace" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stackTrace" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workerThreadTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","RUNNABLE","BLOCKED","WAITING","TIMED_WAITING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workerThreadTypeStatePropEnum = append(workerThreadTypeStatePropEnum, v)
	}
}

const (

	// WorkerThreadStateNEW captures enum value "NEW"
	WorkerThreadStateNEW string = "NEW"

	// WorkerThreadStateRUNNABLE captures enum value "RUNNABLE"
	WorkerThreadStateRUNNABLE string = "RUNNABLE"

	// WorkerThreadStateBLOCKED captures enum value "BLOCKED"
	WorkerThreadStateBLOCKED string = "BLOCKED"

	// WorkerThreadStateWAITING captures enum value "WAITING"
	WorkerThreadStateWAITING string = "WAITING"

	// WorkerThreadStateTIMEDWAITING captures enum value "TIMED_WAITING"
	WorkerThreadStateTIMEDWAITING string = "TIMED_WAITING"

	// WorkerThreadStateTERMINATED captures enum value "TERMINATED"
	WorkerThreadStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *WorkerThread) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workerThreadTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkerThread) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *WorkerThread) validateThreadGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ThreadGroup) { // not required
		return nil
	}

	if m.ThreadGroup != nil {
		if err := m.ThreadGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threadGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threadGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this worker thread based on the context it is used
func (m *WorkerThread) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContextClassLoader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStackTrace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThreadGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkerThread) contextValidateContextClassLoader(ctx context.Context, formats strfmt.Registry) error {

	if m.ContextClassLoader != nil {
		if err := m.ContextClassLoader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contextClassLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contextClassLoader")
			}
			return err
		}
	}

	return nil
}

func (m *WorkerThread) contextValidateStackTrace(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StackTrace); i++ {

		if m.StackTrace[i] != nil {
			if err := m.StackTrace[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stackTrace" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stackTrace" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkerThread) contextValidateThreadGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ThreadGroup != nil {
		if err := m.ThreadGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threadGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threadGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkerThread) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkerThread) UnmarshalBinary(b []byte) error {
	var res WorkerThread
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
