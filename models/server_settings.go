// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerSettings server settings
//
// swagger:model ServerSettings
type ServerSettings struct {

	// allowed dashboard c ID r
	AllowedDashboardCIDR string `json:"allowedDashboardCIDR,omitempty"`

	// build for market
	BuildForMarket bool `json:"buildForMarket,omitempty"`

	// cpu measurement period ms
	CPUMeasurementPeriodMs int32 `json:"cpuMeasurementPeriodMs,omitempty"`

	// cpu measurement window size
	CPUMeasurementWindowSize int32 `json:"cpuMeasurementWindowSize,omitempty"`

	// default Http port
	DefaultHTTPPort int32 `json:"defaultHttpPort,omitempty"`

	// heartbeat enabled
	HeartbeatEnabled bool `json:"heartbeatEnabled,omitempty"`

	// host address
	HostAddress string `json:"hostAddress,omitempty"`

	// jwks URL
	JwksURL string `json:"jwksURL,omitempty"`

	// jwt server control enabled
	JwtServerControlEnabled bool `json:"jwtServerControlEnabled,omitempty"`

	// jwt server secret key
	JwtServerSecretKey string `json:"jwtServerSecretKey,omitempty"`

	// licence key
	LicenceKey string `json:"licenceKey,omitempty"`

	// log level
	LogLevel string `json:"logLevel,omitempty"`

	// marketplace
	Marketplace string `json:"marketplace,omitempty"`

	// native log level
	NativeLogLevel string `json:"nativeLogLevel,omitempty"`

	// node group
	NodeGroup string `json:"nodeGroup,omitempty"`

	// origin server port
	OriginServerPort int32 `json:"originServerPort,omitempty"`

	// proxy address
	ProxyAddress string `json:"proxyAddress,omitempty"`

	// server name
	ServerName string `json:"serverName,omitempty"`

	// srt port
	SrtPort int32 `json:"srtPort,omitempty"`

	// use global Ip
	UseGlobalIP bool `json:"useGlobalIp,omitempty"`

	// web r t c log level
	// Enum: [LS_VERBOSE LS_INFO LS_WARNING LS_ERROR LS_NONE]
	WebRTCLogLevel string `json:"webRTCLogLevel,omitempty"`
}

// Validate validates this server settings
func (m *ServerSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWebRTCLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverSettingsTypeWebRTCLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LS_VERBOSE","LS_INFO","LS_WARNING","LS_ERROR","LS_NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverSettingsTypeWebRTCLogLevelPropEnum = append(serverSettingsTypeWebRTCLogLevelPropEnum, v)
	}
}

const (

	// ServerSettingsWebRTCLogLevelLSVERBOSE captures enum value "LS_VERBOSE"
	ServerSettingsWebRTCLogLevelLSVERBOSE string = "LS_VERBOSE"

	// ServerSettingsWebRTCLogLevelLSINFO captures enum value "LS_INFO"
	ServerSettingsWebRTCLogLevelLSINFO string = "LS_INFO"

	// ServerSettingsWebRTCLogLevelLSWARNING captures enum value "LS_WARNING"
	ServerSettingsWebRTCLogLevelLSWARNING string = "LS_WARNING"

	// ServerSettingsWebRTCLogLevelLSERROR captures enum value "LS_ERROR"
	ServerSettingsWebRTCLogLevelLSERROR string = "LS_ERROR"

	// ServerSettingsWebRTCLogLevelLSNONE captures enum value "LS_NONE"
	ServerSettingsWebRTCLogLevelLSNONE string = "LS_NONE"
)

// prop value enum
func (m *ServerSettings) validateWebRTCLogLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverSettingsTypeWebRTCLogLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerSettings) validateWebRTCLogLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.WebRTCLogLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateWebRTCLogLevelEnum("webRTCLogLevel", "body", m.WebRTCLogLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server settings based on context it is used
func (m *ServerSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerSettings) UnmarshalBinary(b []byte) error {
	var res ServerSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
