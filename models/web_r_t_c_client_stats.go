// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebRTCClientStats The WebRTC Client Statistics class
//
// swagger:model WebRTCClientStats
type WebRTCClientStats struct {

	// the audio frame send period of the WebRTC Client
	AudioFrameSendPeriod float64 `json:"audioFrameSendPeriod,omitempty"`

	// Number of audio packets sent
	AudioPacketCount int64 `json:"audioPacketCount,omitempty"`

	// Audio sent low level stats
	AudioSentStats *WebRTCAudioSendStats `json:"audioSentStats,omitempty"`

	// WebRTC Client Id which is basically hash of the object
	ClientID int32 `json:"clientId,omitempty"`

	// Free text information for the client
	ClientInfo string `json:"clientInfo,omitempty"`

	// the measured bitrate of the WebRTC Client
	MeasuredBitrate int32 `json:"measuredBitrate,omitempty"`

	// the sent bitrate of the WebRTC Client
	SendBitrate int32 `json:"sendBitrate,omitempty"`

	// the video frame sent period of the WebRTC Client
	VideoFrameSendPeriod float64 `json:"videoFrameSendPeriod,omitempty"`

	// Number of video packets sent
	VideoPacketCount int64 `json:"videoPacketCount,omitempty"`

	// Video sent low level stats
	VideoSentStats *WebRTCVideoSendStats `json:"videoSentStats,omitempty"`
}

// Validate validates this web r t c client stats
func (m *WebRTCClientStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudioSentStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoSentStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebRTCClientStats) validateAudioSentStats(formats strfmt.Registry) error {
	if swag.IsZero(m.AudioSentStats) { // not required
		return nil
	}

	if m.AudioSentStats != nil {
		if err := m.AudioSentStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audioSentStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audioSentStats")
			}
			return err
		}
	}

	return nil
}

func (m *WebRTCClientStats) validateVideoSentStats(formats strfmt.Registry) error {
	if swag.IsZero(m.VideoSentStats) { // not required
		return nil
	}

	if m.VideoSentStats != nil {
		if err := m.VideoSentStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("videoSentStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("videoSentStats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this web r t c client stats based on the context it is used
func (m *WebRTCClientStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudioSentStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideoSentStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebRTCClientStats) contextValidateAudioSentStats(ctx context.Context, formats strfmt.Registry) error {

	if m.AudioSentStats != nil {
		if err := m.AudioSentStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audioSentStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audioSentStats")
			}
			return err
		}
	}

	return nil
}

func (m *WebRTCClientStats) contextValidateVideoSentStats(ctx context.Context, formats strfmt.Registry) error {

	if m.VideoSentStats != nil {
		if err := m.VideoSentStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("videoSentStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("videoSentStats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebRTCClientStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebRTCClientStats) UnmarshalBinary(b []byte) error {
	var res WebRTCClientStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
