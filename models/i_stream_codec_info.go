// Code generated by go-swagger;

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IStreamCodecInfo i stream codec info
//
// swagger:model IStreamCodecInfo
type IStreamCodecInfo struct {

	// audio codec
	AudioCodec *IAudioStreamCodec `json:"audioCodec,omitempty"`

	// audio codec name
	AudioCodecName string `json:"audioCodecName,omitempty"`

	// video codec
	VideoCodec *IVideoStreamCodec `json:"videoCodec,omitempty"`

	// video codec name
	VideoCodecName string `json:"videoCodecName,omitempty"`
}

// Validate validates this i stream codec info
func (m *IStreamCodecInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudioCodec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoCodec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IStreamCodecInfo) validateAudioCodec(formats strfmt.Registry) error {
	if swag.IsZero(m.AudioCodec) { // not required
		return nil
	}

	if m.AudioCodec != nil {
		if err := m.AudioCodec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audioCodec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audioCodec")
			}
			return err
		}
	}

	return nil
}

func (m *IStreamCodecInfo) validateVideoCodec(formats strfmt.Registry) error {
	if swag.IsZero(m.VideoCodec) { // not required
		return nil
	}

	if m.VideoCodec != nil {
		if err := m.VideoCodec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("videoCodec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("videoCodec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this i stream codec info based on the context it is used
func (m *IStreamCodecInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudioCodec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideoCodec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IStreamCodecInfo) contextValidateAudioCodec(ctx context.Context, formats strfmt.Registry) error {

	if m.AudioCodec != nil {
		if err := m.AudioCodec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audioCodec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audioCodec")
			}
			return err
		}
	}

	return nil
}

func (m *IStreamCodecInfo) contextValidateVideoCodec(ctx context.Context, formats strfmt.Registry) error {

	if m.VideoCodec != nil {
		if err := m.VideoCodec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("videoCodec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("videoCodec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IStreamCodecInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IStreamCodecInfo) UnmarshalBinary(b []byte) error {
	var res IStreamCodecInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
