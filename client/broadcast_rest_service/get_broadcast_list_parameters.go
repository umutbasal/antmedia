// Code generated by go-swagger; DO NOT EDIT.

package broadcast_rest_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBroadcastListParams creates a new GetBroadcastListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBroadcastListParams() *GetBroadcastListParams {
	return &GetBroadcastListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBroadcastListParamsWithTimeout creates a new GetBroadcastListParams object
// with the ability to set a timeout on a request.
func NewGetBroadcastListParamsWithTimeout(timeout time.Duration) *GetBroadcastListParams {
	return &GetBroadcastListParams{
		timeout: timeout,
	}
}

// NewGetBroadcastListParamsWithContext creates a new GetBroadcastListParams object
// with the ability to set a context for a request.
func NewGetBroadcastListParamsWithContext(ctx context.Context) *GetBroadcastListParams {
	return &GetBroadcastListParams{
		Context: ctx,
	}
}

// NewGetBroadcastListParamsWithHTTPClient creates a new GetBroadcastListParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBroadcastListParamsWithHTTPClient(client *http.Client) *GetBroadcastListParams {
	return &GetBroadcastListParams{
		HTTPClient: client,
	}
}

/* GetBroadcastListParams contains all the parameters to send to the API endpoint
   for the get broadcast list operation.

   Typically these are written to a http.Request.
*/
type GetBroadcastListParams struct {

	/* Offset.

	   This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.

	   Format: int32
	*/
	Offset int32

	/* OrderBy.

	   "asc" for Ascending, "desc" Descending order
	*/
	OrderBy *string

	/* Search.

	   Search parameter, returns specific items that contains search string
	*/
	Search *string

	/* Size.

	   Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value

	   Format: int32
	*/
	Size int32

	/* SortBy.

	   Field to sort. Possible values are "name", "date", "status"
	*/
	SortBy *string

	/* TypeBy.

	   Type of the stream. Possible values are "liveStream", "ipCamera", "streamSource", "VoD"
	*/
	TypeBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get broadcast list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBroadcastListParams) WithDefaults() *GetBroadcastListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get broadcast list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBroadcastListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get broadcast list params
func (o *GetBroadcastListParams) WithTimeout(timeout time.Duration) *GetBroadcastListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get broadcast list params
func (o *GetBroadcastListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get broadcast list params
func (o *GetBroadcastListParams) WithContext(ctx context.Context) *GetBroadcastListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get broadcast list params
func (o *GetBroadcastListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get broadcast list params
func (o *GetBroadcastListParams) WithHTTPClient(client *http.Client) *GetBroadcastListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get broadcast list params
func (o *GetBroadcastListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOffset adds the offset to the get broadcast list params
func (o *GetBroadcastListParams) WithOffset(offset int32) *GetBroadcastListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get broadcast list params
func (o *GetBroadcastListParams) SetOffset(offset int32) {
	o.Offset = offset
}

// WithOrderBy adds the orderBy to the get broadcast list params
func (o *GetBroadcastListParams) WithOrderBy(orderBy *string) *GetBroadcastListParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get broadcast list params
func (o *GetBroadcastListParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithSearch adds the search to the get broadcast list params
func (o *GetBroadcastListParams) WithSearch(search *string) *GetBroadcastListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get broadcast list params
func (o *GetBroadcastListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSize adds the size to the get broadcast list params
func (o *GetBroadcastListParams) WithSize(size int32) *GetBroadcastListParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get broadcast list params
func (o *GetBroadcastListParams) SetSize(size int32) {
	o.Size = size
}

// WithSortBy adds the sortBy to the get broadcast list params
func (o *GetBroadcastListParams) WithSortBy(sortBy *string) *GetBroadcastListParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get broadcast list params
func (o *GetBroadcastListParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithTypeBy adds the typeBy to the get broadcast list params
func (o *GetBroadcastListParams) WithTypeBy(typeBy *string) *GetBroadcastListParams {
	o.SetTypeBy(typeBy)
	return o
}

// SetTypeBy adds the typeBy to the get broadcast list params
func (o *GetBroadcastListParams) SetTypeBy(typeBy *string) {
	o.TypeBy = typeBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetBroadcastListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param offset
	if err := r.SetPathParam("offset", swag.FormatInt32(o.Offset)); err != nil {
		return err
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	// path param size
	if err := r.SetPathParam("size", swag.FormatInt32(o.Size)); err != nil {
		return err
	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.TypeBy != nil {

		// query param type_by
		var qrTypeBy string

		if o.TypeBy != nil {
			qrTypeBy = *o.TypeBy
		}
		qTypeBy := qrTypeBy
		if qTypeBy != "" {

			if err := r.SetQueryParam("type_by", qTypeBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
