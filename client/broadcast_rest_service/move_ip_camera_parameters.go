// Code generated by go-swagger;

package broadcast_rest_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMoveIPCameraParams creates a new MoveIPCameraParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMoveIPCameraParams() *MoveIPCameraParams {
	return &MoveIPCameraParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMoveIPCameraParamsWithTimeout creates a new MoveIPCameraParams object
// with the ability to set a timeout on a request.
func NewMoveIPCameraParamsWithTimeout(timeout time.Duration) *MoveIPCameraParams {
	return &MoveIPCameraParams{
		timeout: timeout,
	}
}

// NewMoveIPCameraParamsWithContext creates a new MoveIPCameraParams object
// with the ability to set a context for a request.
func NewMoveIPCameraParamsWithContext(ctx context.Context) *MoveIPCameraParams {
	return &MoveIPCameraParams{
		Context: ctx,
	}
}

// NewMoveIPCameraParamsWithHTTPClient creates a new MoveIPCameraParams object
// with the ability to set a custom HTTPClient for a request.
func NewMoveIPCameraParamsWithHTTPClient(client *http.Client) *MoveIPCameraParams {
	return &MoveIPCameraParams{
		HTTPClient: client,
	}
}

/* MoveIPCameraParams contains all the parameters to send to the API endpoint
   for the move IP camera operation.

   Typically these are written to a http.Request.
*/
type MoveIPCameraParams struct {

	/* ID.

	   The id of the IP Camera
	*/
	ID string

	/* Movement.

	   Movement type. It can be absolute, relative or continuous. If not specified, it's relative
	*/
	Movement *string

	/* ValueX.

	   Movement in X direction. If not specified, it's assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements

	   Format: float
	*/
	ValueX *float32

	/* ValueY.

	   Movement in Y direction. If not specified, it's assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements

	   Format: float
	*/
	ValueY *float32

	/* ValueZ.

	   Movement in Zoom. If not specified, it's assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f

	   Format: float
	*/
	ValueZ *float32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the move IP camera params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MoveIPCameraParams) WithDefaults() *MoveIPCameraParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the move IP camera params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MoveIPCameraParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the move IP camera params
func (o *MoveIPCameraParams) WithTimeout(timeout time.Duration) *MoveIPCameraParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the move IP camera params
func (o *MoveIPCameraParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the move IP camera params
func (o *MoveIPCameraParams) WithContext(ctx context.Context) *MoveIPCameraParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the move IP camera params
func (o *MoveIPCameraParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the move IP camera params
func (o *MoveIPCameraParams) WithHTTPClient(client *http.Client) *MoveIPCameraParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the move IP camera params
func (o *MoveIPCameraParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the move IP camera params
func (o *MoveIPCameraParams) WithID(id string) *MoveIPCameraParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the move IP camera params
func (o *MoveIPCameraParams) SetID(id string) {
	o.ID = id
}

// WithMovement adds the movement to the move IP camera params
func (o *MoveIPCameraParams) WithMovement(movement *string) *MoveIPCameraParams {
	o.SetMovement(movement)
	return o
}

// SetMovement adds the movement to the move IP camera params
func (o *MoveIPCameraParams) SetMovement(movement *string) {
	o.Movement = movement
}

// WithValueX adds the valueX to the move IP camera params
func (o *MoveIPCameraParams) WithValueX(valueX *float32) *MoveIPCameraParams {
	o.SetValueX(valueX)
	return o
}

// SetValueX adds the valueX to the move IP camera params
func (o *MoveIPCameraParams) SetValueX(valueX *float32) {
	o.ValueX = valueX
}

// WithValueY adds the valueY to the move IP camera params
func (o *MoveIPCameraParams) WithValueY(valueY *float32) *MoveIPCameraParams {
	o.SetValueY(valueY)
	return o
}

// SetValueY adds the valueY to the move IP camera params
func (o *MoveIPCameraParams) SetValueY(valueY *float32) {
	o.ValueY = valueY
}

// WithValueZ adds the valueZ to the move IP camera params
func (o *MoveIPCameraParams) WithValueZ(valueZ *float32) *MoveIPCameraParams {
	o.SetValueZ(valueZ)
	return o
}

// SetValueZ adds the valueZ to the move IP camera params
func (o *MoveIPCameraParams) SetValueZ(valueZ *float32) {
	o.ValueZ = valueZ
}

// WriteToRequest writes these params to a swagger request
func (o *MoveIPCameraParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Movement != nil {

		// query param movement
		var qrMovement string

		if o.Movement != nil {
			qrMovement = *o.Movement
		}
		qMovement := qrMovement
		if qMovement != "" {

			if err := r.SetQueryParam("movement", qMovement); err != nil {
				return err
			}
		}
	}

	if o.ValueX != nil {

		// query param valueX
		var qrValueX float32

		if o.ValueX != nil {
			qrValueX = *o.ValueX
		}
		qValueX := swag.FormatFloat32(qrValueX)
		if qValueX != "" {

			if err := r.SetQueryParam("valueX", qValueX); err != nil {
				return err
			}
		}
	}

	if o.ValueY != nil {

		// query param valueY
		var qrValueY float32

		if o.ValueY != nil {
			qrValueY = *o.ValueY
		}
		qValueY := swag.FormatFloat32(qrValueY)
		if qValueY != "" {

			if err := r.SetQueryParam("valueY", qValueY); err != nil {
				return err
			}
		}
	}

	if o.ValueZ != nil {

		// query param valueZ
		var qrValueZ float32

		if o.ValueZ != nil {
			qrValueZ = *o.ValueZ
		}
		qValueZ := swag.FormatFloat32(qrValueZ)
		if qValueZ != "" {

			if err := r.SetQueryParam("valueZ", qValueZ); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
