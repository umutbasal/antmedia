// Code generated by go-swagger; DO NOT EDIT.

package broadcast_rest_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new broadcast rest service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for broadcast rest service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddEndpointV2(params *AddEndpointV2Params, opts ...ClientOption) (*AddEndpointV2OK, error)

	AddEndpointV3(params *AddEndpointV3Params, opts ...ClientOption) (*AddEndpointV3OK, error)

	AddStreamToTheRoom(params *AddStreamToTheRoomParams, opts ...ClientOption) (*AddStreamToTheRoomOK, error)

	AddSubTrack(params *AddSubTrackParams, opts ...ClientOption) (*AddSubTrackOK, error)

	AddSubscriber(params *AddSubscriberParams, opts ...ClientOption) (*AddSubscriberOK, error)

	CreateBroadcast(params *CreateBroadcastParams, opts ...ClientOption) (*CreateBroadcastOK, error)

	CreateConferenceRoomV2(params *CreateConferenceRoomV2Params, opts ...ClientOption) (*CreateConferenceRoomV2OK, error)

	DeleteBroadcast(params *DeleteBroadcastParams, opts ...ClientOption) (*DeleteBroadcastOK, error)

	DeleteBroadcasts(params *DeleteBroadcastsParams, opts ...ClientOption) (*DeleteBroadcastsOK, error)

	DeleteConferenceRoomV2(params *DeleteConferenceRoomV2Params, opts ...ClientOption) (*DeleteConferenceRoomV2OK, error)

	DeleteStreamFromTheRoom(params *DeleteStreamFromTheRoomParams, opts ...ClientOption) (*DeleteStreamFromTheRoomOK, error)

	DeleteSubscriber(params *DeleteSubscriberParams, opts ...ClientOption) (*DeleteSubscriberOK, error)

	EditConferenceRoom(params *EditConferenceRoomParams, opts ...ClientOption) (*EditConferenceRoomOK, error)

	EnableRecording(params *EnableRecordingParams, opts ...ClientOption) (*EnableRecordingOK, error)

	FilterBroadcastListV2(params *FilterBroadcastListV2Params, opts ...ClientOption) (*FilterBroadcastListV2OK, error)

	GetAppLiveStatistics(params *GetAppLiveStatisticsParams, opts ...ClientOption) (*GetAppLiveStatisticsOK, error)

	GetBroadcast(params *GetBroadcastParams, opts ...ClientOption) (*GetBroadcastOK, error)

	GetBroadcastList(params *GetBroadcastListParams, opts ...ClientOption) (*GetBroadcastListOK, error)

	GetBroadcastStatistics(params *GetBroadcastStatisticsParams, opts ...ClientOption) (*GetBroadcastStatisticsOK, error)

	GetBroadcastTotalStatistics(params *GetBroadcastTotalStatisticsParams, opts ...ClientOption) (*GetBroadcastTotalStatisticsOK, error)

	GetCameraErrorV2(params *GetCameraErrorV2Params, opts ...ClientOption) (*GetCameraErrorV2OK, error)

	GetConferenceRoom(params *GetConferenceRoomParams, opts ...ClientOption) (*GetConferenceRoomOK, error)

	GetConferenceRoomList(params *GetConferenceRoomListParams, opts ...ClientOption) (*GetConferenceRoomListOK, error)

	GetDetectionListV2(params *GetDetectionListV2Params, opts ...ClientOption) (*GetDetectionListV2OK, error)

	GetJwtTokenV2(params *GetJwtTokenV2Params, opts ...ClientOption) (*GetJwtTokenV2OK, error)

	GetObjectDetectedTotal(params *GetObjectDetectedTotalParams, opts ...ClientOption) (*GetObjectDetectedTotalOK, error)

	GetRTMPToWebRTCStats(params *GetRTMPToWebRTCStatsParams, opts ...ClientOption) (*GetRTMPToWebRTCStatsOK, error)

	GetRoomInfo(params *GetRoomInfoParams, opts ...ClientOption) (*GetRoomInfoOK, error)

	GetStreamInfo(params *GetStreamInfoParams, opts ...ClientOption) (*GetStreamInfoOK, error)

	GetTokenV2(params *GetTokenV2Params, opts ...ClientOption) (*GetTokenV2OK, error)

	GetTotalBroadcastNumberV2(params *GetTotalBroadcastNumberV2Params, opts ...ClientOption) (*GetTotalBroadcastNumberV2OK, error)

	GetWebRTCClientStatsListV2(params *GetWebRTCClientStatsListV2Params, opts ...ClientOption) (*GetWebRTCClientStatsListV2OK, error)

	GetWebRTCLowLevelReceiveStats(params *GetWebRTCLowLevelReceiveStatsParams, opts ...ClientOption) (*GetWebRTCLowLevelReceiveStatsOK, error)

	GetWebRTCLowLevelSendStats(params *GetWebRTCLowLevelSendStatsParams, opts ...ClientOption) (*GetWebRTCLowLevelSendStatsOK, error)

	GetWebRTCViewerList(params *GetWebRTCViewerListParams, opts ...ClientOption) (*GetWebRTCViewerListOK, error)

	ImportLiveStreams2StalkerV2(params *ImportLiveStreams2StalkerV2Params, opts ...ClientOption) (*ImportLiveStreams2StalkerV2OK, error)

	ListSubscriberStatsV2(params *ListSubscriberStatsV2Params, opts ...ClientOption) (*ListSubscriberStatsV2OK, error)

	ListSubscriberV2(params *ListSubscriberV2Params, opts ...ClientOption) (*ListSubscriberV2OK, error)

	ListTokensV2(params *ListTokensV2Params, opts ...ClientOption) (*ListTokensV2OK, error)

	MoveIPCamera(params *MoveIPCameraParams, opts ...ClientOption) (*MoveIPCameraOK, error)

	RemoveEndpoint(params *RemoveEndpointParams, opts ...ClientOption) (*RemoveEndpointOK, error)

	RemoveEndpointV2(params *RemoveEndpointV2Params, opts ...ClientOption) (*RemoveEndpointV2OK, error)

	RevokeSubscribers(params *RevokeSubscribersParams, opts ...ClientOption) (*RevokeSubscribersOK, error)

	RevokeTokensV2(params *RevokeTokensV2Params, opts ...ClientOption) (*RevokeTokensV2OK, error)

	SearchOnvifDevicesV2(params *SearchOnvifDevicesV2Params, opts ...ClientOption) (*SearchOnvifDevicesV2OK, error)

	SendMessage(params *SendMessageParams, opts ...ClientOption) (*SendMessageOK, error)

	StartStreamSourceV2(params *StartStreamSourceV2Params, opts ...ClientOption) (*StartStreamSourceV2OK, error)

	StopMove(params *StopMoveParams, opts ...ClientOption) (*StopMoveOK, error)

	StopPlaying(params *StopPlayingParams, opts ...ClientOption) (*StopPlayingOK, error)

	StopStreamingV2(params *StopStreamingV2Params, opts ...ClientOption) (*StopStreamingV2OK, error)

	UpdateBroadcast(params *UpdateBroadcastParams, opts ...ClientOption) (*UpdateBroadcastOK, error)

	ValidateTokenV2(params *ValidateTokenV2Params, opts ...ClientOption) (*ValidateTokenV2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddEndpointV2 add endpoint v2 API
*/
func (a *Client) AddEndpointV2(params *AddEndpointV2Params, opts ...ClientOption) (*AddEndpointV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEndpointV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addEndpointV2",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEndpointV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEndpointV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEndpointV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddEndpointV3 adds a third party rtmp end point to the stream it supports adding after broadcast is started resolution can be specified to send a specific adaptive resolution if an url is already added to a stream trying to add the same rtmp url will return false
*/
func (a *Client) AddEndpointV3(params *AddEndpointV3Params, opts ...ClientOption) (*AddEndpointV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEndpointV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addEndpointV3",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/rtmp-endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEndpointV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEndpointV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEndpointV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddStreamToTheRoom adds the specified stream with stream Id to the room
*/
func (a *Client) AddStreamToTheRoom(params *AddStreamToTheRoomParams, opts ...ClientOption) (*AddStreamToTheRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStreamToTheRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addStreamToTheRoom",
		Method:             "PUT",
		PathPattern:        "/v2/broadcasts/conference-rooms/{room_id}/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddStreamToTheRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStreamToTheRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStreamToTheRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddSubTrack adds a subtrack to a main track broadcast
*/
func (a *Client) AddSubTrack(params *AddSubTrackParams, opts ...ClientOption) (*AddSubTrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSubTrackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSubTrack",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/subtrack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSubTrackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSubTrackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSubTrack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddSubscriber adds subscriber to the requested stream
*/
func (a *Client) AddSubscriber(params *AddSubscriberParams, opts ...ClientOption) (*AddSubscriberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSubscriberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSubscriber",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSubscriberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSubscriberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSubscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBroadcast creates a broadcast IP camera or stream source and returns the full broadcast object with rtmp address and other information the different between broadcast and IP camera or stream source is that broadcast is ingested by ant media server IP camera or stream source is pulled by ant media server
*/
func (a *Client) CreateBroadcast(params *CreateBroadcastParams, opts ...ClientOption) (*CreateBroadcastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBroadcastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBroadcast",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBroadcastReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBroadcastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBroadcast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateConferenceRoomV2 creates a conference room with the parameters the room name is key so if this is called with the same room name then new room is overwritten to old one
*/
func (a *Client) CreateConferenceRoomV2(params *CreateConferenceRoomV2Params, opts ...ClientOption) (*CreateConferenceRoomV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConferenceRoomV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createConferenceRoomV2",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/conference-rooms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConferenceRoomV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConferenceRoomV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createConferenceRoomV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBroadcast deletes broadcast from data store and stop if it s broadcasting
*/
func (a *Client) DeleteBroadcast(params *DeleteBroadcastParams, opts ...ClientOption) (*DeleteBroadcastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBroadcastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBroadcast",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBroadcastReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBroadcastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBroadcast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBroadcasts deletes multiple broadcasts from data store and stop if they are broadcasting
*/
func (a *Client) DeleteBroadcasts(params *DeleteBroadcastsParams, opts ...ClientOption) (*DeleteBroadcastsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBroadcastsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBroadcasts",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBroadcastsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBroadcastsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBroadcasts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConferenceRoomV2 deletes a conference room the room id is key so if this is called with the same room id then new room is overwritten to old one
*/
func (a *Client) DeleteConferenceRoomV2(params *DeleteConferenceRoomV2Params, opts ...ClientOption) (*DeleteConferenceRoomV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConferenceRoomV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteConferenceRoomV2",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/conference-rooms/{room_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConferenceRoomV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConferenceRoomV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteConferenceRoomV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStreamFromTheRoom deletes the specified stream correlated with stream Id in the room
*/
func (a *Client) DeleteStreamFromTheRoom(params *DeleteStreamFromTheRoomParams, opts ...ClientOption) (*DeleteStreamFromTheRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStreamFromTheRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStreamFromTheRoom",
		Method:             "PUT",
		PathPattern:        "/v2/broadcasts/conference-rooms/{room_id}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStreamFromTheRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStreamFromTheRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStreamFromTheRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSubscriber deletes specific subscriber from data store for selected stream
*/
func (a *Client) DeleteSubscriber(params *DeleteSubscriberParams, opts ...ClientOption) (*DeleteSubscriberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubscriber",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/{id}/subscribers/{sid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubscriberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSubscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EditConferenceRoom edits previously saved conference room
*/
func (a *Client) EditConferenceRoom(params *EditConferenceRoomParams, opts ...ClientOption) (*EditConferenceRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditConferenceRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editConferenceRoom",
		Method:             "PUT",
		PathPattern:        "/v2/broadcasts/conference-rooms/{room_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditConferenceRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditConferenceRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editConferenceRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableRecording sets stream specific recording setting this setting overrides general mp4 and web m muxing setting
*/
func (a *Client) EnableRecording(params *EnableRecordingParams, opts ...ClientOption) (*EnableRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableRecordingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableRecording",
		Method:             "PUT",
		PathPattern:        "/v2/broadcasts/{id}/recording/{recording-status}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableRecordingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FilterBroadcastListV2 returns filtered broadcast list according to type it s useful for getting IP camera and stream sources from the whole list if you want to use sort mechanism we recommend using mongo d b
*/
func (a *Client) FilterBroadcastListV2(params *FilterBroadcastListV2Params, opts ...ClientOption) (*FilterBroadcastListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilterBroadcastListV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "filterBroadcastListV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/filter-list/{offset}/{size}/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FilterBroadcastListV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FilterBroadcastListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for filterBroadcastListV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppLiveStatistics returns the active live streams
*/
func (a *Client) GetAppLiveStatistics(params *GetAppLiveStatisticsParams, opts ...ClientOption) (*GetAppLiveStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppLiveStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAppLiveStatistics",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/active-live-stream-count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppLiveStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppLiveStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppLiveStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBroadcast gets broadcast object
*/
func (a *Client) GetBroadcast(params *GetBroadcastParams, opts ...ClientOption) (*GetBroadcastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBroadcastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBroadcast",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBroadcastReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBroadcastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBroadcast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBroadcastList gets the broadcast list from database it returns max 50 items at a time
*/
func (a *Client) GetBroadcastList(params *GetBroadcastListParams, opts ...ClientOption) (*GetBroadcastListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBroadcastListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBroadcastList",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/list/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBroadcastListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBroadcastListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBroadcastList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBroadcastStatistics gets the broadcast live statistics total r t m p watcher count total h l s watcher count total web r t c watcher count
*/
func (a *Client) GetBroadcastStatistics(params *GetBroadcastStatisticsParams, opts ...ClientOption) (*GetBroadcastStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBroadcastStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBroadcastStatistics",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/broadcast-statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBroadcastStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBroadcastStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBroadcastStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBroadcastTotalStatistics gets the total broadcast live statistics total h l s watcher count total web r t c watcher count
*/
func (a *Client) GetBroadcastTotalStatistics(params *GetBroadcastTotalStatisticsParams, opts ...ClientOption) (*GetBroadcastTotalStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBroadcastTotalStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBroadcastTotalStatistics",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/total-broadcast-statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBroadcastTotalStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBroadcastTotalStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBroadcastTotalStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCameraErrorV2 gets IP camera error after connection failure if returns true it means there is an error if returns false there is no error

  Notes here
*/
func (a *Client) GetCameraErrorV2(params *GetCameraErrorV2Params, opts ...ClientOption) (*GetCameraErrorV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCameraErrorV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCameraErrorV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{streamId}/ip-camera-error",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCameraErrorV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCameraErrorV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCameraErrorV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConferenceRoom gets conference room object
*/
func (a *Client) GetConferenceRoom(params *GetConferenceRoomParams, opts ...ClientOption) (*GetConferenceRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConferenceRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConferenceRoom",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/conference-rooms/{roomId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConferenceRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConferenceRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConferenceRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConferenceRoomList gets the conference room list from database
*/
func (a *Client) GetConferenceRoomList(params *GetConferenceRoomListParams, opts ...ClientOption) (*GetConferenceRoomListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConferenceRoomListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConferenceRoomList",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/conference-rooms/list/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConferenceRoomListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConferenceRoomListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConferenceRoomList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDetectionListV2 gets detected objects from the stream based on offset and size
*/
func (a *Client) GetDetectionListV2(params *GetDetectionListV2Params, opts ...ClientOption) (*GetDetectionListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDetectionListV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDetectionListV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/detections/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDetectionListV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDetectionListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDetectionListV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJwtTokenV2 generates j w t token for specified stream it s not required to let the server generate j w t generally j w t tokens should be generated on the client side
*/
func (a *Client) GetJwtTokenV2(params *GetJwtTokenV2Params, opts ...ClientOption) (*GetJwtTokenV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJwtTokenV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJwtTokenV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/jwt-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJwtTokenV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJwtTokenV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJwtTokenV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectDetectedTotal gets total number of detected objects
*/
func (a *Client) GetObjectDetectedTotal(params *GetObjectDetectedTotalParams, opts ...ClientOption) (*GetObjectDetectedTotalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectDetectedTotalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getObjectDetectedTotal",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/detections/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetObjectDetectedTotalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectDetectedTotalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getObjectDetectedTotal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRTMPToWebRTCStats gets r t m p to web r t c path stats in general
*/
func (a *Client) GetRTMPToWebRTCStats(params *GetRTMPToWebRTCStatsParams, opts ...ClientOption) (*GetRTMPToWebRTCStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRTMPToWebRTCStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRTMPToWebRTCStats",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/rtmp-to-webrtc-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRTMPToWebRTCStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRTMPToWebRTCStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRTMPToWebRTCStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoomInfo returns the streams ids in the room
*/
func (a *Client) GetRoomInfo(params *GetRoomInfoParams, opts ...ClientOption) (*GetRoomInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoomInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRoomInfo",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/conference-rooms/{room_id}/room-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoomInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoomInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoomInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStreamInfo returns the stream info width height bitrates and video codec of the stream
*/
func (a *Client) GetStreamInfo(params *GetStreamInfoParams, opts ...ClientOption) (*GetStreamInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStreamInfo",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/stream-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStreamInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStreamInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStreamInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTokenV2 generates random one time token for specified stream
*/
func (a *Client) GetTokenV2(params *GetTokenV2Params, opts ...ClientOption) (*GetTokenV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTokenV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokenV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTokenV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTotalBroadcastNumberV2 gets the number of broadcasts depending on the searched items
*/
func (a *Client) GetTotalBroadcastNumberV2(params *GetTotalBroadcastNumberV2Params, opts ...ClientOption) (*GetTotalBroadcastNumberV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalBroadcastNumberV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTotalBroadcastNumberV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/count/{search}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalBroadcastNumberV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTotalBroadcastNumberV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTotalBroadcastNumberV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWebRTCClientStatsListV2 gets web r t c client statistics such as audio bitrate video bitrate target bitrate video sent period etc
*/
func (a *Client) GetWebRTCClientStatsListV2(params *GetWebRTCClientStatsListV2Params, opts ...ClientOption) (*GetWebRTCClientStatsListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebRTCClientStatsListV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebRTCClientStatsListV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{stream_id}/webrtc-client-stats/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebRTCClientStatsListV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebRTCClientStatsListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebRTCClientStatsListV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWebRTCLowLevelReceiveStats gets web r t c low level receive stats in general
*/
func (a *Client) GetWebRTCLowLevelReceiveStats(params *GetWebRTCLowLevelReceiveStatsParams, opts ...ClientOption) (*GetWebRTCLowLevelReceiveStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebRTCLowLevelReceiveStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebRTCLowLevelReceiveStats",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/webrtc-receive-low-level-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebRTCLowLevelReceiveStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebRTCLowLevelReceiveStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebRTCLowLevelReceiveStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWebRTCLowLevelSendStats gets web r t c low level send stats in general
*/
func (a *Client) GetWebRTCLowLevelSendStats(params *GetWebRTCLowLevelSendStatsParams, opts ...ClientOption) (*GetWebRTCLowLevelSendStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebRTCLowLevelSendStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebRTCLowLevelSendStats",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/webrtc-send-low-level-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebRTCLowLevelSendStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebRTCLowLevelSendStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebRTCLowLevelSendStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWebRTCViewerList get web r t c viewer list API
*/
func (a *Client) GetWebRTCViewerList(params *GetWebRTCViewerListParams, opts ...ClientOption) (*GetWebRTCViewerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebRTCViewerListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebRTCViewerList",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/webrtc-viewers/list/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebRTCViewerListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebRTCViewerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebRTCViewerList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportLiveStreams2StalkerV2 imports live streams to stalker portal
*/
func (a *Client) ImportLiveStreams2StalkerV2(params *ImportLiveStreams2StalkerV2Params, opts ...ClientOption) (*ImportLiveStreams2StalkerV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportLiveStreams2StalkerV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "importLiveStreams2StalkerV2",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/import-to-stalker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportLiveStreams2StalkerV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportLiveStreams2StalkerV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importLiveStreams2StalkerV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSubscriberStatsV2 gets the all subscriber statistics of the requested stream
*/
func (a *Client) ListSubscriberStatsV2(params *ListSubscriberStatsV2Params, opts ...ClientOption) (*ListSubscriberStatsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSubscriberStatsV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSubscriberStatsV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/subscriber-stats/list/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSubscriberStatsV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSubscriberStatsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSubscriberStatsV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSubscriberV2 gets the all subscribers of the requested stream
*/
func (a *Client) ListSubscriberV2(params *ListSubscriberV2Params, opts ...ClientOption) (*ListSubscriberV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSubscriberV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSubscriberV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/subscribers/list/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSubscriberV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSubscriberV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSubscriberV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTokensV2 gets the all tokens of requested stream
*/
func (a *Client) ListTokensV2(params *ListTokensV2Params, opts ...ClientOption) (*ListTokensV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTokensV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTokensV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/{id}/tokens/list/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTokensV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTokensV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTokensV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveIPCamera moves IP camera it support continuous relative and absolute move by default it s relative move movement parameters should be given according to movement type generally here are the values for absolute move value x and value y is between 1 0f and 1 0f zooom value is between 0 0f and 1 0f for relative move value x value y and zoom value is between 1 0f and 1 0f for continous move value x value y and zoom value is between 1 0f and 1 0f
*/
func (a *Client) MoveIPCamera(params *MoveIPCameraParams, opts ...ClientOption) (*MoveIPCameraOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveIPCameraParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveIPCamera",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/ip-camera/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveIPCameraReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveIPCameraOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveIPCamera: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveEndpoint remove endpoint API
*/
func (a *Client) RemoveEndpoint(params *RemoveEndpointParams, opts ...ClientOption) (*RemoveEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveEndpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeEndpoint",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/{id}/endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveEndpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveEndpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveEndpointV2 removes third pary rtmp end point from the stream for the stream that is broadcasting it will stop immediately
*/
func (a *Client) RemoveEndpointV2(params *RemoveEndpointV2Params, opts ...ClientOption) (*RemoveEndpointV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveEndpointV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeEndpointV2",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/{id}/rtmp-endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveEndpointV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveEndpointV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeEndpointV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeSubscribers removes all subscriber related with the requested stream
*/
func (a *Client) RevokeSubscribers(params *RevokeSubscribersParams, opts ...ClientOption) (*RevokeSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeSubscribersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeSubscribers",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/{id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeSubscribersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeSubscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeTokensV2 removes all tokens related with requested stream
*/
func (a *Client) RevokeTokensV2(params *RevokeTokensV2Params, opts ...ClientOption) (*RevokeTokensV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeTokensV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeTokensV2",
		Method:             "DELETE",
		PathPattern:        "/v2/broadcasts/{id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeTokensV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeTokensV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeTokensV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchOnvifDevicesV2 gets discovered o n v i f IP cameras this service perform a discovery inside of internal network and get automatically o n v i f enabled camera information

  Notes here
*/
func (a *Client) SearchOnvifDevicesV2(params *SearchOnvifDevicesV2Params, opts ...ClientOption) (*SearchOnvifDevicesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchOnvifDevicesV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchOnvifDevicesV2",
		Method:             "GET",
		PathPattern:        "/v2/broadcasts/onvif-devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchOnvifDevicesV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOnvifDevicesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchOnvifDevicesV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendMessage sends stream participants a message through data channel in a web r t c stream
*/
func (a *Client) SendMessage(params *SendMessageParams, opts ...ClientOption) (*SendMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendMessage",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartStreamSourceV2 starts streaming sources IP cameras stream sources play lists
*/
func (a *Client) StartStreamSourceV2(params *StartStreamSourceV2Params, opts ...ClientOption) (*StartStreamSourceV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartStreamSourceV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "startStreamSourceV2",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartStreamSourceV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartStreamSourceV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startStreamSourceV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopMove stops move for IP camera
*/
func (a *Client) StopMove(params *StopMoveParams, opts ...ClientOption) (*StopMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopMoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopMove",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/ip-camera/stop-move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopMoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopMoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopMove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopPlaying stops player with a specified id
*/
func (a *Client) StopPlaying(params *StopPlayingParams, opts ...ClientOption) (*StopPlayingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPlayingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopPlaying",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/webrtc-viewers/{webrtc-viewer-id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopPlayingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPlayingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopPlaying: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopStreamingV2 stops streaming for the active stream it both stops ingested r t m p web r t c or pulled stream sources IP cameras and stream sources
*/
func (a *Client) StopStreamingV2(params *StopStreamingV2Params, opts ...ClientOption) (*StopStreamingV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopStreamingV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopStreamingV2",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopStreamingV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopStreamingV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopStreamingV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBroadcast updates the broadcast objects fields if it s not null the updated fields are as follows name description user name password IP address stream Url of the broadcast it also updates the social endpoints
*/
func (a *Client) UpdateBroadcast(params *UpdateBroadcastParams, opts ...ClientOption) (*UpdateBroadcastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBroadcastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBroadcast",
		Method:             "PUT",
		PathPattern:        "/v2/broadcasts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBroadcastReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBroadcastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBroadcast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateTokenV2 performs validation of token for requested stream if validated success field is true not validated success field false
*/
func (a *Client) ValidateTokenV2(params *ValidateTokenV2Params, opts ...ClientOption) (*ValidateTokenV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateTokenV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateTokenV2",
		Method:             "POST",
		PathPattern:        "/v2/broadcasts/validate-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateTokenV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateTokenV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateTokenV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
