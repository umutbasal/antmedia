// Code generated by go-swagger; DO NOT EDIT.

package broadcast_rest_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"antmedia/models"
)

// NewAddEndpointV3Params creates a new AddEndpointV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddEndpointV3Params() *AddEndpointV3Params {
	return &AddEndpointV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddEndpointV3ParamsWithTimeout creates a new AddEndpointV3Params object
// with the ability to set a timeout on a request.
func NewAddEndpointV3ParamsWithTimeout(timeout time.Duration) *AddEndpointV3Params {
	return &AddEndpointV3Params{
		timeout: timeout,
	}
}

// NewAddEndpointV3ParamsWithContext creates a new AddEndpointV3Params object
// with the ability to set a context for a request.
func NewAddEndpointV3ParamsWithContext(ctx context.Context) *AddEndpointV3Params {
	return &AddEndpointV3Params{
		Context: ctx,
	}
}

// NewAddEndpointV3ParamsWithHTTPClient creates a new AddEndpointV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewAddEndpointV3ParamsWithHTTPClient(client *http.Client) *AddEndpointV3Params {
	return &AddEndpointV3Params{
		HTTPClient: client,
	}
}

/* AddEndpointV3Params contains all the parameters to send to the API endpoint
   for the add endpoint v3 operation.

   Typically these are written to a http.Request.
*/
type AddEndpointV3Params struct {

	/* Body.

	   RTMP url of the endpoint that stream will be republished. If required, please encode the URL
	*/
	Body *models.Endpoint

	/* ID.

	   Broadcast id
	*/
	ID string

	/* ResolutionHeight.

	   Resolution height of the broadcast that is wanted to send to the RTMP endpoint.

	   Format: int32
	*/
	ResolutionHeight *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add endpoint v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddEndpointV3Params) WithDefaults() *AddEndpointV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add endpoint v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddEndpointV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add endpoint v3 params
func (o *AddEndpointV3Params) WithTimeout(timeout time.Duration) *AddEndpointV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add endpoint v3 params
func (o *AddEndpointV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add endpoint v3 params
func (o *AddEndpointV3Params) WithContext(ctx context.Context) *AddEndpointV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add endpoint v3 params
func (o *AddEndpointV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add endpoint v3 params
func (o *AddEndpointV3Params) WithHTTPClient(client *http.Client) *AddEndpointV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add endpoint v3 params
func (o *AddEndpointV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the add endpoint v3 params
func (o *AddEndpointV3Params) WithBody(body *models.Endpoint) *AddEndpointV3Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the add endpoint v3 params
func (o *AddEndpointV3Params) SetBody(body *models.Endpoint) {
	o.Body = body
}

// WithID adds the id to the add endpoint v3 params
func (o *AddEndpointV3Params) WithID(id string) *AddEndpointV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the add endpoint v3 params
func (o *AddEndpointV3Params) SetID(id string) {
	o.ID = id
}

// WithResolutionHeight adds the resolutionHeight to the add endpoint v3 params
func (o *AddEndpointV3Params) WithResolutionHeight(resolutionHeight *int32) *AddEndpointV3Params {
	o.SetResolutionHeight(resolutionHeight)
	return o
}

// SetResolutionHeight adds the resolutionHeight to the add endpoint v3 params
func (o *AddEndpointV3Params) SetResolutionHeight(resolutionHeight *int32) {
	o.ResolutionHeight = resolutionHeight
}

// WriteToRequest writes these params to a swagger request
func (o *AddEndpointV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.ResolutionHeight != nil {

		// query param resolutionHeight
		var qrResolutionHeight int32

		if o.ResolutionHeight != nil {
			qrResolutionHeight = *o.ResolutionHeight
		}
		qResolutionHeight := swag.FormatInt32(qrResolutionHeight)
		if qResolutionHeight != "" {

			if err := r.SetQueryParam("resolutionHeight", qResolutionHeight); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
