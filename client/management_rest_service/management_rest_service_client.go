// Code generated by go-swagger;

package management_rest_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new management rest service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for management rest service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PutV2Users(params *PutV2UsersParams, opts ...ClientOption) (*PutV2UsersOK, error)

	AddInitialUser(params *AddInitialUserParams, opts ...ClientOption) (*AddInitialUserOK, error)

	AddUser(params *AddUserParams, opts ...ClientOption) (*AddUserOK, error)

	AuthenticateUser(params *AuthenticateUserParams, opts ...ClientOption) (*AuthenticateUserOK, error)

	ChangeServerSettings(params *ChangeServerSettingsParams, opts ...ClientOption) (*ChangeServerSettingsOK, error)

	ChangeSettings(params *ChangeSettingsParams, opts ...ClientOption) (*ChangeSettingsOK, error)

	ChangeUserPassword(params *ChangeUserPasswordParams, opts ...ClientOption) (*ChangeUserPasswordOK, error)

	CreateApplication(params *CreateApplicationParams, opts ...ClientOption) (*CreateApplicationOK, error)

	DeleteApplication(params *DeleteApplicationParams, opts ...ClientOption) (*DeleteApplicationOK, error)

	DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error)

	GetAppLiveStreams(params *GetAppLiveStreamsParams, opts ...ClientOption) (*GetAppLiveStreamsOK, error)

	GetApplicationInfo(params *GetApplicationInfoParams, opts ...ClientOption) (*GetApplicationInfoOK, error)

	GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error)

	GetBlockedStatus(params *GetBlockedStatusParams, opts ...ClientOption) (*GetBlockedStatusOK, error)

	GetCPUInfo(params *GetCPUInfoParams, opts ...ClientOption) (*GetCPUInfoOK, error)

	GetFileSystemInfo(params *GetFileSystemInfoParams, opts ...ClientOption) (*GetFileSystemInfoOK, error)

	GetGPUInfo(params *GetGPUInfoParams, opts ...ClientOption) (*GetGPUInfoOK, error)

	GetHeapDump(params *GetHeapDumpParams, opts ...ClientOption) (*GetHeapDumpOK, error)

	GetJVMMemoryInfo(params *GetJVMMemoryInfoParams, opts ...ClientOption) (*GetJVMMemoryInfoOK, error)

	GetLicenceStatus(params *GetLicenceStatusParams, opts ...ClientOption) (*GetLicenceStatusOK, error)

	GetLiveClientsSize(params *GetLiveClientsSizeParams, opts ...ClientOption) (*GetLiveClientsSizeOK, error)

	GetLogFile(params *GetLogFileParams, opts ...ClientOption) (*GetLogFileOK, error)

	GetServerSettings(params *GetServerSettingsParams, opts ...ClientOption) (*GetServerSettingsOK, error)

	GetServerTime(params *GetServerTimeParams, opts ...ClientOption) (*GetServerTimeOK, error)

	GetSettings(params *GetSettingsParams, opts ...ClientOption) (*GetSettingsOK, error)

	GetSystemInfo(params *GetSystemInfoParams, opts ...ClientOption) (*GetSystemInfoOK, error)

	GetSystemMemoryInfo(params *GetSystemMemoryInfoParams, opts ...ClientOption) (*GetSystemMemoryInfoOK, error)

	GetSystemResourcesInfo(params *GetSystemResourcesInfoParams, opts ...ClientOption) (*GetSystemResourcesInfoOK, error)

	GetThreadDumpJSON(params *GetThreadDumpJSONParams, opts ...ClientOption) (*GetThreadDumpJSONOK, error)

	GetThreadsInfo(params *GetThreadsInfoParams, opts ...ClientOption) (*GetThreadsInfoOK, error)

	GetUserList(params *GetUserListParams, opts ...ClientOption) (*GetUserListOK, error)

	GetVersion(params *GetVersionParams, opts ...ClientOption) (*GetVersionOK, error)

	IsAdmin(params *IsAdminParams, opts ...ClientOption) (*IsAdminOK, error)

	IsAuthenticatedRest(params *IsAuthenticatedRestParams, opts ...ClientOption) (*IsAuthenticatedRestOK, error)

	IsEnterpriseEdition(params *IsEnterpriseEditionParams, opts ...ClientOption) (*IsEnterpriseEditionOK, error)

	IsFirstLogin(params *IsFirstLoginParams, opts ...ClientOption) (*IsFirstLoginOK, error)

	IsInClusterMode(params *IsInClusterModeParams, opts ...ClientOption) (*IsInClusterModeOK, error)

	IsShutdownProperly(params *IsShutdownProperlyParams, opts ...ClientOption) (*IsShutdownProperlyOK, error)

	ResetBroadcast(params *ResetBroadcastParams, opts ...ClientOption) (*ResetBroadcastOK, error)

	SetShutdownStatus(params *SetShutdownStatusParams, opts ...ClientOption) (*SetShutdownStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PutV2Users edits the user in the server management panel s user list it can change password or user type admin read only
*/
func (a *Client) PutV2Users(params *PutV2UsersParams, opts ...ClientOption) (*PutV2UsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV2UsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutV2Users",
		Method:             "PUT",
		PathPattern:        "/v2/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV2UsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV2UsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV2Users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddInitialUser creates initial user this is a one time scenario when initial user creation required and shouldn t be used otherwise user object is required and can t be null
*/
func (a *Client) AddInitialUser(params *AddInitialUserParams, opts ...ClientOption) (*AddInitialUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddInitialUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addInitialUser",
		Method:             "POST",
		PathPattern:        "/v2/users/initial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddInitialUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddInitialUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addInitialUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddUser creates a new user if user object is null or if user is not authenticated new user won t be created
*/
func (a *Client) AddUser(params *AddUserParams, opts ...ClientOption) (*AddUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUser",
		Method:             "POST",
		PathPattern:        "/v2/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthenticateUser authenticates user with given username and password requires user object to authenticate
*/
func (a *Client) AuthenticateUser(params *AuthenticateUserParams, opts ...ClientOption) (*AuthenticateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authenticateUser",
		Method:             "POST",
		PathPattern:        "/v2/users/authenticate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authenticateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeServerSettings changes server settings sets server name license key market build status and node group
*/
func (a *Client) ChangeServerSettings(params *ChangeServerSettingsParams, opts ...ClientOption) (*ChangeServerSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeServerSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeServerSettings",
		Method:             "POST",
		PathPattern:        "/v2/server-settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeServerSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeServerSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeServerSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeSettings changes the application settings with the given settings null fields will be set to default values
*/
func (a *Client) ChangeSettings(params *ChangeSettingsParams, opts ...ClientOption) (*ChangeSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeSettings",
		Method:             "POST",
		PathPattern:        "/v2/applications/settings/{appname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeUserPassword changes the given user s password
*/
func (a *Client) ChangeUserPassword(params *ChangeUserPasswordParams, opts ...ClientOption) (*ChangeUserPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeUserPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeUserPassword",
		Method:             "POST",
		PathPattern:        "/v2/users/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeUserPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeUserPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeUserPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateApplication creates a new application with given name it supports uploading custom w a r files
*/
func (a *Client) CreateApplication(params *CreateApplicationParams, opts ...ClientOption) (*CreateApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createApplication",
		Method:             "PUT",
		PathPattern:        "/v2/applications/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApplication deletes application with the given name
*/
func (a *Client) DeleteApplication(params *DeleteApplicationParams, opts ...ClientOption) (*DeleteApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteApplication",
		Method:             "DELETE",
		PathPattern:        "/v2/applications/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser deletes the user from the server management panel s user list
*/
func (a *Client) DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/v2/users/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppLiveStreams returns live streams in the specified application retrieves broadcast names and the consumer size
*/
func (a *Client) GetAppLiveStreams(params *GetAppLiveStreamsParams, opts ...ClientOption) (*GetAppLiveStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppLiveStreamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAppLiveStreams",
		Method:             "GET",
		PathPattern:        "/v2/applications/live-streams/{appname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppLiveStreamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppLiveStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppLiveStreams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationInfo gets application info application info includes live stream count vod count and application name
*/
func (a *Client) GetApplicationInfo(params *GetApplicationInfoParams, opts ...ClientOption) (*GetApplicationInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationInfo",
		Method:             "GET",
		PathPattern:        "/v2/applications-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplications gets the applications in the server returns the name of the applications in JSON format
*/
func (a *Client) GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplications",
		Method:             "GET",
		PathPattern:        "/v2/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockedStatus returns if user is blocked user is blocked for a specific time if there are login attempts
*/
func (a *Client) GetBlockedStatus(params *GetBlockedStatusParams, opts ...ClientOption) (*GetBlockedStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockedStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBlockedStatus",
		Method:             "GET",
		PathPattern:        "/v2/users/{usermail}/blocked",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlockedStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockedStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlockedStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCPUInfo returns system cpu load process cpu load and process cpu time
*/
func (a *Client) GetCPUInfo(params *GetCPUInfoParams, opts ...ClientOption) (*GetCPUInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCPUInfo",
		Method:             "GET",
		PathPattern:        "/v2/cpu-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPUInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCPUInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileSystemInfo gets system file status returns usable space total space available space and in use space
*/
func (a *Client) GetFileSystemInfo(params *GetFileSystemInfoParams, opts ...ClientOption) (*GetFileSystemInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileSystemInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileSystemInfo",
		Method:             "GET",
		PathPattern:        "/v2/file-system-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileSystemInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileSystemInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileSystemInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGPUInfo gets g p u information returns whether you have g p u or not if yes information of the gpu and the number of total gpus
*/
func (a *Client) GetGPUInfo(params *GetGPUInfoParams, opts ...ClientOption) (*GetGPUInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGPUInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGPUInfo",
		Method:             "GET",
		PathPattern:        "/v2/gpu-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGPUInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGPUInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGPUInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHeapDump returns heap dump
*/
func (a *Client) GetHeapDump(params *GetHeapDumpParams, opts ...ClientOption) (*GetHeapDumpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHeapDumpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHeapDump",
		Method:             "GET",
		PathPattern:        "/v2/heap-dump",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHeapDumpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHeapDumpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHeapDump: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJVMMemoryInfo returns j VM memory informations max total free in use and available processors are returned
*/
func (a *Client) GetJVMMemoryInfo(params *GetJVMMemoryInfoParams, opts ...ClientOption) (*GetJVMMemoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJVMMemoryInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJVMMemoryInfo",
		Method:             "GET",
		PathPattern:        "/v2/jvm-memory-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJVMMemoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJVMMemoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJVMMemoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicenceStatus returns license status includes license ID status owner start date end date type and license count
*/
func (a *Client) GetLicenceStatus(params *GetLicenceStatusParams, opts ...ClientOption) (*GetLicenceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLicenceStatus",
		Method:             "GET",
		PathPattern:        "/v2/licence-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLicenceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicenceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLiveClientsSize returns total number of live streams and total number of connections
*/
func (a *Client) GetLiveClientsSize(params *GetLiveClientsSizeParams, opts ...ClientOption) (*GetLiveClientsSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveClientsSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLiveClientsSize",
		Method:             "GET",
		PathPattern:        "/v2/live-clients-size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLiveClientsSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLiveClientsSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLiveClientsSize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLogFile gets log file char size of the log offset or log type can be specified
*/
func (a *Client) GetLogFile(params *GetLogFileParams, opts ...ClientOption) (*GetLogFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLogFile",
		Method:             "GET",
		PathPattern:        "/v2/log-file/{offsetSize}/{charSize}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLogFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerSettings returns the server settings from log level to measurement period of cpu license key of the server host address and many more settings are returned at once
*/
func (a *Client) GetServerSettings(params *GetServerSettingsParams, opts ...ClientOption) (*GetServerSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerSettings",
		Method:             "GET",
		PathPattern:        "/v2/server-settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerTime gets server time returns server uptime and start time in milliseconds in JSON
*/
func (a *Client) GetServerTime(params *GetServerTimeParams, opts ...ClientOption) (*GetServerTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerTime",
		Method:             "GET",
		PathPattern:        "/v2/server-time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSettings returns the specified application settings
*/
func (a *Client) GetSettings(params *GetSettingsParams, opts ...ClientOption) (*GetSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSettings",
		Method:             "GET",
		PathPattern:        "/v2/applications/settings/{appname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemInfo returns system information which includes many information such as j VM memory o s information available file space physical memory informations in detail
*/
func (a *Client) GetSystemInfo(params *GetSystemInfoParams, opts ...ClientOption) (*GetSystemInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemInfo",
		Method:             "GET",
		PathPattern:        "/v2/system-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemMemoryInfo gets system memory status returns virtual total physical available physical currently in use total swap space available swap space and in use swap space
*/
func (a *Client) GetSystemMemoryInfo(params *GetSystemMemoryInfoParams, opts ...ClientOption) (*GetSystemMemoryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemMemoryInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemMemoryInfo",
		Method:             "GET",
		PathPattern:        "/v2/system-memory-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemMemoryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemMemoryInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemMemoryInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemResourcesInfo gets system resource information returns number of total live streams cpu usage system information jvm information file system information license status gpu status etc basically returns most of the information in one package
*/
func (a *Client) GetSystemResourcesInfo(params *GetSystemResourcesInfoParams, opts ...ClientOption) (*GetSystemResourcesInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemResourcesInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemResourcesInfo",
		Method:             "GET",
		PathPattern:        "/v2/system-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemResourcesInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemResourcesInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemResourcesInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetThreadDumpJSON gets thread dump in json format includes very detailed information such as thread name thread id blocked time of thread thread state and many more information are returned
*/
func (a *Client) GetThreadDumpJSON(params *GetThreadDumpJSONParams, opts ...ClientOption) (*GetThreadDumpJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreadDumpJSONParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getThreadDumpJSON",
		Method:             "GET",
		PathPattern:        "/v2/thread-dump",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetThreadDumpJSONReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreadDumpJSONOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getThreadDumpJSON: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetThreadsInfo returns processor s thread information includes number of dead locked threads thread count and thread peek count
*/
func (a *Client) GetThreadsInfo(params *GetThreadsInfoParams, opts ...ClientOption) (*GetThreadsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreadsInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getThreadsInfo",
		Method:             "GET",
		PathPattern:        "/v2/threads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetThreadsInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreadsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getThreadsInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserList returns user list in the server management panel
*/
func (a *Client) GetUserList(params *GetUserListParams, opts ...ClientOption) (*GetUserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserList",
		Method:             "GET",
		PathPattern:        "/v2/user-list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVersion returns the version of ant media server
*/
func (a *Client) GetVersion(params *GetVersionParams, opts ...ClientOption) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersion",
		Method:             "GET",
		PathPattern:        "/v2/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsAdmin returns whether current user is admin or not if user is admin it can call p o s t p u t d e l e t e methods
*/
func (a *Client) IsAdmin(params *IsAdminParams, opts ...ClientOption) (*IsAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isAdmin",
		Method:             "GET",
		PathPattern:        "/v2/admin-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsAuthenticatedRest returns true if user is authenticated to call rest api operations
*/
func (a *Client) IsAuthenticatedRest(params *IsAuthenticatedRestParams, opts ...ClientOption) (*IsAuthenticatedRestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsAuthenticatedRestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isAuthenticatedRest",
		Method:             "GET",
		PathPattern:        "/v2/authentication-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsAuthenticatedRestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsAuthenticatedRestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isAuthenticatedRest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsEnterpriseEdition returns true if the server is enterprise edition
*/
func (a *Client) IsEnterpriseEdition(params *IsEnterpriseEditionParams, opts ...ClientOption) (*IsEnterpriseEditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsEnterpriseEditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isEnterpriseEdition",
		Method:             "GET",
		PathPattern:        "/v2/enterprise-edition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsEnterpriseEditionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsEnterpriseEditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isEnterpriseEdition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsFirstLogin checks first login status if server being logged in first time it returns true otherwise false
*/
func (a *Client) IsFirstLogin(params *IsFirstLoginParams, opts ...ClientOption) (*IsFirstLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsFirstLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isFirstLogin",
		Method:             "GET",
		PathPattern:        "/v2/first-login-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsFirstLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsFirstLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isFirstLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsInClusterMode returns the server mode if it is in the cluster mode result will be true
*/
func (a *Client) IsInClusterMode(params *IsInClusterModeParams, opts ...ClientOption) (*IsInClusterModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsInClusterModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isInClusterMode",
		Method:             "GET",
		PathPattern:        "/v2/cluster-mode-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsInClusterModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsInClusterModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isInClusterMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsShutdownProperly checks whether application or applications have shutdown properly or not
*/
func (a *Client) IsShutdownProperly(params *IsShutdownProperlyParams, opts ...ClientOption) (*IsShutdownProperlyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsShutdownProperlyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isShutdownProperly",
		Method:             "GET",
		PathPattern:        "/v2/shutdown-proper-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsShutdownProperlyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsShutdownProperlyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isShutdownProperly: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetBroadcast resets the viewer counts and broadcasts statuses in the db this can be used after server crashes to recover db it s not intended to use to ignore the crash
*/
func (a *Client) ResetBroadcast(params *ResetBroadcastParams, opts ...ClientOption) (*ResetBroadcastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetBroadcastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetBroadcast",
		Method:             "POST",
		PathPattern:        "/v2/applications/{appname}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResetBroadcastReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetBroadcastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetBroadcast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetShutdownStatus sets application or applications shutdown properly to true
*/
func (a *Client) SetShutdownStatus(params *SetShutdownStatusParams, opts ...ClientOption) (*SetShutdownStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetShutdownStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setShutdownStatus",
		Method:             "GET",
		PathPattern:        "/v2/shutdown-properly",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetShutdownStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetShutdownStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setShutdownStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
