// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetClusterDeleteNodeID(params *GetClusterDeleteNodeIDParams, opts ...ClientOption) (*GetClusterDeleteNodeIDOK, error)

	ChangeLogSettings(params *ChangeLogSettingsParams, opts ...ClientOption) (*ChangeLogSettingsOK, error)

	DeleteNode(params *DeleteNodeParams, opts ...ClientOption) (*DeleteNodeOK, error)

	DeleteVoDStream(params *DeleteVoDStreamParams, opts ...ClientOption) (*DeleteVoDStreamOK, error)

	EditUser(params *EditUserParams, opts ...ClientOption) (*EditUserOK, error)

	GetNodeCount(params *GetNodeCountParams, opts ...ClientOption) (*GetNodeCountOK, error)

	GetNodeList(params *GetNodeListParams, opts ...ClientOption) (*GetNodeListOK, error)

	GetShutdownStatus(params *GetShutdownStatusParams, opts ...ClientOption) (*GetShutdownStatusOK, error)

	GetThreadDump(params *GetThreadDumpParams, opts ...ClientOption) (*GetThreadDumpOK, error)

	SendSupportRequest(params *SendSupportRequestParams, opts ...ClientOption) (*SendSupportRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetClusterDeleteNodeID get cluster delete node ID API
*/
func (a *Client) GetClusterDeleteNodeID(params *GetClusterDeleteNodeIDParams, opts ...ClientOption) (*GetClusterDeleteNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterDeleteNodeIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterDeleteNodeID",
		Method:             "GET",
		PathPattern:        "/cluster/deleteNode/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterDeleteNodeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterDeleteNodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterDeleteNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeLogSettings change log settings API
*/
func (a *Client) ChangeLogSettings(params *ChangeLogSettingsParams, opts ...ClientOption) (*ChangeLogSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeLogSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeLogSettings",
		Method:             "GET",
		PathPattern:        "/changeLogLevel/{level}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeLogSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeLogSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeLogSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNode delete node API
*/
func (a *Client) DeleteNode(params *DeleteNodeParams, opts ...ClientOption) (*DeleteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNode",
		Method:             "DELETE",
		PathPattern:        "/v2/cluster/node/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVoDStream delete vo d stream API
*/
func (a *Client) DeleteVoDStream(params *DeleteVoDStreamParams, opts ...ClientOption) (*DeleteVoDStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVoDStreamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVoDStream",
		Method:             "POST",
		PathPattern:        "/deleteVoDStream/{appname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVoDStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVoDStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVoDStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EditUser edit user API
*/
func (a *Client) EditUser(params *EditUserParams, opts ...ClientOption) (*EditUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editUser",
		Method:             "POST",
		PathPattern:        "/editUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeCount get node count API
*/
func (a *Client) GetNodeCount(params *GetNodeCountParams, opts ...ClientOption) (*GetNodeCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNodeCount",
		Method:             "GET",
		PathPattern:        "/v2/cluster/node-count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeList get node list API
*/
func (a *Client) GetNodeList(params *GetNodeListParams, opts ...ClientOption) (*GetNodeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNodeList",
		Method:             "GET",
		PathPattern:        "/v2/cluster/nodes/{offset}/{size}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetShutdownStatus get shutdown status API
*/
func (a *Client) GetShutdownStatus(params *GetShutdownStatusParams, opts ...ClientOption) (*GetShutdownStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShutdownStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShutdownStatus",
		Method:             "GET",
		PathPattern:        "/isShutdownProperly",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetShutdownStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShutdownStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShutdownStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetThreadDump get thread dump API
*/
func (a *Client) GetThreadDump(params *GetThreadDumpParams, opts ...ClientOption) (*GetThreadDumpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreadDumpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getThreadDump",
		Method:             "GET",
		PathPattern:        "/thread-dump-raw",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetThreadDumpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreadDumpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getThreadDump: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendSupportRequest send support request API
*/
func (a *Client) SendSupportRequest(params *SendSupportRequestParams, opts ...ClientOption) (*SendSupportRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSupportRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendSupportRequest",
		Method:             "POST",
		PathPattern:        "/v2/support/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendSupportRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendSupportRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendSupportRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
