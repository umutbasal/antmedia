// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/management_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationManagementRestServiceGetLogFileCmd returns a cmd to handle operation getLogFile
func makeOperationManagementRestServiceGetLogFileCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getLogFile",
		Short: ``,
		RunE:  runOperationManagementRestServiceGetLogFile,
	}

	if err := registerOperationManagementRestServiceGetLogFileParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationManagementRestServiceGetLogFile uses cmd flags to call endpoint api
func runOperationManagementRestServiceGetLogFile(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := management_rest_service.NewGetLogFileParams()
	if err, _ := retrieveOperationManagementRestServiceGetLogFileCharSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationManagementRestServiceGetLogFileLogTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationManagementRestServiceGetLogFileOffsetSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationManagementRestServiceGetLogFileResult(appCli.ManagementRestService.GetLogFile(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationManagementRestServiceGetLogFileParamFlags registers all flags needed to fill params
func registerOperationManagementRestServiceGetLogFileParamFlags(cmd *cobra.Command) error {
	if err := registerOperationManagementRestServiceGetLogFileCharSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationManagementRestServiceGetLogFileLogTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationManagementRestServiceGetLogFileOffsetSizeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationManagementRestServiceGetLogFileCharSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	charSizeDescription := `Required. Char size of the log`

	var charSizeFlagName string
	if cmdPrefix == "" {
		charSizeFlagName = "charSize"
	} else {
		charSizeFlagName = fmt.Sprintf("%v.charSize", cmdPrefix)
	}

	var charSizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(charSizeFlagName, charSizeFlagDefault, charSizeDescription)

	return nil
}
func registerOperationManagementRestServiceGetLogFileLogTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	logTypeDescription := `Required. Log type. ERROR can be used to get only error logs`

	var logTypeFlagName string
	if cmdPrefix == "" {
		logTypeFlagName = "logType"
	} else {
		logTypeFlagName = fmt.Sprintf("%v.logType", cmdPrefix)
	}

	var logTypeFlagDefault string

	_ = cmd.PersistentFlags().String(logTypeFlagName, logTypeFlagDefault, logTypeDescription)

	return nil
}
func registerOperationManagementRestServiceGetLogFileOffsetSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetSizeDescription := `Required. Offset of the retrieved log`

	var offsetSizeFlagName string
	if cmdPrefix == "" {
		offsetSizeFlagName = "offsetSize"
	} else {
		offsetSizeFlagName = fmt.Sprintf("%v.offsetSize", cmdPrefix)
	}

	var offsetSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(offsetSizeFlagName, offsetSizeFlagDefault, offsetSizeDescription)

	return nil
}

func retrieveOperationManagementRestServiceGetLogFileCharSizeFlag(m *management_rest_service.GetLogFileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("charSize") {

		var charSizeFlagName string
		if cmdPrefix == "" {
			charSizeFlagName = "charSize"
		} else {
			charSizeFlagName = fmt.Sprintf("%v.charSize", cmdPrefix)
		}

		charSizeFlagValue, err := cmd.Flags().GetInt32(charSizeFlagName)
		if err != nil {
			return err, false
		}
		m.CharSize = charSizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationManagementRestServiceGetLogFileLogTypeFlag(m *management_rest_service.GetLogFileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("logType") {

		var logTypeFlagName string
		if cmdPrefix == "" {
			logTypeFlagName = "logType"
		} else {
			logTypeFlagName = fmt.Sprintf("%v.logType", cmdPrefix)
		}

		logTypeFlagValue, err := cmd.Flags().GetString(logTypeFlagName)
		if err != nil {
			return err, false
		}
		m.LogType = logTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationManagementRestServiceGetLogFileOffsetSizeFlag(m *management_rest_service.GetLogFileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offsetSize") {

		var offsetSizeFlagName string
		if cmdPrefix == "" {
			offsetSizeFlagName = "offsetSize"
		} else {
			offsetSizeFlagName = fmt.Sprintf("%v.offsetSize", cmdPrefix)
		}

		offsetSizeFlagValue, err := cmd.Flags().GetInt64(offsetSizeFlagName)
		if err != nil {
			return err, false
		}
		m.OffsetSize = offsetSizeFlagValue

	}
	return nil, retAdded
}

// parseOperationManagementRestServiceGetLogFileResult parses request result and return the string content
func parseOperationManagementRestServiceGetLogFileResult(resp0 *management_rest_service.GetLogFileOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*management_rest_service.GetLogFileOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
