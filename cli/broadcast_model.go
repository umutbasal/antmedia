// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Broadcast

// register flags to command
func registerModelBroadcastFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBroadcastAbsoluteStartTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastAltitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastCategory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastCurrentPlayIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastEndPointList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastExpireDurationMS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastHlsViewerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastHlsViewerLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastIPAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastIs360(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastLatitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastListenerHookURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastLongitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastMainTrackStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastMetaData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastMp4Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastOriginAdress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPendingPacketSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPlannedEndDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPlannedStartDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPlayListItemList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPlayListStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPlaylistLoopEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPublicStream(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPublish(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastPublishType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastQuality(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastReceivedBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastRtmpURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastRtmpViewerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastStreamURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastSubFolder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastSubTrackStreamIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastUserAgent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastWebMEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastWebRTCViewerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastWebRTCViewerLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastZombi(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBroadcastAbsoluteStartTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	absoluteStartTimeMsDescription := `Absolute start time in milliseconds - unix timestamp. It's used for measuring the absolute latency`

	var absoluteStartTimeMsFlagName string
	if cmdPrefix == "" {
		absoluteStartTimeMsFlagName = "absoluteStartTimeMs"
	} else {
		absoluteStartTimeMsFlagName = fmt.Sprintf("%v.absoluteStartTimeMs", cmdPrefix)
	}

	var absoluteStartTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(absoluteStartTimeMsFlagName, absoluteStartTimeMsFlagDefault, absoluteStartTimeMsDescription)

	return nil
}

func registerBroadcastAltitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	altitudeDescription := `altitude of the broadcasting location`

	var altitudeFlagName string
	if cmdPrefix == "" {
		altitudeFlagName = "altitude"
	} else {
		altitudeFlagName = fmt.Sprintf("%v.altitude", cmdPrefix)
	}

	var altitudeFlagDefault string

	_ = cmd.PersistentFlags().String(altitudeFlagName, altitudeFlagDefault, altitudeDescription)

	return nil
}

func registerBroadcastBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bitrateDescription := `the received bytes / duration`

	var bitrateFlagName string
	if cmdPrefix == "" {
		bitrateFlagName = "bitrate"
	} else {
		bitrateFlagName = fmt.Sprintf("%v.bitrate", cmdPrefix)
	}

	var bitrateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bitrateFlagName, bitrateFlagDefault, bitrateDescription)

	return nil
}

func registerBroadcastCategory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	categoryDescription := `the category of the stream`

	var categoryFlagName string
	if cmdPrefix == "" {
		categoryFlagName = "category"
	} else {
		categoryFlagName = fmt.Sprintf("%v.category", cmdPrefix)
	}

	var categoryFlagDefault string

	_ = cmd.PersistentFlags().String(categoryFlagName, categoryFlagDefault, categoryDescription)

	return nil
}

func registerBroadcastCurrentPlayIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentPlayIndexDescription := `Current playing index for playlist types`

	var currentPlayIndexFlagName string
	if cmdPrefix == "" {
		currentPlayIndexFlagName = "currentPlayIndex"
	} else {
		currentPlayIndexFlagName = fmt.Sprintf("%v.currentPlayIndex", cmdPrefix)
	}

	var currentPlayIndexFlagDefault int32

	_ = cmd.PersistentFlags().Int32(currentPlayIndexFlagName, currentPlayIndexFlagDefault, currentPlayIndexDescription)

	return nil
}

func registerBroadcastDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dateDescription := `the date when record is created in milliseconds`

	var dateFlagName string
	if cmdPrefix == "" {
		dateFlagName = "date"
	} else {
		dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
	}

	var dateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dateFlagName, dateFlagDefault, dateDescription)

	return nil
}

func registerBroadcastDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `the description of the stream`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerBroadcastDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	durationDescription := `the duration of the stream in milliseconds`

	var durationFlagName string
	if cmdPrefix == "" {
		durationFlagName = "duration"
	} else {
		durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var durationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(durationFlagName, durationFlagDefault, durationDescription)

	return nil
}

func registerBroadcastEndPointList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: endPointList []*Endpoint array type is not supported by go-swagger cli yet

	return nil
}

func registerBroadcastExpireDurationMS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expireDurationMSDescription := `the expire time in milliseconds For instance if this value is 10000 then broadcast should be started in 10 seconds after it is created.If expire duration is 0, then stream will never expire`

	var expireDurationMSFlagName string
	if cmdPrefix == "" {
		expireDurationMSFlagName = "expireDurationMS"
	} else {
		expireDurationMSFlagName = fmt.Sprintf("%v.expireDurationMS", cmdPrefix)
	}

	var expireDurationMSFlagDefault int32

	_ = cmd.PersistentFlags().Int32(expireDurationMSFlagName, expireDurationMSFlagDefault, expireDurationMSDescription)

	return nil
}

func registerBroadcastHlsViewerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsViewerCountDescription := `the number of HLS viewers of the stream`

	var hlsViewerCountFlagName string
	if cmdPrefix == "" {
		hlsViewerCountFlagName = "hlsViewerCount"
	} else {
		hlsViewerCountFlagName = fmt.Sprintf("%v.hlsViewerCount", cmdPrefix)
	}

	var hlsViewerCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(hlsViewerCountFlagName, hlsViewerCountFlagDefault, hlsViewerCountDescription)

	return nil
}

func registerBroadcastHlsViewerLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsViewerLimitDescription := `Number of the allowed maximum HLS viewers for the broadcast`

	var hlsViewerLimitFlagName string
	if cmdPrefix == "" {
		hlsViewerLimitFlagName = "hlsViewerLimit"
	} else {
		hlsViewerLimitFlagName = fmt.Sprintf("%v.hlsViewerLimit", cmdPrefix)
	}

	var hlsViewerLimitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(hlsViewerLimitFlagName, hlsViewerLimitFlagDefault, hlsViewerLimitDescription)

	return nil
}

func registerBroadcastIPAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddrDescription := `the IP Address of the IP Camera or publisher`

	var ipAddrFlagName string
	if cmdPrefix == "" {
		ipAddrFlagName = "ipAddr"
	} else {
		ipAddrFlagName = fmt.Sprintf("%v.ipAddr", cmdPrefix)
	}

	var ipAddrFlagDefault string

	_ = cmd.PersistentFlags().String(ipAddrFlagName, ipAddrFlagDefault, ipAddrDescription)

	return nil
}

func registerBroadcastIs360(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	is360Description := `the identifier of whether stream is 360 or not`

	var is360FlagName string
	if cmdPrefix == "" {
		is360FlagName = "is360"
	} else {
		is360FlagName = fmt.Sprintf("%v.is360", cmdPrefix)
	}

	var is360FlagDefault bool

	_ = cmd.PersistentFlags().Bool(is360FlagName, is360FlagDefault, is360Description)

	return nil
}

func registerBroadcastLatitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latitudeDescription := `latitude of the broadcasting location`

	var latitudeFlagName string
	if cmdPrefix == "" {
		latitudeFlagName = "latitude"
	} else {
		latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
	}

	var latitudeFlagDefault string

	_ = cmd.PersistentFlags().String(latitudeFlagName, latitudeFlagDefault, latitudeDescription)

	return nil
}

func registerBroadcastListenerHookURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	listenerHookUrlDescription := `the url that will be notified when stream is published, ended and muxing finished`

	var listenerHookUrlFlagName string
	if cmdPrefix == "" {
		listenerHookUrlFlagName = "listenerHookURL"
	} else {
		listenerHookUrlFlagName = fmt.Sprintf("%v.listenerHookURL", cmdPrefix)
	}

	var listenerHookUrlFlagDefault string

	_ = cmd.PersistentFlags().String(listenerHookUrlFlagName, listenerHookUrlFlagDefault, listenerHookUrlDescription)

	return nil
}

func registerBroadcastLongitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	longitudeDescription := `longitude of the broadcasting location`

	var longitudeFlagName string
	if cmdPrefix == "" {
		longitudeFlagName = "longitude"
	} else {
		longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
	}

	var longitudeFlagDefault string

	_ = cmd.PersistentFlags().String(longitudeFlagName, longitudeFlagDefault, longitudeDescription)

	return nil
}

func registerBroadcastMainTrackStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mainTrackStreamIdDescription := `If this broadcast is a track of a WebRTC stream. This variable is Id of that stream.`

	var mainTrackStreamIdFlagName string
	if cmdPrefix == "" {
		mainTrackStreamIdFlagName = "mainTrackStreamId"
	} else {
		mainTrackStreamIdFlagName = fmt.Sprintf("%v.mainTrackStreamId", cmdPrefix)
	}

	var mainTrackStreamIdFlagDefault string

	_ = cmd.PersistentFlags().String(mainTrackStreamIdFlagName, mainTrackStreamIdFlagDefault, mainTrackStreamIdDescription)

	return nil
}

func registerBroadcastMetaData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	metaDataDescription := `Meta data filed for the custom usage`

	var metaDataFlagName string
	if cmdPrefix == "" {
		metaDataFlagName = "metaData"
	} else {
		metaDataFlagName = fmt.Sprintf("%v.metaData", cmdPrefix)
	}

	var metaDataFlagDefault string

	_ = cmd.PersistentFlags().String(metaDataFlagName, metaDataFlagDefault, metaDataDescription)

	return nil
}

func registerBroadcastMp4Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mp4EnabledDescription := `MP4 muxing whether enabled or not for the stream, 1 means enabled, -1 means disabled, 0 means no settings for the stream`

	var mp4EnabledFlagName string
	if cmdPrefix == "" {
		mp4EnabledFlagName = "mp4Enabled"
	} else {
		mp4EnabledFlagName = fmt.Sprintf("%v.mp4Enabled", cmdPrefix)
	}

	var mp4EnabledFlagDefault int32

	_ = cmd.PersistentFlags().Int32(mp4EnabledFlagName, mp4EnabledFlagDefault, mp4EnabledDescription)

	return nil
}

func registerBroadcastName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `the name of the stream`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBroadcastOriginAdress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	originAdressDescription := `the origin address server broadcasting`

	var originAdressFlagName string
	if cmdPrefix == "" {
		originAdressFlagName = "originAdress"
	} else {
		originAdressFlagName = fmt.Sprintf("%v.originAdress", cmdPrefix)
	}

	var originAdressFlagDefault string

	_ = cmd.PersistentFlags().String(originAdressFlagName, originAdressFlagDefault, originAdressDescription)

	return nil
}

func registerBroadcastPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `the password of the IP Camera`

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerBroadcastPendingPacketSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pendingPacketSizeDescription := `the number of audio and video packets that is being pending to be encoded in the queue `

	var pendingPacketSizeFlagName string
	if cmdPrefix == "" {
		pendingPacketSizeFlagName = "pendingPacketSize"
	} else {
		pendingPacketSizeFlagName = fmt.Sprintf("%v.pendingPacketSize", cmdPrefix)
	}

	var pendingPacketSizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(pendingPacketSizeFlagName, pendingPacketSizeFlagDefault, pendingPacketSizeDescription)

	return nil
}

func registerBroadcastPlannedEndDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	plannedEndDateDescription := `the planned end date`

	var plannedEndDateFlagName string
	if cmdPrefix == "" {
		plannedEndDateFlagName = "plannedEndDate"
	} else {
		plannedEndDateFlagName = fmt.Sprintf("%v.plannedEndDate", cmdPrefix)
	}

	var plannedEndDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(plannedEndDateFlagName, plannedEndDateFlagDefault, plannedEndDateDescription)

	return nil
}

func registerBroadcastPlannedStartDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	plannedStartDateDescription := `the planned start date`

	var plannedStartDateFlagName string
	if cmdPrefix == "" {
		plannedStartDateFlagName = "plannedStartDate"
	} else {
		plannedStartDateFlagName = fmt.Sprintf("%v.plannedStartDate", cmdPrefix)
	}

	var plannedStartDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(plannedStartDateFlagName, plannedStartDateFlagDefault, plannedStartDateDescription)

	return nil
}

func registerBroadcastPlayListItemList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: playListItemList []*PlayListItem array type is not supported by go-swagger cli yet

	return nil
}

func registerBroadcastPlayListStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	playListStatusDescription := `Enum: ["finished","broadcasting","created"]. The status of the playlist. It's usable if type is playlist`

	var playListStatusFlagName string
	if cmdPrefix == "" {
		playListStatusFlagName = "playListStatus"
	} else {
		playListStatusFlagName = fmt.Sprintf("%v.playListStatus", cmdPrefix)
	}

	var playListStatusFlagDefault string

	_ = cmd.PersistentFlags().String(playListStatusFlagName, playListStatusFlagDefault, playListStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(playListStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["finished","broadcasting","created"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBroadcastPlaylistLoopEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	playlistLoopEnabledDescription := `the identifier of playlist loop status`

	var playlistLoopEnabledFlagName string
	if cmdPrefix == "" {
		playlistLoopEnabledFlagName = "playlistLoopEnabled"
	} else {
		playlistLoopEnabledFlagName = fmt.Sprintf("%v.playlistLoopEnabled", cmdPrefix)
	}

	var playlistLoopEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(playlistLoopEnabledFlagName, playlistLoopEnabledFlagDefault, playlistLoopEnabledDescription)

	return nil
}

func registerBroadcastPublicStream(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicStreamDescription := `the identifier of whether stream is public or not`

	var publicStreamFlagName string
	if cmdPrefix == "" {
		publicStreamFlagName = "publicStream"
	} else {
		publicStreamFlagName = fmt.Sprintf("%v.publicStream", cmdPrefix)
	}

	var publicStreamFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publicStreamFlagName, publicStreamFlagDefault, publicStreamDescription)

	return nil
}

func registerBroadcastPublish(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publishDescription := `it is a video filter for the service, this value is controlled by the user, default value is true in the db`

	var publishFlagName string
	if cmdPrefix == "" {
		publishFlagName = "publish"
	} else {
		publishFlagName = fmt.Sprintf("%v.publish", cmdPrefix)
	}

	var publishFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publishFlagName, publishFlagDefault, publishDescription)

	return nil
}

func registerBroadcastPublishType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publishTypeDescription := `Enum: ["WebRTC","RTMP","Pull"]. the publish type of the stream`

	var publishTypeFlagName string
	if cmdPrefix == "" {
		publishTypeFlagName = "publishType"
	} else {
		publishTypeFlagName = fmt.Sprintf("%v.publishType", cmdPrefix)
	}

	var publishTypeFlagDefault string

	_ = cmd.PersistentFlags().String(publishTypeFlagName, publishTypeFlagDefault, publishTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(publishTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["WebRTC","RTMP","Pull"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBroadcastQuality(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	qualityDescription := `the quality of the incoming stream during publishing`

	var qualityFlagName string
	if cmdPrefix == "" {
		qualityFlagName = "quality"
	} else {
		qualityFlagName = fmt.Sprintf("%v.quality", cmdPrefix)
	}

	var qualityFlagDefault string

	_ = cmd.PersistentFlags().String(qualityFlagName, qualityFlagDefault, qualityDescription)

	return nil
}

func registerBroadcastReceivedBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	receivedBytesDescription := `the received bytes until now`

	var receivedBytesFlagName string
	if cmdPrefix == "" {
		receivedBytesFlagName = "receivedBytes"
	} else {
		receivedBytesFlagName = fmt.Sprintf("%v.receivedBytes", cmdPrefix)
	}

	var receivedBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(receivedBytesFlagName, receivedBytesFlagDefault, receivedBytesDescription)

	return nil
}

func registerBroadcastRtmpURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rtmpUrlDescription := `the RTMP URL where to publish live stream to`

	var rtmpUrlFlagName string
	if cmdPrefix == "" {
		rtmpUrlFlagName = "rtmpURL"
	} else {
		rtmpUrlFlagName = fmt.Sprintf("%v.rtmpURL", cmdPrefix)
	}

	var rtmpUrlFlagDefault string

	_ = cmd.PersistentFlags().String(rtmpUrlFlagName, rtmpUrlFlagDefault, rtmpUrlDescription)

	return nil
}

func registerBroadcastRtmpViewerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rtmpViewerCountDescription := `the number of RTMP viewers of the stream`

	var rtmpViewerCountFlagName string
	if cmdPrefix == "" {
		rtmpViewerCountFlagName = "rtmpViewerCount"
	} else {
		rtmpViewerCountFlagName = fmt.Sprintf("%v.rtmpViewerCount", cmdPrefix)
	}

	var rtmpViewerCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(rtmpViewerCountFlagName, rtmpViewerCountFlagDefault, rtmpViewerCountDescription)

	return nil
}

func registerBroadcastSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedDescription := `the speed of the incoming stream, for better quality and performance it should be around 1.00`

	var speedFlagName string
	if cmdPrefix == "" {
		speedFlagName = "speed"
	} else {
		speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
	}

	var speedFlagDefault float64

	_ = cmd.PersistentFlags().Float64(speedFlagName, speedFlagDefault, speedDescription)

	return nil
}

func registerBroadcastStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := `the publishing start time of the stream`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerBroadcastStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["finished","broadcasting","created"]. the status of the stream`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["finished","broadcasting","created"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBroadcastStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamIdDescription := `the id of the stream`

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func registerBroadcastStreamURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamUrlDescription := `the stream URL for fetching stream, especially should be defined for IP Cameras or Cloud streams`

	var streamUrlFlagName string
	if cmdPrefix == "" {
		streamUrlFlagName = "streamUrl"
	} else {
		streamUrlFlagName = fmt.Sprintf("%v.streamUrl", cmdPrefix)
	}

	var streamUrlFlagDefault string

	_ = cmd.PersistentFlags().String(streamUrlFlagName, streamUrlFlagDefault, streamUrlDescription)

	return nil
}

func registerBroadcastSubFolder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subFolderDescription := `Name of the subfolder that will contain stream files`

	var subFolderFlagName string
	if cmdPrefix == "" {
		subFolderFlagName = "subFolder"
	} else {
		subFolderFlagName = fmt.Sprintf("%v.subFolder", cmdPrefix)
	}

	var subFolderFlagDefault string

	_ = cmd.PersistentFlags().String(subFolderFlagName, subFolderFlagDefault, subFolderDescription)

	return nil
}

func registerBroadcastSubTrackStreamIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: subTrackStreamIds []string array type is not supported by go-swagger cli yet

	return nil
}

func registerBroadcastType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["liveStream","ipCamera","streamSource","VoD","playlist"]. the type of the stream`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["liveStream","ipCamera","streamSource","VoD","playlist"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBroadcastUserAgent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userAgentDescription := `User - Agent`

	var userAgentFlagName string
	if cmdPrefix == "" {
		userAgentFlagName = "userAgent"
	} else {
		userAgentFlagName = fmt.Sprintf("%v.userAgent", cmdPrefix)
	}

	var userAgentFlagDefault string

	_ = cmd.PersistentFlags().String(userAgentFlagName, userAgentFlagDefault, userAgentDescription)

	return nil
}

func registerBroadcastUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `the user name of the IP Camera`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

func registerBroadcastWebMEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webMEnabledDescription := `WebM muxing whether enabled or not for the stream, 1 means enabled, -1 means disabled, 0 means no settings for the stream`

	var webMEnabledFlagName string
	if cmdPrefix == "" {
		webMEnabledFlagName = "webMEnabled"
	} else {
		webMEnabledFlagName = fmt.Sprintf("%v.webMEnabled", cmdPrefix)
	}

	var webMEnabledFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webMEnabledFlagName, webMEnabledFlagDefault, webMEnabledDescription)

	return nil
}

func registerBroadcastWebRTCViewerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCViewerCountDescription := `the number of WebRTC viewers of the stream`

	var webRTCViewerCountFlagName string
	if cmdPrefix == "" {
		webRTCViewerCountFlagName = "webRTCViewerCount"
	} else {
		webRTCViewerCountFlagName = fmt.Sprintf("%v.webRTCViewerCount", cmdPrefix)
	}

	var webRTCViewerCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCViewerCountFlagName, webRTCViewerCountFlagDefault, webRTCViewerCountDescription)

	return nil
}

func registerBroadcastWebRTCViewerLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCViewerLimitDescription := `Number of the allowed maximum WebRTC viewers for the broadcast`

	var webRTCViewerLimitFlagName string
	if cmdPrefix == "" {
		webRTCViewerLimitFlagName = "webRTCViewerLimit"
	} else {
		webRTCViewerLimitFlagName = fmt.Sprintf("%v.webRTCViewerLimit", cmdPrefix)
	}

	var webRTCViewerLimitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCViewerLimitFlagName, webRTCViewerLimitFlagDefault, webRTCViewerLimitDescription)

	return nil
}

func registerBroadcastZombi(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	zombiDescription := `is true, if a broadcast that is not added to data store through rest service or management console It is false by default`

	var zombiFlagName string
	if cmdPrefix == "" {
		zombiFlagName = "zombi"
	} else {
		zombiFlagName = fmt.Sprintf("%v.zombi", cmdPrefix)
	}

	var zombiFlagDefault bool

	_ = cmd.PersistentFlags().Bool(zombiFlagName, zombiFlagDefault, zombiDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBroadcastFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, absoluteStartTimeMsAdded := retrieveBroadcastAbsoluteStartTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || absoluteStartTimeMsAdded

	err, altitudeAdded := retrieveBroadcastAltitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || altitudeAdded

	err, bitrateAdded := retrieveBroadcastBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bitrateAdded

	err, categoryAdded := retrieveBroadcastCategoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || categoryAdded

	err, currentPlayIndexAdded := retrieveBroadcastCurrentPlayIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentPlayIndexAdded

	err, dateAdded := retrieveBroadcastDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateAdded

	err, descriptionAdded := retrieveBroadcastDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, durationAdded := retrieveBroadcastDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || durationAdded

	err, endPointListAdded := retrieveBroadcastEndPointListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endPointListAdded

	err, expireDurationMSAdded := retrieveBroadcastExpireDurationMSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expireDurationMSAdded

	err, hlsViewerCountAdded := retrieveBroadcastHlsViewerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsViewerCountAdded

	err, hlsViewerLimitAdded := retrieveBroadcastHlsViewerLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsViewerLimitAdded

	err, ipAddrAdded := retrieveBroadcastIPAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddrAdded

	err, is360Added := retrieveBroadcastIs360Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || is360Added

	err, latitudeAdded := retrieveBroadcastLatitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latitudeAdded

	err, listenerHookUrlAdded := retrieveBroadcastListenerHookURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenerHookUrlAdded

	err, longitudeAdded := retrieveBroadcastLongitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || longitudeAdded

	err, mainTrackStreamIdAdded := retrieveBroadcastMainTrackStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mainTrackStreamIdAdded

	err, metaDataAdded := retrieveBroadcastMetaDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaDataAdded

	err, mp4EnabledAdded := retrieveBroadcastMp4EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mp4EnabledAdded

	err, nameAdded := retrieveBroadcastNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, originAdressAdded := retrieveBroadcastOriginAdressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || originAdressAdded

	err, passwordAdded := retrieveBroadcastPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, pendingPacketSizeAdded := retrieveBroadcastPendingPacketSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pendingPacketSizeAdded

	err, plannedEndDateAdded := retrieveBroadcastPlannedEndDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || plannedEndDateAdded

	err, plannedStartDateAdded := retrieveBroadcastPlannedStartDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || plannedStartDateAdded

	err, playListItemListAdded := retrieveBroadcastPlayListItemListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || playListItemListAdded

	err, playListStatusAdded := retrieveBroadcastPlayListStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || playListStatusAdded

	err, playlistLoopEnabledAdded := retrieveBroadcastPlaylistLoopEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || playlistLoopEnabledAdded

	err, publicStreamAdded := retrieveBroadcastPublicStreamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicStreamAdded

	err, publishAdded := retrieveBroadcastPublishFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishAdded

	err, publishTypeAdded := retrieveBroadcastPublishTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishTypeAdded

	err, qualityAdded := retrieveBroadcastQualityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || qualityAdded

	err, receivedBytesAdded := retrieveBroadcastReceivedBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receivedBytesAdded

	err, rtmpUrlAdded := retrieveBroadcastRtmpURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rtmpUrlAdded

	err, rtmpViewerCountAdded := retrieveBroadcastRtmpViewerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rtmpViewerCountAdded

	err, speedAdded := retrieveBroadcastSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedAdded

	err, startTimeAdded := retrieveBroadcastStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, statusAdded := retrieveBroadcastStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, streamIdAdded := retrieveBroadcastStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, streamUrlAdded := retrieveBroadcastStreamURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamUrlAdded

	err, subFolderAdded := retrieveBroadcastSubFolderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subFolderAdded

	err, subTrackStreamIdsAdded := retrieveBroadcastSubTrackStreamIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subTrackStreamIdsAdded

	err, typeAdded := retrieveBroadcastTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, userAgentAdded := retrieveBroadcastUserAgentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAgentAdded

	err, usernameAdded := retrieveBroadcastUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	err, webMEnabledAdded := retrieveBroadcastWebMEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webMEnabledAdded

	err, webRTCViewerCountAdded := retrieveBroadcastWebRTCViewerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCViewerCountAdded

	err, webRTCViewerLimitAdded := retrieveBroadcastWebRTCViewerLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCViewerLimitAdded

	err, zombiAdded := retrieveBroadcastZombiFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || zombiAdded

	return nil, retAdded
}

func retrieveBroadcastAbsoluteStartTimeMsFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	absoluteStartTimeMsFlagName := fmt.Sprintf("%v.absoluteStartTimeMs", cmdPrefix)
	if cmd.Flags().Changed(absoluteStartTimeMsFlagName) {

		var absoluteStartTimeMsFlagName string
		if cmdPrefix == "" {
			absoluteStartTimeMsFlagName = "absoluteStartTimeMs"
		} else {
			absoluteStartTimeMsFlagName = fmt.Sprintf("%v.absoluteStartTimeMs", cmdPrefix)
		}

		absoluteStartTimeMsFlagValue, err := cmd.Flags().GetInt64(absoluteStartTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.AbsoluteStartTimeMs = absoluteStartTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastAltitudeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	altitudeFlagName := fmt.Sprintf("%v.altitude", cmdPrefix)
	if cmd.Flags().Changed(altitudeFlagName) {

		var altitudeFlagName string
		if cmdPrefix == "" {
			altitudeFlagName = "altitude"
		} else {
			altitudeFlagName = fmt.Sprintf("%v.altitude", cmdPrefix)
		}

		altitudeFlagValue, err := cmd.Flags().GetString(altitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Altitude = altitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastBitrateFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bitrateFlagName := fmt.Sprintf("%v.bitrate", cmdPrefix)
	if cmd.Flags().Changed(bitrateFlagName) {

		var bitrateFlagName string
		if cmdPrefix == "" {
			bitrateFlagName = "bitrate"
		} else {
			bitrateFlagName = fmt.Sprintf("%v.bitrate", cmdPrefix)
		}

		bitrateFlagValue, err := cmd.Flags().GetInt64(bitrateFlagName)
		if err != nil {
			return err, false
		}
		m.Bitrate = bitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastCategoryFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	categoryFlagName := fmt.Sprintf("%v.category", cmdPrefix)
	if cmd.Flags().Changed(categoryFlagName) {

		var categoryFlagName string
		if cmdPrefix == "" {
			categoryFlagName = "category"
		} else {
			categoryFlagName = fmt.Sprintf("%v.category", cmdPrefix)
		}

		categoryFlagValue, err := cmd.Flags().GetString(categoryFlagName)
		if err != nil {
			return err, false
		}
		m.Category = categoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastCurrentPlayIndexFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentPlayIndexFlagName := fmt.Sprintf("%v.currentPlayIndex", cmdPrefix)
	if cmd.Flags().Changed(currentPlayIndexFlagName) {

		var currentPlayIndexFlagName string
		if cmdPrefix == "" {
			currentPlayIndexFlagName = "currentPlayIndex"
		} else {
			currentPlayIndexFlagName = fmt.Sprintf("%v.currentPlayIndex", cmdPrefix)
		}

		currentPlayIndexFlagValue, err := cmd.Flags().GetInt32(currentPlayIndexFlagName)
		if err != nil {
			return err, false
		}
		m.CurrentPlayIndex = currentPlayIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastDateFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateFlagName := fmt.Sprintf("%v.date", cmdPrefix)
	if cmd.Flags().Changed(dateFlagName) {

		var dateFlagName string
		if cmdPrefix == "" {
			dateFlagName = "date"
		} else {
			dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
		}

		dateFlagValue, err := cmd.Flags().GetInt64(dateFlagName)
		if err != nil {
			return err, false
		}
		m.Date = dateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastDescriptionFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastDurationFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	durationFlagName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(durationFlagName) {

		var durationFlagName string
		if cmdPrefix == "" {
			durationFlagName = "duration"
		} else {
			durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		durationFlagValue, err := cmd.Flags().GetInt64(durationFlagName)
		if err != nil {
			return err, false
		}
		m.Duration = durationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastEndPointListFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endPointListFlagName := fmt.Sprintf("%v.endPointList", cmdPrefix)
	if cmd.Flags().Changed(endPointListFlagName) {
		// warning: endPointList array type []*Endpoint is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBroadcastExpireDurationMSFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expireDurationMSFlagName := fmt.Sprintf("%v.expireDurationMS", cmdPrefix)
	if cmd.Flags().Changed(expireDurationMSFlagName) {

		var expireDurationMSFlagName string
		if cmdPrefix == "" {
			expireDurationMSFlagName = "expireDurationMS"
		} else {
			expireDurationMSFlagName = fmt.Sprintf("%v.expireDurationMS", cmdPrefix)
		}

		expireDurationMSFlagValue, err := cmd.Flags().GetInt32(expireDurationMSFlagName)
		if err != nil {
			return err, false
		}
		m.ExpireDurationMS = expireDurationMSFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastHlsViewerCountFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsViewerCountFlagName := fmt.Sprintf("%v.hlsViewerCount", cmdPrefix)
	if cmd.Flags().Changed(hlsViewerCountFlagName) {

		var hlsViewerCountFlagName string
		if cmdPrefix == "" {
			hlsViewerCountFlagName = "hlsViewerCount"
		} else {
			hlsViewerCountFlagName = fmt.Sprintf("%v.hlsViewerCount", cmdPrefix)
		}

		hlsViewerCountFlagValue, err := cmd.Flags().GetInt32(hlsViewerCountFlagName)
		if err != nil {
			return err, false
		}
		m.HlsViewerCount = hlsViewerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastHlsViewerLimitFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsViewerLimitFlagName := fmt.Sprintf("%v.hlsViewerLimit", cmdPrefix)
	if cmd.Flags().Changed(hlsViewerLimitFlagName) {

		var hlsViewerLimitFlagName string
		if cmdPrefix == "" {
			hlsViewerLimitFlagName = "hlsViewerLimit"
		} else {
			hlsViewerLimitFlagName = fmt.Sprintf("%v.hlsViewerLimit", cmdPrefix)
		}

		hlsViewerLimitFlagValue, err := cmd.Flags().GetInt32(hlsViewerLimitFlagName)
		if err != nil {
			return err, false
		}
		m.HlsViewerLimit = hlsViewerLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastIPAddrFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipAddrFlagName := fmt.Sprintf("%v.ipAddr", cmdPrefix)
	if cmd.Flags().Changed(ipAddrFlagName) {

		var ipAddrFlagName string
		if cmdPrefix == "" {
			ipAddrFlagName = "ipAddr"
		} else {
			ipAddrFlagName = fmt.Sprintf("%v.ipAddr", cmdPrefix)
		}

		ipAddrFlagValue, err := cmd.Flags().GetString(ipAddrFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddr = ipAddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastIs360Flags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	is360FlagName := fmt.Sprintf("%v.is360", cmdPrefix)
	if cmd.Flags().Changed(is360FlagName) {

		var is360FlagName string
		if cmdPrefix == "" {
			is360FlagName = "is360"
		} else {
			is360FlagName = fmt.Sprintf("%v.is360", cmdPrefix)
		}

		is360FlagValue, err := cmd.Flags().GetBool(is360FlagName)
		if err != nil {
			return err, false
		}
		m.Is360 = is360FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastLatitudeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latitudeFlagName := fmt.Sprintf("%v.latitude", cmdPrefix)
	if cmd.Flags().Changed(latitudeFlagName) {

		var latitudeFlagName string
		if cmdPrefix == "" {
			latitudeFlagName = "latitude"
		} else {
			latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
		}

		latitudeFlagValue, err := cmd.Flags().GetString(latitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Latitude = latitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastListenerHookURLFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	listenerHookUrlFlagName := fmt.Sprintf("%v.listenerHookURL", cmdPrefix)
	if cmd.Flags().Changed(listenerHookUrlFlagName) {

		var listenerHookUrlFlagName string
		if cmdPrefix == "" {
			listenerHookUrlFlagName = "listenerHookURL"
		} else {
			listenerHookUrlFlagName = fmt.Sprintf("%v.listenerHookURL", cmdPrefix)
		}

		listenerHookUrlFlagValue, err := cmd.Flags().GetString(listenerHookUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ListenerHookURL = listenerHookUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastLongitudeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	longitudeFlagName := fmt.Sprintf("%v.longitude", cmdPrefix)
	if cmd.Flags().Changed(longitudeFlagName) {

		var longitudeFlagName string
		if cmdPrefix == "" {
			longitudeFlagName = "longitude"
		} else {
			longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
		}

		longitudeFlagValue, err := cmd.Flags().GetString(longitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Longitude = longitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastMainTrackStreamIDFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mainTrackStreamIdFlagName := fmt.Sprintf("%v.mainTrackStreamId", cmdPrefix)
	if cmd.Flags().Changed(mainTrackStreamIdFlagName) {

		var mainTrackStreamIdFlagName string
		if cmdPrefix == "" {
			mainTrackStreamIdFlagName = "mainTrackStreamId"
		} else {
			mainTrackStreamIdFlagName = fmt.Sprintf("%v.mainTrackStreamId", cmdPrefix)
		}

		mainTrackStreamIdFlagValue, err := cmd.Flags().GetString(mainTrackStreamIdFlagName)
		if err != nil {
			return err, false
		}
		m.MainTrackStreamID = mainTrackStreamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastMetaDataFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaDataFlagName := fmt.Sprintf("%v.metaData", cmdPrefix)
	if cmd.Flags().Changed(metaDataFlagName) {

		var metaDataFlagName string
		if cmdPrefix == "" {
			metaDataFlagName = "metaData"
		} else {
			metaDataFlagName = fmt.Sprintf("%v.metaData", cmdPrefix)
		}

		metaDataFlagValue, err := cmd.Flags().GetString(metaDataFlagName)
		if err != nil {
			return err, false
		}
		m.MetaData = metaDataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastMp4EnabledFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mp4EnabledFlagName := fmt.Sprintf("%v.mp4Enabled", cmdPrefix)
	if cmd.Flags().Changed(mp4EnabledFlagName) {

		var mp4EnabledFlagName string
		if cmdPrefix == "" {
			mp4EnabledFlagName = "mp4Enabled"
		} else {
			mp4EnabledFlagName = fmt.Sprintf("%v.mp4Enabled", cmdPrefix)
		}

		mp4EnabledFlagValue, err := cmd.Flags().GetInt32(mp4EnabledFlagName)
		if err != nil {
			return err, false
		}
		m.Mp4Enabled = mp4EnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastNameFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastOriginAdressFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	originAdressFlagName := fmt.Sprintf("%v.originAdress", cmdPrefix)
	if cmd.Flags().Changed(originAdressFlagName) {

		var originAdressFlagName string
		if cmdPrefix == "" {
			originAdressFlagName = "originAdress"
		} else {
			originAdressFlagName = fmt.Sprintf("%v.originAdress", cmdPrefix)
		}

		originAdressFlagValue, err := cmd.Flags().GetString(originAdressFlagName)
		if err != nil {
			return err, false
		}
		m.OriginAdress = originAdressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPasswordFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPendingPacketSizeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pendingPacketSizeFlagName := fmt.Sprintf("%v.pendingPacketSize", cmdPrefix)
	if cmd.Flags().Changed(pendingPacketSizeFlagName) {

		var pendingPacketSizeFlagName string
		if cmdPrefix == "" {
			pendingPacketSizeFlagName = "pendingPacketSize"
		} else {
			pendingPacketSizeFlagName = fmt.Sprintf("%v.pendingPacketSize", cmdPrefix)
		}

		pendingPacketSizeFlagValue, err := cmd.Flags().GetInt32(pendingPacketSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PendingPacketSize = pendingPacketSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPlannedEndDateFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	plannedEndDateFlagName := fmt.Sprintf("%v.plannedEndDate", cmdPrefix)
	if cmd.Flags().Changed(plannedEndDateFlagName) {

		var plannedEndDateFlagName string
		if cmdPrefix == "" {
			plannedEndDateFlagName = "plannedEndDate"
		} else {
			plannedEndDateFlagName = fmt.Sprintf("%v.plannedEndDate", cmdPrefix)
		}

		plannedEndDateFlagValue, err := cmd.Flags().GetInt64(plannedEndDateFlagName)
		if err != nil {
			return err, false
		}
		m.PlannedEndDate = plannedEndDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPlannedStartDateFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	plannedStartDateFlagName := fmt.Sprintf("%v.plannedStartDate", cmdPrefix)
	if cmd.Flags().Changed(plannedStartDateFlagName) {

		var plannedStartDateFlagName string
		if cmdPrefix == "" {
			plannedStartDateFlagName = "plannedStartDate"
		} else {
			plannedStartDateFlagName = fmt.Sprintf("%v.plannedStartDate", cmdPrefix)
		}

		plannedStartDateFlagValue, err := cmd.Flags().GetInt64(plannedStartDateFlagName)
		if err != nil {
			return err, false
		}
		m.PlannedStartDate = plannedStartDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPlayListItemListFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	playListItemListFlagName := fmt.Sprintf("%v.playListItemList", cmdPrefix)
	if cmd.Flags().Changed(playListItemListFlagName) {
		// warning: playListItemList array type []*PlayListItem is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBroadcastPlayListStatusFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	playListStatusFlagName := fmt.Sprintf("%v.playListStatus", cmdPrefix)
	if cmd.Flags().Changed(playListStatusFlagName) {

		var playListStatusFlagName string
		if cmdPrefix == "" {
			playListStatusFlagName = "playListStatus"
		} else {
			playListStatusFlagName = fmt.Sprintf("%v.playListStatus", cmdPrefix)
		}

		playListStatusFlagValue, err := cmd.Flags().GetString(playListStatusFlagName)
		if err != nil {
			return err, false
		}
		m.PlayListStatus = playListStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPlaylistLoopEnabledFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	playlistLoopEnabledFlagName := fmt.Sprintf("%v.playlistLoopEnabled", cmdPrefix)
	if cmd.Flags().Changed(playlistLoopEnabledFlagName) {

		var playlistLoopEnabledFlagName string
		if cmdPrefix == "" {
			playlistLoopEnabledFlagName = "playlistLoopEnabled"
		} else {
			playlistLoopEnabledFlagName = fmt.Sprintf("%v.playlistLoopEnabled", cmdPrefix)
		}

		playlistLoopEnabledFlagValue, err := cmd.Flags().GetBool(playlistLoopEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PlaylistLoopEnabled = playlistLoopEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPublicStreamFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicStreamFlagName := fmt.Sprintf("%v.publicStream", cmdPrefix)
	if cmd.Flags().Changed(publicStreamFlagName) {

		var publicStreamFlagName string
		if cmdPrefix == "" {
			publicStreamFlagName = "publicStream"
		} else {
			publicStreamFlagName = fmt.Sprintf("%v.publicStream", cmdPrefix)
		}

		publicStreamFlagValue, err := cmd.Flags().GetBool(publicStreamFlagName)
		if err != nil {
			return err, false
		}
		m.PublicStream = publicStreamFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPublishFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publishFlagName := fmt.Sprintf("%v.publish", cmdPrefix)
	if cmd.Flags().Changed(publishFlagName) {

		var publishFlagName string
		if cmdPrefix == "" {
			publishFlagName = "publish"
		} else {
			publishFlagName = fmt.Sprintf("%v.publish", cmdPrefix)
		}

		publishFlagValue, err := cmd.Flags().GetBool(publishFlagName)
		if err != nil {
			return err, false
		}
		m.Publish = publishFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastPublishTypeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publishTypeFlagName := fmt.Sprintf("%v.publishType", cmdPrefix)
	if cmd.Flags().Changed(publishTypeFlagName) {

		var publishTypeFlagName string
		if cmdPrefix == "" {
			publishTypeFlagName = "publishType"
		} else {
			publishTypeFlagName = fmt.Sprintf("%v.publishType", cmdPrefix)
		}

		publishTypeFlagValue, err := cmd.Flags().GetString(publishTypeFlagName)
		if err != nil {
			return err, false
		}
		m.PublishType = publishTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastQualityFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	qualityFlagName := fmt.Sprintf("%v.quality", cmdPrefix)
	if cmd.Flags().Changed(qualityFlagName) {

		var qualityFlagName string
		if cmdPrefix == "" {
			qualityFlagName = "quality"
		} else {
			qualityFlagName = fmt.Sprintf("%v.quality", cmdPrefix)
		}

		qualityFlagValue, err := cmd.Flags().GetString(qualityFlagName)
		if err != nil {
			return err, false
		}
		m.Quality = qualityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastReceivedBytesFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	receivedBytesFlagName := fmt.Sprintf("%v.receivedBytes", cmdPrefix)
	if cmd.Flags().Changed(receivedBytesFlagName) {

		var receivedBytesFlagName string
		if cmdPrefix == "" {
			receivedBytesFlagName = "receivedBytes"
		} else {
			receivedBytesFlagName = fmt.Sprintf("%v.receivedBytes", cmdPrefix)
		}

		receivedBytesFlagValue, err := cmd.Flags().GetInt64(receivedBytesFlagName)
		if err != nil {
			return err, false
		}
		m.ReceivedBytes = receivedBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastRtmpURLFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rtmpUrlFlagName := fmt.Sprintf("%v.rtmpURL", cmdPrefix)
	if cmd.Flags().Changed(rtmpUrlFlagName) {

		var rtmpUrlFlagName string
		if cmdPrefix == "" {
			rtmpUrlFlagName = "rtmpURL"
		} else {
			rtmpUrlFlagName = fmt.Sprintf("%v.rtmpURL", cmdPrefix)
		}

		rtmpUrlFlagValue, err := cmd.Flags().GetString(rtmpUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RtmpURL = rtmpUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastRtmpViewerCountFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rtmpViewerCountFlagName := fmt.Sprintf("%v.rtmpViewerCount", cmdPrefix)
	if cmd.Flags().Changed(rtmpViewerCountFlagName) {

		var rtmpViewerCountFlagName string
		if cmdPrefix == "" {
			rtmpViewerCountFlagName = "rtmpViewerCount"
		} else {
			rtmpViewerCountFlagName = fmt.Sprintf("%v.rtmpViewerCount", cmdPrefix)
		}

		rtmpViewerCountFlagValue, err := cmd.Flags().GetInt32(rtmpViewerCountFlagName)
		if err != nil {
			return err, false
		}
		m.RtmpViewerCount = rtmpViewerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastSpeedFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedFlagName := fmt.Sprintf("%v.speed", cmdPrefix)
	if cmd.Flags().Changed(speedFlagName) {

		var speedFlagName string
		if cmdPrefix == "" {
			speedFlagName = "speed"
		} else {
			speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
		}

		speedFlagValue, err := cmd.Flags().GetFloat64(speedFlagName)
		if err != nil {
			return err, false
		}
		m.Speed = speedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastStartTimeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.startTime", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetInt64(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastStatusFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastStreamIDFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastStreamURLFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamUrlFlagName := fmt.Sprintf("%v.streamUrl", cmdPrefix)
	if cmd.Flags().Changed(streamUrlFlagName) {

		var streamUrlFlagName string
		if cmdPrefix == "" {
			streamUrlFlagName = "streamUrl"
		} else {
			streamUrlFlagName = fmt.Sprintf("%v.streamUrl", cmdPrefix)
		}

		streamUrlFlagValue, err := cmd.Flags().GetString(streamUrlFlagName)
		if err != nil {
			return err, false
		}
		m.StreamURL = streamUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastSubFolderFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subFolderFlagName := fmt.Sprintf("%v.subFolder", cmdPrefix)
	if cmd.Flags().Changed(subFolderFlagName) {

		var subFolderFlagName string
		if cmdPrefix == "" {
			subFolderFlagName = "subFolder"
		} else {
			subFolderFlagName = fmt.Sprintf("%v.subFolder", cmdPrefix)
		}

		subFolderFlagValue, err := cmd.Flags().GetString(subFolderFlagName)
		if err != nil {
			return err, false
		}
		m.SubFolder = subFolderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastSubTrackStreamIdsFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subTrackStreamIdsFlagName := fmt.Sprintf("%v.subTrackStreamIds", cmdPrefix)
	if cmd.Flags().Changed(subTrackStreamIdsFlagName) {
		// warning: subTrackStreamIds array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBroadcastTypeFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastUserAgentFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userAgentFlagName := fmt.Sprintf("%v.userAgent", cmdPrefix)
	if cmd.Flags().Changed(userAgentFlagName) {

		var userAgentFlagName string
		if cmdPrefix == "" {
			userAgentFlagName = "userAgent"
		} else {
			userAgentFlagName = fmt.Sprintf("%v.userAgent", cmdPrefix)
		}

		userAgentFlagValue, err := cmd.Flags().GetString(userAgentFlagName)
		if err != nil {
			return err, false
		}
		m.UserAgent = userAgentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastUsernameFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastWebMEnabledFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webMEnabledFlagName := fmt.Sprintf("%v.webMEnabled", cmdPrefix)
	if cmd.Flags().Changed(webMEnabledFlagName) {

		var webMEnabledFlagName string
		if cmdPrefix == "" {
			webMEnabledFlagName = "webMEnabled"
		} else {
			webMEnabledFlagName = fmt.Sprintf("%v.webMEnabled", cmdPrefix)
		}

		webMEnabledFlagValue, err := cmd.Flags().GetInt32(webMEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.WebMEnabled = webMEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastWebRTCViewerCountFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCViewerCountFlagName := fmt.Sprintf("%v.webRTCViewerCount", cmdPrefix)
	if cmd.Flags().Changed(webRTCViewerCountFlagName) {

		var webRTCViewerCountFlagName string
		if cmdPrefix == "" {
			webRTCViewerCountFlagName = "webRTCViewerCount"
		} else {
			webRTCViewerCountFlagName = fmt.Sprintf("%v.webRTCViewerCount", cmdPrefix)
		}

		webRTCViewerCountFlagValue, err := cmd.Flags().GetInt32(webRTCViewerCountFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCViewerCount = webRTCViewerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastWebRTCViewerLimitFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCViewerLimitFlagName := fmt.Sprintf("%v.webRTCViewerLimit", cmdPrefix)
	if cmd.Flags().Changed(webRTCViewerLimitFlagName) {

		var webRTCViewerLimitFlagName string
		if cmdPrefix == "" {
			webRTCViewerLimitFlagName = "webRTCViewerLimit"
		} else {
			webRTCViewerLimitFlagName = fmt.Sprintf("%v.webRTCViewerLimit", cmdPrefix)
		}

		webRTCViewerLimitFlagValue, err := cmd.Flags().GetInt32(webRTCViewerLimitFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCViewerLimit = webRTCViewerLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastZombiFlags(depth int, m *models.Broadcast, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	zombiFlagName := fmt.Sprintf("%v.zombi", cmdPrefix)
	if cmd.Flags().Changed(zombiFlagName) {

		var zombiFlagName string
		if cmdPrefix == "" {
			zombiFlagName = "zombi"
		} else {
			zombiFlagName = fmt.Sprintf("%v.zombi", cmdPrefix)
		}

		zombiFlagValue, err := cmd.Flags().GetBool(zombiFlagName)
		if err != nil {
			return err, false
		}
		m.Zombi = zombiFlagValue

		retAdded = true
	}

	return nil, retAdded
}
