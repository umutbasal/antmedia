// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/broadcast_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBroadcastRestServiceGetWebRTCViewerListCmd returns a cmd to handle operation getWebRTCViewerList
func makeOperationBroadcastRestServiceGetWebRTCViewerListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getWebRTCViewerList",
		Short: ``,
		RunE:  runOperationBroadcastRestServiceGetWebRTCViewerList,
	}

	if err := registerOperationBroadcastRestServiceGetWebRTCViewerListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBroadcastRestServiceGetWebRTCViewerList uses cmd flags to call endpoint api
func runOperationBroadcastRestServiceGetWebRTCViewerList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broadcast_rest_service.NewGetWebRTCViewerListParams()
	if err, _ := retrieveOperationBroadcastRestServiceGetWebRTCViewerListOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetWebRTCViewerListOrderByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetWebRTCViewerListSearchFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetWebRTCViewerListSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetWebRTCViewerListSortByFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBroadcastRestServiceGetWebRTCViewerListResult(appCli.BroadcastRestService.GetWebRTCViewerList(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBroadcastRestServiceGetWebRTCViewerListParamFlags registers all flags needed to fill params
func registerOperationBroadcastRestServiceGetWebRTCViewerListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBroadcastRestServiceGetWebRTCViewerListOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetWebRTCViewerListOrderByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetWebRTCViewerListSearchParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetWebRTCViewerListSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetWebRTCViewerListSortByParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBroadcastRestServiceGetWebRTCViewerListOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `Required. This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetWebRTCViewerListOrderByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orderByDescription := `asc for Ascending, desc Descending order`

	var orderByFlagName string
	if cmdPrefix == "" {
		orderByFlagName = "order_by"
	} else {
		orderByFlagName = fmt.Sprintf("%v.order_by", cmdPrefix)
	}

	var orderByFlagDefault string

	_ = cmd.PersistentFlags().String(orderByFlagName, orderByFlagDefault, orderByDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetWebRTCViewerListSearchParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	searchDescription := `Search parameter, returns specific items that contains search string`

	var searchFlagName string
	if cmdPrefix == "" {
		searchFlagName = "search"
	} else {
		searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
	}

	var searchFlagDefault string

	_ = cmd.PersistentFlags().String(searchFlagName, searchFlagDefault, searchDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetWebRTCViewerListSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sizeDescription := `Required. Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value`

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetWebRTCViewerListSortByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortByDescription := `field to sort`

	var sortByFlagName string
	if cmdPrefix == "" {
		sortByFlagName = "sort_by"
	} else {
		sortByFlagName = fmt.Sprintf("%v.sort_by", cmdPrefix)
	}

	var sortByFlagDefault string

	_ = cmd.PersistentFlags().String(sortByFlagName, sortByFlagDefault, sortByDescription)

	return nil
}

func retrieveOperationBroadcastRestServiceGetWebRTCViewerListOffsetFlag(m *broadcast_rest_service.GetWebRTCViewerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = offsetFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetWebRTCViewerListOrderByFlag(m *broadcast_rest_service.GetWebRTCViewerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("order_by") {

		var orderByFlagName string
		if cmdPrefix == "" {
			orderByFlagName = "order_by"
		} else {
			orderByFlagName = fmt.Sprintf("%v.order_by", cmdPrefix)
		}

		orderByFlagValue, err := cmd.Flags().GetString(orderByFlagName)
		if err != nil {
			return err, false
		}
		m.OrderBy = &orderByFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetWebRTCViewerListSearchFlag(m *broadcast_rest_service.GetWebRTCViewerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("search") {

		var searchFlagName string
		if cmdPrefix == "" {
			searchFlagName = "search"
		} else {
			searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
		}

		searchFlagValue, err := cmd.Flags().GetString(searchFlagName)
		if err != nil {
			return err, false
		}
		m.Search = &searchFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetWebRTCViewerListSizeFlag(m *broadcast_rest_service.GetWebRTCViewerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt32(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetWebRTCViewerListSortByFlag(m *broadcast_rest_service.GetWebRTCViewerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sort_by") {

		var sortByFlagName string
		if cmdPrefix == "" {
			sortByFlagName = "sort_by"
		} else {
			sortByFlagName = fmt.Sprintf("%v.sort_by", cmdPrefix)
		}

		sortByFlagValue, err := cmd.Flags().GetString(sortByFlagName)
		if err != nil {
			return err, false
		}
		m.SortBy = &sortByFlagValue

	}
	return nil, retAdded
}

// parseOperationBroadcastRestServiceGetWebRTCViewerListResult parses request result and return the string content
func parseOperationBroadcastRestServiceGetWebRTCViewerListResult(resp0 *broadcast_rest_service.GetWebRTCViewerListOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broadcast_rest_service.GetWebRTCViewerListOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
