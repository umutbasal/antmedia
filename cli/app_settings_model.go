// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for AppSettings

// register flags to command
func registerModelAppSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAppSettingsAacEncodingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsAcceptOnlyRoomsInDataStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsAcceptOnlyStreamsInDataStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsAddDateTimeToMp4FileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsAllowedPublisherCIDR(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsAppName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsAudioBitrateSFU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsCollectSocialMediaActivity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsConstantRateFactor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsCreatePreviewPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashExtraWindowSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashFragmentDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashHTTPEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashHTTPStreaming(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashMuxingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashSegDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDashWindowSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDataChannelEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDataChannelPlayerDistribution(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDataChannelWebHook(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDefaultDecodersEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDeleteDASHFilesOnEnded(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDeleteHLSFilesOnEnded(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsDisableIPV6Candidates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEnableTimeTokenForPlay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEnableTimeTokenForPublish(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderPreset(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderRc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderSelectionPreference(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderSettingsString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderSpecific(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderThreadCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncoderThreadType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEncodingTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEndpointHealthCheckPeriodMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsEndpointRepublishLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsExcessiveBandwidthAlgorithmEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsExcessiveBandwidthCallThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsExcessiveBandwidthValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsExcessiveBandwithTryCountBeforeSwitchback(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsFileNameFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsForceAspectRatioInTranscoding(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsForceDecoding(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsGeneratePreview(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsGopSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH264Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH265Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH265EncoderLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH265EncoderPreset(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH265EncoderProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH265EncoderRc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsH265EncoderSpecific(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHashControlPlayEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHashControlPublishEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHeightRtmpForwarding(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsEnabledViaDash(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsEncryptionKeyInfoFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsListSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsMuxingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsPlayListType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHlsTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHTTPForwardingBaseURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsHTTPForwardingExtension(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsIngestingStreamLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsIPFilterEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsIslLDashEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsIslLHLSEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsJwksURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsJwtControlEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsJwtSecretKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsJwtStreamSecretKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsListenerHookURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsMaxAnalyzeDurationMS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsMaxResolutionAccept(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsMp4MuxingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsMuxerFinishScript(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsMySQLClientPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsObjectDetectionEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPacketLossDiffThresholdForSwitchback(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPlayJwtControlEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPlayTokenControlEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPortAllocatorFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPreviewHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPreviewOverwrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPublishJwtControlEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPublishTokenControlEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsPullWarFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsRemoteAllowedCIDR(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsReplaceCandidateAddrWithServerAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsRestartStreamFetcherPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsRtmpIngestBufferTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsRtspPullTransportType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsRtspTimeoutDurationMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsRttMeasurementDiffThresholdForSwitchback(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3AccessKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3BucketName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3Endpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3Permission(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3PreviewsFolderPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3RecordingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3RegionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3SecretKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3StorageClass(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsS3StreamsFolderPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsSignalingAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsSignalingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsStalkerDBPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsStalkerDBServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsStalkerDBUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsStartStreamFetcherAutomatically(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsStreamFetcherBufferTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsStunServerURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsTargetLatency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsTimeTokenPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsTimeTokenSubscriberOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsToBeDeleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsTokenHashSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsUploadExtensionsToS3(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsUseOriginalWebRTCEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsUseTimelineDashMuxing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsVodFinishScript(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsVodFolder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsVp8Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsVp8EncoderDeadline(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsVp8EncoderSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsVp8EncoderThreadCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWarFileOriginServerAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebMMuxingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCClientStartTimeoutMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCFrameRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCKeyframeTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCPortRangeMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCPortRangeMin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCSdpSemantics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCTCPCandidatesEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebRTCViewerLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWebhookAuthenticateURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAppSettingsWriteStatsToDatastore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAppSettingsAacEncodingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aacEncodingEnabledDescription := ``

	var aacEncodingEnabledFlagName string
	if cmdPrefix == "" {
		aacEncodingEnabledFlagName = "aacEncodingEnabled"
	} else {
		aacEncodingEnabledFlagName = fmt.Sprintf("%v.aacEncodingEnabled", cmdPrefix)
	}

	var aacEncodingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(aacEncodingEnabledFlagName, aacEncodingEnabledFlagDefault, aacEncodingEnabledDescription)

	return nil
}

func registerAppSettingsAcceptOnlyRoomsInDataStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptOnlyRoomsInDataStoreDescription := ``

	var acceptOnlyRoomsInDataStoreFlagName string
	if cmdPrefix == "" {
		acceptOnlyRoomsInDataStoreFlagName = "acceptOnlyRoomsInDataStore"
	} else {
		acceptOnlyRoomsInDataStoreFlagName = fmt.Sprintf("%v.acceptOnlyRoomsInDataStore", cmdPrefix)
	}

	var acceptOnlyRoomsInDataStoreFlagDefault bool

	_ = cmd.PersistentFlags().Bool(acceptOnlyRoomsInDataStoreFlagName, acceptOnlyRoomsInDataStoreFlagDefault, acceptOnlyRoomsInDataStoreDescription)

	return nil
}

func registerAppSettingsAcceptOnlyStreamsInDataStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	acceptOnlyStreamsInDataStoreDescription := ``

	var acceptOnlyStreamsInDataStoreFlagName string
	if cmdPrefix == "" {
		acceptOnlyStreamsInDataStoreFlagName = "acceptOnlyStreamsInDataStore"
	} else {
		acceptOnlyStreamsInDataStoreFlagName = fmt.Sprintf("%v.acceptOnlyStreamsInDataStore", cmdPrefix)
	}

	var acceptOnlyStreamsInDataStoreFlagDefault bool

	_ = cmd.PersistentFlags().Bool(acceptOnlyStreamsInDataStoreFlagName, acceptOnlyStreamsInDataStoreFlagDefault, acceptOnlyStreamsInDataStoreDescription)

	return nil
}

func registerAppSettingsAddDateTimeToMp4FileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addDateTimeToMp4FileNameDescription := ``

	var addDateTimeToMp4FileNameFlagName string
	if cmdPrefix == "" {
		addDateTimeToMp4FileNameFlagName = "addDateTimeToMp4FileName"
	} else {
		addDateTimeToMp4FileNameFlagName = fmt.Sprintf("%v.addDateTimeToMp4FileName", cmdPrefix)
	}

	var addDateTimeToMp4FileNameFlagDefault bool

	_ = cmd.PersistentFlags().Bool(addDateTimeToMp4FileNameFlagName, addDateTimeToMp4FileNameFlagDefault, addDateTimeToMp4FileNameDescription)

	return nil
}

func registerAppSettingsAllowedPublisherCIDR(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowedPublisherCIdRDescription := ``

	var allowedPublisherCIdRFlagName string
	if cmdPrefix == "" {
		allowedPublisherCIdRFlagName = "allowedPublisherCIDR"
	} else {
		allowedPublisherCIdRFlagName = fmt.Sprintf("%v.allowedPublisherCIDR", cmdPrefix)
	}

	var allowedPublisherCIdRFlagDefault string

	_ = cmd.PersistentFlags().String(allowedPublisherCIdRFlagName, allowedPublisherCIdRFlagDefault, allowedPublisherCIdRDescription)

	return nil
}

func registerAppSettingsAppName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	appNameDescription := ``

	var appNameFlagName string
	if cmdPrefix == "" {
		appNameFlagName = "appName"
	} else {
		appNameFlagName = fmt.Sprintf("%v.appName", cmdPrefix)
	}

	var appNameFlagDefault string

	_ = cmd.PersistentFlags().String(appNameFlagName, appNameFlagDefault, appNameDescription)

	return nil
}

func registerAppSettingsAudioBitrateSFU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioBitrateSFUDescription := ``

	var audioBitrateSFUFlagName string
	if cmdPrefix == "" {
		audioBitrateSFUFlagName = "audioBitrateSFU"
	} else {
		audioBitrateSFUFlagName = fmt.Sprintf("%v.audioBitrateSFU", cmdPrefix)
	}

	var audioBitrateSFUFlagDefault int32

	_ = cmd.PersistentFlags().Int32(audioBitrateSFUFlagName, audioBitrateSFUFlagDefault, audioBitrateSFUDescription)

	return nil
}

func registerAppSettingsCollectSocialMediaActivity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	collectSocialMediaActivityDescription := ``

	var collectSocialMediaActivityFlagName string
	if cmdPrefix == "" {
		collectSocialMediaActivityFlagName = "collectSocialMediaActivity"
	} else {
		collectSocialMediaActivityFlagName = fmt.Sprintf("%v.collectSocialMediaActivity", cmdPrefix)
	}

	var collectSocialMediaActivityFlagDefault bool

	_ = cmd.PersistentFlags().Bool(collectSocialMediaActivityFlagName, collectSocialMediaActivityFlagDefault, collectSocialMediaActivityDescription)

	return nil
}

func registerAppSettingsConstantRateFactor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	constantRateFactorDescription := ``

	var constantRateFactorFlagName string
	if cmdPrefix == "" {
		constantRateFactorFlagName = "constantRateFactor"
	} else {
		constantRateFactorFlagName = fmt.Sprintf("%v.constantRateFactor", cmdPrefix)
	}

	var constantRateFactorFlagDefault string

	_ = cmd.PersistentFlags().String(constantRateFactorFlagName, constantRateFactorFlagDefault, constantRateFactorDescription)

	return nil
}

func registerAppSettingsCreatePreviewPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createPreviewPeriodDescription := ``

	var createPreviewPeriodFlagName string
	if cmdPrefix == "" {
		createPreviewPeriodFlagName = "createPreviewPeriod"
	} else {
		createPreviewPeriodFlagName = fmt.Sprintf("%v.createPreviewPeriod", cmdPrefix)
	}

	var createPreviewPeriodFlagDefault int32

	_ = cmd.PersistentFlags().Int32(createPreviewPeriodFlagName, createPreviewPeriodFlagDefault, createPreviewPeriodDescription)

	return nil
}

func registerAppSettingsDashExtraWindowSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashExtraWindowSizeDescription := ``

	var dashExtraWindowSizeFlagName string
	if cmdPrefix == "" {
		dashExtraWindowSizeFlagName = "dashExtraWindowSize"
	} else {
		dashExtraWindowSizeFlagName = fmt.Sprintf("%v.dashExtraWindowSize", cmdPrefix)
	}

	var dashExtraWindowSizeFlagDefault string

	_ = cmd.PersistentFlags().String(dashExtraWindowSizeFlagName, dashExtraWindowSizeFlagDefault, dashExtraWindowSizeDescription)

	return nil
}

func registerAppSettingsDashFragmentDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashFragmentDurationDescription := ``

	var dashFragmentDurationFlagName string
	if cmdPrefix == "" {
		dashFragmentDurationFlagName = "dashFragmentDuration"
	} else {
		dashFragmentDurationFlagName = fmt.Sprintf("%v.dashFragmentDuration", cmdPrefix)
	}

	var dashFragmentDurationFlagDefault string

	_ = cmd.PersistentFlags().String(dashFragmentDurationFlagName, dashFragmentDurationFlagDefault, dashFragmentDurationDescription)

	return nil
}

func registerAppSettingsDashHTTPEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashHttpEndpointDescription := ``

	var dashHttpEndpointFlagName string
	if cmdPrefix == "" {
		dashHttpEndpointFlagName = "dashHttpEndpoint"
	} else {
		dashHttpEndpointFlagName = fmt.Sprintf("%v.dashHttpEndpoint", cmdPrefix)
	}

	var dashHttpEndpointFlagDefault string

	_ = cmd.PersistentFlags().String(dashHttpEndpointFlagName, dashHttpEndpointFlagDefault, dashHttpEndpointDescription)

	return nil
}

func registerAppSettingsDashHTTPStreaming(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashHttpStreamingDescription := ``

	var dashHttpStreamingFlagName string
	if cmdPrefix == "" {
		dashHttpStreamingFlagName = "dashHttpStreaming"
	} else {
		dashHttpStreamingFlagName = fmt.Sprintf("%v.dashHttpStreaming", cmdPrefix)
	}

	var dashHttpStreamingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dashHttpStreamingFlagName, dashHttpStreamingFlagDefault, dashHttpStreamingDescription)

	return nil
}

func registerAppSettingsDashMuxingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashMuxingEnabledDescription := ``

	var dashMuxingEnabledFlagName string
	if cmdPrefix == "" {
		dashMuxingEnabledFlagName = "dashMuxingEnabled"
	} else {
		dashMuxingEnabledFlagName = fmt.Sprintf("%v.dashMuxingEnabled", cmdPrefix)
	}

	var dashMuxingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dashMuxingEnabledFlagName, dashMuxingEnabledFlagDefault, dashMuxingEnabledDescription)

	return nil
}

func registerAppSettingsDashSegDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashSegDurationDescription := ``

	var dashSegDurationFlagName string
	if cmdPrefix == "" {
		dashSegDurationFlagName = "dashSegDuration"
	} else {
		dashSegDurationFlagName = fmt.Sprintf("%v.dashSegDuration", cmdPrefix)
	}

	var dashSegDurationFlagDefault string

	_ = cmd.PersistentFlags().String(dashSegDurationFlagName, dashSegDurationFlagDefault, dashSegDurationDescription)

	return nil
}

func registerAppSettingsDashWindowSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dashWindowSizeDescription := ``

	var dashWindowSizeFlagName string
	if cmdPrefix == "" {
		dashWindowSizeFlagName = "dashWindowSize"
	} else {
		dashWindowSizeFlagName = fmt.Sprintf("%v.dashWindowSize", cmdPrefix)
	}

	var dashWindowSizeFlagDefault string

	_ = cmd.PersistentFlags().String(dashWindowSizeFlagName, dashWindowSizeFlagDefault, dashWindowSizeDescription)

	return nil
}

func registerAppSettingsDataChannelEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataChannelEnabledDescription := ``

	var dataChannelEnabledFlagName string
	if cmdPrefix == "" {
		dataChannelEnabledFlagName = "dataChannelEnabled"
	} else {
		dataChannelEnabledFlagName = fmt.Sprintf("%v.dataChannelEnabled", cmdPrefix)
	}

	var dataChannelEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dataChannelEnabledFlagName, dataChannelEnabledFlagDefault, dataChannelEnabledDescription)

	return nil
}

func registerAppSettingsDataChannelPlayerDistribution(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataChannelPlayerDistributionDescription := ``

	var dataChannelPlayerDistributionFlagName string
	if cmdPrefix == "" {
		dataChannelPlayerDistributionFlagName = "dataChannelPlayerDistribution"
	} else {
		dataChannelPlayerDistributionFlagName = fmt.Sprintf("%v.dataChannelPlayerDistribution", cmdPrefix)
	}

	var dataChannelPlayerDistributionFlagDefault string

	_ = cmd.PersistentFlags().String(dataChannelPlayerDistributionFlagName, dataChannelPlayerDistributionFlagDefault, dataChannelPlayerDistributionDescription)

	return nil
}

func registerAppSettingsDataChannelWebHook(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataChannelWebHookDescription := ``

	var dataChannelWebHookFlagName string
	if cmdPrefix == "" {
		dataChannelWebHookFlagName = "dataChannelWebHook"
	} else {
		dataChannelWebHookFlagName = fmt.Sprintf("%v.dataChannelWebHook", cmdPrefix)
	}

	var dataChannelWebHookFlagDefault string

	_ = cmd.PersistentFlags().String(dataChannelWebHookFlagName, dataChannelWebHookFlagDefault, dataChannelWebHookDescription)

	return nil
}

func registerAppSettingsDefaultDecodersEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDecodersEnabledDescription := ``

	var defaultDecodersEnabledFlagName string
	if cmdPrefix == "" {
		defaultDecodersEnabledFlagName = "defaultDecodersEnabled"
	} else {
		defaultDecodersEnabledFlagName = fmt.Sprintf("%v.defaultDecodersEnabled", cmdPrefix)
	}

	var defaultDecodersEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultDecodersEnabledFlagName, defaultDecodersEnabledFlagDefault, defaultDecodersEnabledDescription)

	return nil
}

func registerAppSettingsDeleteDASHFilesOnEnded(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deleteDASHFilesOnEndedDescription := ``

	var deleteDASHFilesOnEndedFlagName string
	if cmdPrefix == "" {
		deleteDASHFilesOnEndedFlagName = "deleteDASHFilesOnEnded"
	} else {
		deleteDASHFilesOnEndedFlagName = fmt.Sprintf("%v.deleteDASHFilesOnEnded", cmdPrefix)
	}

	var deleteDASHFilesOnEndedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deleteDASHFilesOnEndedFlagName, deleteDASHFilesOnEndedFlagDefault, deleteDASHFilesOnEndedDescription)

	return nil
}

func registerAppSettingsDeleteHLSFilesOnEnded(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deleteHLSFilesOnEndedDescription := ``

	var deleteHLSFilesOnEndedFlagName string
	if cmdPrefix == "" {
		deleteHLSFilesOnEndedFlagName = "deleteHLSFilesOnEnded"
	} else {
		deleteHLSFilesOnEndedFlagName = fmt.Sprintf("%v.deleteHLSFilesOnEnded", cmdPrefix)
	}

	var deleteHLSFilesOnEndedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deleteHLSFilesOnEndedFlagName, deleteHLSFilesOnEndedFlagDefault, deleteHLSFilesOnEndedDescription)

	return nil
}

func registerAppSettingsDisableIPV6Candidates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	disableIpv6CandidatesDescription := ``

	var disableIpv6CandidatesFlagName string
	if cmdPrefix == "" {
		disableIpv6CandidatesFlagName = "disableIPv6Candidates"
	} else {
		disableIpv6CandidatesFlagName = fmt.Sprintf("%v.disableIPv6Candidates", cmdPrefix)
	}

	var disableIpv6CandidatesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(disableIpv6CandidatesFlagName, disableIpv6CandidatesFlagDefault, disableIpv6CandidatesDescription)

	return nil
}

func registerAppSettingsEnableTimeTokenForPlay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableTimeTokenForPlayDescription := ``

	var enableTimeTokenForPlayFlagName string
	if cmdPrefix == "" {
		enableTimeTokenForPlayFlagName = "enableTimeTokenForPlay"
	} else {
		enableTimeTokenForPlayFlagName = fmt.Sprintf("%v.enableTimeTokenForPlay", cmdPrefix)
	}

	var enableTimeTokenForPlayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableTimeTokenForPlayFlagName, enableTimeTokenForPlayFlagDefault, enableTimeTokenForPlayDescription)

	return nil
}

func registerAppSettingsEnableTimeTokenForPublish(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableTimeTokenForPublishDescription := ``

	var enableTimeTokenForPublishFlagName string
	if cmdPrefix == "" {
		enableTimeTokenForPublishFlagName = "enableTimeTokenForPublish"
	} else {
		enableTimeTokenForPublishFlagName = fmt.Sprintf("%v.enableTimeTokenForPublish", cmdPrefix)
	}

	var enableTimeTokenForPublishFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableTimeTokenForPublishFlagName, enableTimeTokenForPublishFlagDefault, enableTimeTokenForPublishDescription)

	return nil
}

func registerAppSettingsEncoderLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderLevelDescription := ``

	var encoderLevelFlagName string
	if cmdPrefix == "" {
		encoderLevelFlagName = "encoderLevel"
	} else {
		encoderLevelFlagName = fmt.Sprintf("%v.encoderLevel", cmdPrefix)
	}

	var encoderLevelFlagDefault string

	_ = cmd.PersistentFlags().String(encoderLevelFlagName, encoderLevelFlagDefault, encoderLevelDescription)

	return nil
}

func registerAppSettingsEncoderName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderNameDescription := ``

	var encoderNameFlagName string
	if cmdPrefix == "" {
		encoderNameFlagName = "encoderName"
	} else {
		encoderNameFlagName = fmt.Sprintf("%v.encoderName", cmdPrefix)
	}

	var encoderNameFlagDefault string

	_ = cmd.PersistentFlags().String(encoderNameFlagName, encoderNameFlagDefault, encoderNameDescription)

	return nil
}

func registerAppSettingsEncoderPreset(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderPresetDescription := ``

	var encoderPresetFlagName string
	if cmdPrefix == "" {
		encoderPresetFlagName = "encoderPreset"
	} else {
		encoderPresetFlagName = fmt.Sprintf("%v.encoderPreset", cmdPrefix)
	}

	var encoderPresetFlagDefault string

	_ = cmd.PersistentFlags().String(encoderPresetFlagName, encoderPresetFlagDefault, encoderPresetDescription)

	return nil
}

func registerAppSettingsEncoderProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderProfileDescription := ``

	var encoderProfileFlagName string
	if cmdPrefix == "" {
		encoderProfileFlagName = "encoderProfile"
	} else {
		encoderProfileFlagName = fmt.Sprintf("%v.encoderProfile", cmdPrefix)
	}

	var encoderProfileFlagDefault string

	_ = cmd.PersistentFlags().String(encoderProfileFlagName, encoderProfileFlagDefault, encoderProfileDescription)

	return nil
}

func registerAppSettingsEncoderRc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderRcDescription := ``

	var encoderRcFlagName string
	if cmdPrefix == "" {
		encoderRcFlagName = "encoderRc"
	} else {
		encoderRcFlagName = fmt.Sprintf("%v.encoderRc", cmdPrefix)
	}

	var encoderRcFlagDefault string

	_ = cmd.PersistentFlags().String(encoderRcFlagName, encoderRcFlagDefault, encoderRcDescription)

	return nil
}

func registerAppSettingsEncoderSelectionPreference(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderSelectionPreferenceDescription := ``

	var encoderSelectionPreferenceFlagName string
	if cmdPrefix == "" {
		encoderSelectionPreferenceFlagName = "encoderSelectionPreference"
	} else {
		encoderSelectionPreferenceFlagName = fmt.Sprintf("%v.encoderSelectionPreference", cmdPrefix)
	}

	var encoderSelectionPreferenceFlagDefault string

	_ = cmd.PersistentFlags().String(encoderSelectionPreferenceFlagName, encoderSelectionPreferenceFlagDefault, encoderSelectionPreferenceDescription)

	return nil
}

func registerAppSettingsEncoderSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: encoderSettings []*EncoderSettings array type is not supported by go-swagger cli yet

	return nil
}

func registerAppSettingsEncoderSettingsString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderSettingsStringDescription := ``

	var encoderSettingsStringFlagName string
	if cmdPrefix == "" {
		encoderSettingsStringFlagName = "encoderSettingsString"
	} else {
		encoderSettingsStringFlagName = fmt.Sprintf("%v.encoderSettingsString", cmdPrefix)
	}

	var encoderSettingsStringFlagDefault string

	_ = cmd.PersistentFlags().String(encoderSettingsStringFlagName, encoderSettingsStringFlagDefault, encoderSettingsStringDescription)

	return nil
}

func registerAppSettingsEncoderSpecific(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderSpecificDescription := ``

	var encoderSpecificFlagName string
	if cmdPrefix == "" {
		encoderSpecificFlagName = "encoderSpecific"
	} else {
		encoderSpecificFlagName = fmt.Sprintf("%v.encoderSpecific", cmdPrefix)
	}

	var encoderSpecificFlagDefault string

	_ = cmd.PersistentFlags().String(encoderSpecificFlagName, encoderSpecificFlagDefault, encoderSpecificDescription)

	return nil
}

func registerAppSettingsEncoderThreadCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderThreadCountDescription := ``

	var encoderThreadCountFlagName string
	if cmdPrefix == "" {
		encoderThreadCountFlagName = "encoderThreadCount"
	} else {
		encoderThreadCountFlagName = fmt.Sprintf("%v.encoderThreadCount", cmdPrefix)
	}

	var encoderThreadCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(encoderThreadCountFlagName, encoderThreadCountFlagDefault, encoderThreadCountDescription)

	return nil
}

func registerAppSettingsEncoderThreadType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderThreadTypeDescription := ``

	var encoderThreadTypeFlagName string
	if cmdPrefix == "" {
		encoderThreadTypeFlagName = "encoderThreadType"
	} else {
		encoderThreadTypeFlagName = fmt.Sprintf("%v.encoderThreadType", cmdPrefix)
	}

	var encoderThreadTypeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(encoderThreadTypeFlagName, encoderThreadTypeFlagDefault, encoderThreadTypeDescription)

	return nil
}

func registerAppSettingsEncodingTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encodingTimeoutDescription := ``

	var encodingTimeoutFlagName string
	if cmdPrefix == "" {
		encodingTimeoutFlagName = "encodingTimeout"
	} else {
		encodingTimeoutFlagName = fmt.Sprintf("%v.encodingTimeout", cmdPrefix)
	}

	var encodingTimeoutFlagDefault int32

	_ = cmd.PersistentFlags().Int32(encodingTimeoutFlagName, encodingTimeoutFlagDefault, encodingTimeoutDescription)

	return nil
}

func registerAppSettingsEndpointHealthCheckPeriodMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointHealthCheckPeriodMsDescription := ``

	var endpointHealthCheckPeriodMsFlagName string
	if cmdPrefix == "" {
		endpointHealthCheckPeriodMsFlagName = "endpointHealthCheckPeriodMs"
	} else {
		endpointHealthCheckPeriodMsFlagName = fmt.Sprintf("%v.endpointHealthCheckPeriodMs", cmdPrefix)
	}

	var endpointHealthCheckPeriodMsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(endpointHealthCheckPeriodMsFlagName, endpointHealthCheckPeriodMsFlagDefault, endpointHealthCheckPeriodMsDescription)

	return nil
}

func registerAppSettingsEndpointRepublishLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointRepublishLimitDescription := ``

	var endpointRepublishLimitFlagName string
	if cmdPrefix == "" {
		endpointRepublishLimitFlagName = "endpointRepublishLimit"
	} else {
		endpointRepublishLimitFlagName = fmt.Sprintf("%v.endpointRepublishLimit", cmdPrefix)
	}

	var endpointRepublishLimitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(endpointRepublishLimitFlagName, endpointRepublishLimitFlagDefault, endpointRepublishLimitDescription)

	return nil
}

func registerAppSettingsExcessiveBandwidthAlgorithmEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	excessiveBandwidthAlgorithmEnabledDescription := ``

	var excessiveBandwidthAlgorithmEnabledFlagName string
	if cmdPrefix == "" {
		excessiveBandwidthAlgorithmEnabledFlagName = "excessiveBandwidthAlgorithmEnabled"
	} else {
		excessiveBandwidthAlgorithmEnabledFlagName = fmt.Sprintf("%v.excessiveBandwidthAlgorithmEnabled", cmdPrefix)
	}

	var excessiveBandwidthAlgorithmEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(excessiveBandwidthAlgorithmEnabledFlagName, excessiveBandwidthAlgorithmEnabledFlagDefault, excessiveBandwidthAlgorithmEnabledDescription)

	return nil
}

func registerAppSettingsExcessiveBandwidthCallThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	excessiveBandwidthCallThresholdDescription := ``

	var excessiveBandwidthCallThresholdFlagName string
	if cmdPrefix == "" {
		excessiveBandwidthCallThresholdFlagName = "excessiveBandwidthCallThreshold"
	} else {
		excessiveBandwidthCallThresholdFlagName = fmt.Sprintf("%v.excessiveBandwidthCallThreshold", cmdPrefix)
	}

	var excessiveBandwidthCallThresholdFlagDefault int32

	_ = cmd.PersistentFlags().Int32(excessiveBandwidthCallThresholdFlagName, excessiveBandwidthCallThresholdFlagDefault, excessiveBandwidthCallThresholdDescription)

	return nil
}

func registerAppSettingsExcessiveBandwidthValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	excessiveBandwidthValueDescription := ``

	var excessiveBandwidthValueFlagName string
	if cmdPrefix == "" {
		excessiveBandwidthValueFlagName = "excessiveBandwidthValue"
	} else {
		excessiveBandwidthValueFlagName = fmt.Sprintf("%v.excessiveBandwidthValue", cmdPrefix)
	}

	var excessiveBandwidthValueFlagDefault int32

	_ = cmd.PersistentFlags().Int32(excessiveBandwidthValueFlagName, excessiveBandwidthValueFlagDefault, excessiveBandwidthValueDescription)

	return nil
}

func registerAppSettingsExcessiveBandwithTryCountBeforeSwitchback(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	excessiveBandwithTryCountBeforeSwitchbackDescription := ``

	var excessiveBandwithTryCountBeforeSwitchbackFlagName string
	if cmdPrefix == "" {
		excessiveBandwithTryCountBeforeSwitchbackFlagName = "excessiveBandwithTryCountBeforeSwitchback"
	} else {
		excessiveBandwithTryCountBeforeSwitchbackFlagName = fmt.Sprintf("%v.excessiveBandwithTryCountBeforeSwitchback", cmdPrefix)
	}

	var excessiveBandwithTryCountBeforeSwitchbackFlagDefault int32

	_ = cmd.PersistentFlags().Int32(excessiveBandwithTryCountBeforeSwitchbackFlagName, excessiveBandwithTryCountBeforeSwitchbackFlagDefault, excessiveBandwithTryCountBeforeSwitchbackDescription)

	return nil
}

func registerAppSettingsFileNameFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileNameFormatDescription := ``

	var fileNameFormatFlagName string
	if cmdPrefix == "" {
		fileNameFormatFlagName = "fileNameFormat"
	} else {
		fileNameFormatFlagName = fmt.Sprintf("%v.fileNameFormat", cmdPrefix)
	}

	var fileNameFormatFlagDefault string

	_ = cmd.PersistentFlags().String(fileNameFormatFlagName, fileNameFormatFlagDefault, fileNameFormatDescription)

	return nil
}

func registerAppSettingsForceAspectRatioInTranscoding(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceAspectRatioInTranscodingDescription := ``

	var forceAspectRatioInTranscodingFlagName string
	if cmdPrefix == "" {
		forceAspectRatioInTranscodingFlagName = "forceAspectRatioInTranscoding"
	} else {
		forceAspectRatioInTranscodingFlagName = fmt.Sprintf("%v.forceAspectRatioInTranscoding", cmdPrefix)
	}

	var forceAspectRatioInTranscodingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceAspectRatioInTranscodingFlagName, forceAspectRatioInTranscodingFlagDefault, forceAspectRatioInTranscodingDescription)

	return nil
}

func registerAppSettingsForceDecoding(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceDecodingDescription := ``

	var forceDecodingFlagName string
	if cmdPrefix == "" {
		forceDecodingFlagName = "forceDecoding"
	} else {
		forceDecodingFlagName = fmt.Sprintf("%v.forceDecoding", cmdPrefix)
	}

	var forceDecodingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceDecodingFlagName, forceDecodingFlagDefault, forceDecodingDescription)

	return nil
}

func registerAppSettingsGeneratePreview(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	generatePreviewDescription := ``

	var generatePreviewFlagName string
	if cmdPrefix == "" {
		generatePreviewFlagName = "generatePreview"
	} else {
		generatePreviewFlagName = fmt.Sprintf("%v.generatePreview", cmdPrefix)
	}

	var generatePreviewFlagDefault bool

	_ = cmd.PersistentFlags().Bool(generatePreviewFlagName, generatePreviewFlagDefault, generatePreviewDescription)

	return nil
}

func registerAppSettingsGopSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gopSizeDescription := ``

	var gopSizeFlagName string
	if cmdPrefix == "" {
		gopSizeFlagName = "gopSize"
	} else {
		gopSizeFlagName = fmt.Sprintf("%v.gopSize", cmdPrefix)
	}

	var gopSizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(gopSizeFlagName, gopSizeFlagDefault, gopSizeDescription)

	return nil
}

func registerAppSettingsH264Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h264EnabledDescription := ``

	var h264EnabledFlagName string
	if cmdPrefix == "" {
		h264EnabledFlagName = "h264Enabled"
	} else {
		h264EnabledFlagName = fmt.Sprintf("%v.h264Enabled", cmdPrefix)
	}

	var h264EnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(h264EnabledFlagName, h264EnabledFlagDefault, h264EnabledDescription)

	return nil
}

func registerAppSettingsH265Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h265EnabledDescription := ``

	var h265EnabledFlagName string
	if cmdPrefix == "" {
		h265EnabledFlagName = "h265Enabled"
	} else {
		h265EnabledFlagName = fmt.Sprintf("%v.h265Enabled", cmdPrefix)
	}

	var h265EnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(h265EnabledFlagName, h265EnabledFlagDefault, h265EnabledDescription)

	return nil
}

func registerAppSettingsH265EncoderLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h265EncoderLevelDescription := ``

	var h265EncoderLevelFlagName string
	if cmdPrefix == "" {
		h265EncoderLevelFlagName = "h265EncoderLevel"
	} else {
		h265EncoderLevelFlagName = fmt.Sprintf("%v.h265EncoderLevel", cmdPrefix)
	}

	var h265EncoderLevelFlagDefault string

	_ = cmd.PersistentFlags().String(h265EncoderLevelFlagName, h265EncoderLevelFlagDefault, h265EncoderLevelDescription)

	return nil
}

func registerAppSettingsH265EncoderPreset(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h265EncoderPresetDescription := ``

	var h265EncoderPresetFlagName string
	if cmdPrefix == "" {
		h265EncoderPresetFlagName = "h265EncoderPreset"
	} else {
		h265EncoderPresetFlagName = fmt.Sprintf("%v.h265EncoderPreset", cmdPrefix)
	}

	var h265EncoderPresetFlagDefault string

	_ = cmd.PersistentFlags().String(h265EncoderPresetFlagName, h265EncoderPresetFlagDefault, h265EncoderPresetDescription)

	return nil
}

func registerAppSettingsH265EncoderProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h265EncoderProfileDescription := ``

	var h265EncoderProfileFlagName string
	if cmdPrefix == "" {
		h265EncoderProfileFlagName = "h265EncoderProfile"
	} else {
		h265EncoderProfileFlagName = fmt.Sprintf("%v.h265EncoderProfile", cmdPrefix)
	}

	var h265EncoderProfileFlagDefault string

	_ = cmd.PersistentFlags().String(h265EncoderProfileFlagName, h265EncoderProfileFlagDefault, h265EncoderProfileDescription)

	return nil
}

func registerAppSettingsH265EncoderRc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h265EncoderRcDescription := ``

	var h265EncoderRcFlagName string
	if cmdPrefix == "" {
		h265EncoderRcFlagName = "h265EncoderRc"
	} else {
		h265EncoderRcFlagName = fmt.Sprintf("%v.h265EncoderRc", cmdPrefix)
	}

	var h265EncoderRcFlagDefault string

	_ = cmd.PersistentFlags().String(h265EncoderRcFlagName, h265EncoderRcFlagDefault, h265EncoderRcDescription)

	return nil
}

func registerAppSettingsH265EncoderSpecific(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h265EncoderSpecificDescription := ``

	var h265EncoderSpecificFlagName string
	if cmdPrefix == "" {
		h265EncoderSpecificFlagName = "h265EncoderSpecific"
	} else {
		h265EncoderSpecificFlagName = fmt.Sprintf("%v.h265EncoderSpecific", cmdPrefix)
	}

	var h265EncoderSpecificFlagDefault string

	_ = cmd.PersistentFlags().String(h265EncoderSpecificFlagName, h265EncoderSpecificFlagDefault, h265EncoderSpecificDescription)

	return nil
}

func registerAppSettingsHashControlPlayEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hashControlPlayEnabledDescription := ``

	var hashControlPlayEnabledFlagName string
	if cmdPrefix == "" {
		hashControlPlayEnabledFlagName = "hashControlPlayEnabled"
	} else {
		hashControlPlayEnabledFlagName = fmt.Sprintf("%v.hashControlPlayEnabled", cmdPrefix)
	}

	var hashControlPlayEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hashControlPlayEnabledFlagName, hashControlPlayEnabledFlagDefault, hashControlPlayEnabledDescription)

	return nil
}

func registerAppSettingsHashControlPublishEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hashControlPublishEnabledDescription := ``

	var hashControlPublishEnabledFlagName string
	if cmdPrefix == "" {
		hashControlPublishEnabledFlagName = "hashControlPublishEnabled"
	} else {
		hashControlPublishEnabledFlagName = fmt.Sprintf("%v.hashControlPublishEnabled", cmdPrefix)
	}

	var hashControlPublishEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hashControlPublishEnabledFlagName, hashControlPublishEnabledFlagDefault, hashControlPublishEnabledDescription)

	return nil
}

func registerAppSettingsHeightRtmpForwarding(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	heightRtmpForwardingDescription := ``

	var heightRtmpForwardingFlagName string
	if cmdPrefix == "" {
		heightRtmpForwardingFlagName = "heightRtmpForwarding"
	} else {
		heightRtmpForwardingFlagName = fmt.Sprintf("%v.heightRtmpForwarding", cmdPrefix)
	}

	var heightRtmpForwardingFlagDefault int32

	_ = cmd.PersistentFlags().Int32(heightRtmpForwardingFlagName, heightRtmpForwardingFlagDefault, heightRtmpForwardingDescription)

	return nil
}

func registerAppSettingsHlsEnabledViaDash(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsEnabledViaDashDescription := ``

	var hlsEnabledViaDashFlagName string
	if cmdPrefix == "" {
		hlsEnabledViaDashFlagName = "hlsEnabledViaDash"
	} else {
		hlsEnabledViaDashFlagName = fmt.Sprintf("%v.hlsEnabledViaDash", cmdPrefix)
	}

	var hlsEnabledViaDashFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hlsEnabledViaDashFlagName, hlsEnabledViaDashFlagDefault, hlsEnabledViaDashDescription)

	return nil
}

func registerAppSettingsHlsEncryptionKeyInfoFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsEncryptionKeyInfoFileDescription := ``

	var hlsEncryptionKeyInfoFileFlagName string
	if cmdPrefix == "" {
		hlsEncryptionKeyInfoFileFlagName = "hlsEncryptionKeyInfoFile"
	} else {
		hlsEncryptionKeyInfoFileFlagName = fmt.Sprintf("%v.hlsEncryptionKeyInfoFile", cmdPrefix)
	}

	var hlsEncryptionKeyInfoFileFlagDefault string

	_ = cmd.PersistentFlags().String(hlsEncryptionKeyInfoFileFlagName, hlsEncryptionKeyInfoFileFlagDefault, hlsEncryptionKeyInfoFileDescription)

	return nil
}

func registerAppSettingsHlsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsFlagsDescription := ``

	var hlsFlagsFlagName string
	if cmdPrefix == "" {
		hlsFlagsFlagName = "hlsFlags"
	} else {
		hlsFlagsFlagName = fmt.Sprintf("%v.hlsFlags", cmdPrefix)
	}

	var hlsFlagsFlagDefault string

	_ = cmd.PersistentFlags().String(hlsFlagsFlagName, hlsFlagsFlagDefault, hlsFlagsDescription)

	return nil
}

func registerAppSettingsHlsListSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsListSizeDescription := ``

	var hlsListSizeFlagName string
	if cmdPrefix == "" {
		hlsListSizeFlagName = "hlsListSize"
	} else {
		hlsListSizeFlagName = fmt.Sprintf("%v.hlsListSize", cmdPrefix)
	}

	var hlsListSizeFlagDefault string

	_ = cmd.PersistentFlags().String(hlsListSizeFlagName, hlsListSizeFlagDefault, hlsListSizeDescription)

	return nil
}

func registerAppSettingsHlsMuxingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsMuxingEnabledDescription := ``

	var hlsMuxingEnabledFlagName string
	if cmdPrefix == "" {
		hlsMuxingEnabledFlagName = "hlsMuxingEnabled"
	} else {
		hlsMuxingEnabledFlagName = fmt.Sprintf("%v.hlsMuxingEnabled", cmdPrefix)
	}

	var hlsMuxingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hlsMuxingEnabledFlagName, hlsMuxingEnabledFlagDefault, hlsMuxingEnabledDescription)

	return nil
}

func registerAppSettingsHlsPlayListType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsPlayListTypeDescription := ``

	var hlsPlayListTypeFlagName string
	if cmdPrefix == "" {
		hlsPlayListTypeFlagName = "hlsPlayListType"
	} else {
		hlsPlayListTypeFlagName = fmt.Sprintf("%v.hlsPlayListType", cmdPrefix)
	}

	var hlsPlayListTypeFlagDefault string

	_ = cmd.PersistentFlags().String(hlsPlayListTypeFlagName, hlsPlayListTypeFlagDefault, hlsPlayListTypeDescription)

	return nil
}

func registerAppSettingsHlsTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hlsTimeDescription := ``

	var hlsTimeFlagName string
	if cmdPrefix == "" {
		hlsTimeFlagName = "hlsTime"
	} else {
		hlsTimeFlagName = fmt.Sprintf("%v.hlsTime", cmdPrefix)
	}

	var hlsTimeFlagDefault string

	_ = cmd.PersistentFlags().String(hlsTimeFlagName, hlsTimeFlagDefault, hlsTimeDescription)

	return nil
}

func registerAppSettingsHTTPForwardingBaseURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpForwardingBaseUrlDescription := ``

	var httpForwardingBaseUrlFlagName string
	if cmdPrefix == "" {
		httpForwardingBaseUrlFlagName = "httpForwardingBaseURL"
	} else {
		httpForwardingBaseUrlFlagName = fmt.Sprintf("%v.httpForwardingBaseURL", cmdPrefix)
	}

	var httpForwardingBaseUrlFlagDefault string

	_ = cmd.PersistentFlags().String(httpForwardingBaseUrlFlagName, httpForwardingBaseUrlFlagDefault, httpForwardingBaseUrlDescription)

	return nil
}

func registerAppSettingsHTTPForwardingExtension(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpForwardingExtensionDescription := ``

	var httpForwardingExtensionFlagName string
	if cmdPrefix == "" {
		httpForwardingExtensionFlagName = "httpForwardingExtension"
	} else {
		httpForwardingExtensionFlagName = fmt.Sprintf("%v.httpForwardingExtension", cmdPrefix)
	}

	var httpForwardingExtensionFlagDefault string

	_ = cmd.PersistentFlags().String(httpForwardingExtensionFlagName, httpForwardingExtensionFlagDefault, httpForwardingExtensionDescription)

	return nil
}

func registerAppSettingsIngestingStreamLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ingestingStreamLimitDescription := ``

	var ingestingStreamLimitFlagName string
	if cmdPrefix == "" {
		ingestingStreamLimitFlagName = "ingestingStreamLimit"
	} else {
		ingestingStreamLimitFlagName = fmt.Sprintf("%v.ingestingStreamLimit", cmdPrefix)
	}

	var ingestingStreamLimitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(ingestingStreamLimitFlagName, ingestingStreamLimitFlagDefault, ingestingStreamLimitDescription)

	return nil
}

func registerAppSettingsIPFilterEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipFilterEnabledDescription := ``

	var ipFilterEnabledFlagName string
	if cmdPrefix == "" {
		ipFilterEnabledFlagName = "ipFilterEnabled"
	} else {
		ipFilterEnabledFlagName = fmt.Sprintf("%v.ipFilterEnabled", cmdPrefix)
	}

	var ipFilterEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ipFilterEnabledFlagName, ipFilterEnabledFlagDefault, ipFilterEnabledDescription)

	return nil
}

func registerAppSettingsIslLDashEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	islLDashEnabledDescription := ``

	var islLDashEnabledFlagName string
	if cmdPrefix == "" {
		islLDashEnabledFlagName = "islLDashEnabled"
	} else {
		islLDashEnabledFlagName = fmt.Sprintf("%v.islLDashEnabled", cmdPrefix)
	}

	var islLDashEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(islLDashEnabledFlagName, islLDashEnabledFlagDefault, islLDashEnabledDescription)

	return nil
}

func registerAppSettingsIslLHLSEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	islLHLSEnabledDescription := ``

	var islLHLSEnabledFlagName string
	if cmdPrefix == "" {
		islLHLSEnabledFlagName = "islLHLSEnabled"
	} else {
		islLHLSEnabledFlagName = fmt.Sprintf("%v.islLHLSEnabled", cmdPrefix)
	}

	var islLHLSEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(islLHLSEnabledFlagName, islLHLSEnabledFlagDefault, islLHLSEnabledDescription)

	return nil
}

func registerAppSettingsJwksURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jwksUrlDescription := ``

	var jwksUrlFlagName string
	if cmdPrefix == "" {
		jwksUrlFlagName = "jwksURL"
	} else {
		jwksUrlFlagName = fmt.Sprintf("%v.jwksURL", cmdPrefix)
	}

	var jwksUrlFlagDefault string

	_ = cmd.PersistentFlags().String(jwksUrlFlagName, jwksUrlFlagDefault, jwksUrlDescription)

	return nil
}

func registerAppSettingsJwtControlEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jwtControlEnabledDescription := ``

	var jwtControlEnabledFlagName string
	if cmdPrefix == "" {
		jwtControlEnabledFlagName = "jwtControlEnabled"
	} else {
		jwtControlEnabledFlagName = fmt.Sprintf("%v.jwtControlEnabled", cmdPrefix)
	}

	var jwtControlEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(jwtControlEnabledFlagName, jwtControlEnabledFlagDefault, jwtControlEnabledDescription)

	return nil
}

func registerAppSettingsJwtSecretKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jwtSecretKeyDescription := ``

	var jwtSecretKeyFlagName string
	if cmdPrefix == "" {
		jwtSecretKeyFlagName = "jwtSecretKey"
	} else {
		jwtSecretKeyFlagName = fmt.Sprintf("%v.jwtSecretKey", cmdPrefix)
	}

	var jwtSecretKeyFlagDefault string

	_ = cmd.PersistentFlags().String(jwtSecretKeyFlagName, jwtSecretKeyFlagDefault, jwtSecretKeyDescription)

	return nil
}

func registerAppSettingsJwtStreamSecretKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jwtStreamSecretKeyDescription := ``

	var jwtStreamSecretKeyFlagName string
	if cmdPrefix == "" {
		jwtStreamSecretKeyFlagName = "jwtStreamSecretKey"
	} else {
		jwtStreamSecretKeyFlagName = fmt.Sprintf("%v.jwtStreamSecretKey", cmdPrefix)
	}

	var jwtStreamSecretKeyFlagDefault string

	_ = cmd.PersistentFlags().String(jwtStreamSecretKeyFlagName, jwtStreamSecretKeyFlagDefault, jwtStreamSecretKeyDescription)

	return nil
}

func registerAppSettingsListenerHookURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	listenerHookUrlDescription := ``

	var listenerHookUrlFlagName string
	if cmdPrefix == "" {
		listenerHookUrlFlagName = "listenerHookURL"
	} else {
		listenerHookUrlFlagName = fmt.Sprintf("%v.listenerHookURL", cmdPrefix)
	}

	var listenerHookUrlFlagDefault string

	_ = cmd.PersistentFlags().String(listenerHookUrlFlagName, listenerHookUrlFlagDefault, listenerHookUrlDescription)

	return nil
}

func registerAppSettingsMaxAnalyzeDurationMS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxAnalyzeDurationMSDescription := ``

	var maxAnalyzeDurationMSFlagName string
	if cmdPrefix == "" {
		maxAnalyzeDurationMSFlagName = "maxAnalyzeDurationMS"
	} else {
		maxAnalyzeDurationMSFlagName = fmt.Sprintf("%v.maxAnalyzeDurationMS", cmdPrefix)
	}

	var maxAnalyzeDurationMSFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxAnalyzeDurationMSFlagName, maxAnalyzeDurationMSFlagDefault, maxAnalyzeDurationMSDescription)

	return nil
}

func registerAppSettingsMaxResolutionAccept(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxResolutionAcceptDescription := ``

	var maxResolutionAcceptFlagName string
	if cmdPrefix == "" {
		maxResolutionAcceptFlagName = "maxResolutionAccept"
	} else {
		maxResolutionAcceptFlagName = fmt.Sprintf("%v.maxResolutionAccept", cmdPrefix)
	}

	var maxResolutionAcceptFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxResolutionAcceptFlagName, maxResolutionAcceptFlagDefault, maxResolutionAcceptDescription)

	return nil
}

func registerAppSettingsMp4MuxingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mp4MuxingEnabledDescription := ``

	var mp4MuxingEnabledFlagName string
	if cmdPrefix == "" {
		mp4MuxingEnabledFlagName = "mp4MuxingEnabled"
	} else {
		mp4MuxingEnabledFlagName = fmt.Sprintf("%v.mp4MuxingEnabled", cmdPrefix)
	}

	var mp4MuxingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(mp4MuxingEnabledFlagName, mp4MuxingEnabledFlagDefault, mp4MuxingEnabledDescription)

	return nil
}

func registerAppSettingsMuxerFinishScript(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	muxerFinishScriptDescription := ``

	var muxerFinishScriptFlagName string
	if cmdPrefix == "" {
		muxerFinishScriptFlagName = "muxerFinishScript"
	} else {
		muxerFinishScriptFlagName = fmt.Sprintf("%v.muxerFinishScript", cmdPrefix)
	}

	var muxerFinishScriptFlagDefault string

	_ = cmd.PersistentFlags().String(muxerFinishScriptFlagName, muxerFinishScriptFlagDefault, muxerFinishScriptDescription)

	return nil
}

func registerAppSettingsMySQLClientPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mySqlClientPathDescription := ``

	var mySqlClientPathFlagName string
	if cmdPrefix == "" {
		mySqlClientPathFlagName = "mySqlClientPath"
	} else {
		mySqlClientPathFlagName = fmt.Sprintf("%v.mySqlClientPath", cmdPrefix)
	}

	var mySqlClientPathFlagDefault string

	_ = cmd.PersistentFlags().String(mySqlClientPathFlagName, mySqlClientPathFlagDefault, mySqlClientPathDescription)

	return nil
}

func registerAppSettingsObjectDetectionEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	objectDetectionEnabledDescription := ``

	var objectDetectionEnabledFlagName string
	if cmdPrefix == "" {
		objectDetectionEnabledFlagName = "objectDetectionEnabled"
	} else {
		objectDetectionEnabledFlagName = fmt.Sprintf("%v.objectDetectionEnabled", cmdPrefix)
	}

	var objectDetectionEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(objectDetectionEnabledFlagName, objectDetectionEnabledFlagDefault, objectDetectionEnabledDescription)

	return nil
}

func registerAppSettingsPacketLossDiffThresholdForSwitchback(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	packetLossDiffThresholdForSwitchbackDescription := ``

	var packetLossDiffThresholdForSwitchbackFlagName string
	if cmdPrefix == "" {
		packetLossDiffThresholdForSwitchbackFlagName = "packetLossDiffThresholdForSwitchback"
	} else {
		packetLossDiffThresholdForSwitchbackFlagName = fmt.Sprintf("%v.packetLossDiffThresholdForSwitchback", cmdPrefix)
	}

	var packetLossDiffThresholdForSwitchbackFlagDefault int32

	_ = cmd.PersistentFlags().Int32(packetLossDiffThresholdForSwitchbackFlagName, packetLossDiffThresholdForSwitchbackFlagDefault, packetLossDiffThresholdForSwitchbackDescription)

	return nil
}

func registerAppSettingsPlayJwtControlEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	playJwtControlEnabledDescription := ``

	var playJwtControlEnabledFlagName string
	if cmdPrefix == "" {
		playJwtControlEnabledFlagName = "playJwtControlEnabled"
	} else {
		playJwtControlEnabledFlagName = fmt.Sprintf("%v.playJwtControlEnabled", cmdPrefix)
	}

	var playJwtControlEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(playJwtControlEnabledFlagName, playJwtControlEnabledFlagDefault, playJwtControlEnabledDescription)

	return nil
}

func registerAppSettingsPlayTokenControlEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	playTokenControlEnabledDescription := ``

	var playTokenControlEnabledFlagName string
	if cmdPrefix == "" {
		playTokenControlEnabledFlagName = "playTokenControlEnabled"
	} else {
		playTokenControlEnabledFlagName = fmt.Sprintf("%v.playTokenControlEnabled", cmdPrefix)
	}

	var playTokenControlEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(playTokenControlEnabledFlagName, playTokenControlEnabledFlagDefault, playTokenControlEnabledDescription)

	return nil
}

func registerAppSettingsPortAllocatorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portAllocatorFlagsDescription := ``

	var portAllocatorFlagsFlagName string
	if cmdPrefix == "" {
		portAllocatorFlagsFlagName = "portAllocatorFlags"
	} else {
		portAllocatorFlagsFlagName = fmt.Sprintf("%v.portAllocatorFlags", cmdPrefix)
	}

	var portAllocatorFlagsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(portAllocatorFlagsFlagName, portAllocatorFlagsFlagDefault, portAllocatorFlagsDescription)

	return nil
}

func registerAppSettingsPreviewHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	previewHeightDescription := ``

	var previewHeightFlagName string
	if cmdPrefix == "" {
		previewHeightFlagName = "previewHeight"
	} else {
		previewHeightFlagName = fmt.Sprintf("%v.previewHeight", cmdPrefix)
	}

	var previewHeightFlagDefault int32

	_ = cmd.PersistentFlags().Int32(previewHeightFlagName, previewHeightFlagDefault, previewHeightDescription)

	return nil
}

func registerAppSettingsPreviewOverwrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	previewOverwriteDescription := ``

	var previewOverwriteFlagName string
	if cmdPrefix == "" {
		previewOverwriteFlagName = "previewOverwrite"
	} else {
		previewOverwriteFlagName = fmt.Sprintf("%v.previewOverwrite", cmdPrefix)
	}

	var previewOverwriteFlagDefault bool

	_ = cmd.PersistentFlags().Bool(previewOverwriteFlagName, previewOverwriteFlagDefault, previewOverwriteDescription)

	return nil
}

func registerAppSettingsPublishJwtControlEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publishJwtControlEnabledDescription := ``

	var publishJwtControlEnabledFlagName string
	if cmdPrefix == "" {
		publishJwtControlEnabledFlagName = "publishJwtControlEnabled"
	} else {
		publishJwtControlEnabledFlagName = fmt.Sprintf("%v.publishJwtControlEnabled", cmdPrefix)
	}

	var publishJwtControlEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publishJwtControlEnabledFlagName, publishJwtControlEnabledFlagDefault, publishJwtControlEnabledDescription)

	return nil
}

func registerAppSettingsPublishTokenControlEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publishTokenControlEnabledDescription := ``

	var publishTokenControlEnabledFlagName string
	if cmdPrefix == "" {
		publishTokenControlEnabledFlagName = "publishTokenControlEnabled"
	} else {
		publishTokenControlEnabledFlagName = fmt.Sprintf("%v.publishTokenControlEnabled", cmdPrefix)
	}

	var publishTokenControlEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publishTokenControlEnabledFlagName, publishTokenControlEnabledFlagDefault, publishTokenControlEnabledDescription)

	return nil
}

func registerAppSettingsPullWarFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pullWarFileDescription := ``

	var pullWarFileFlagName string
	if cmdPrefix == "" {
		pullWarFileFlagName = "pullWarFile"
	} else {
		pullWarFileFlagName = fmt.Sprintf("%v.pullWarFile", cmdPrefix)
	}

	var pullWarFileFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pullWarFileFlagName, pullWarFileFlagDefault, pullWarFileDescription)

	return nil
}

func registerAppSettingsRemoteAllowedCIDR(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteAllowedCIdRDescription := ``

	var remoteAllowedCIdRFlagName string
	if cmdPrefix == "" {
		remoteAllowedCIdRFlagName = "remoteAllowedCIDR"
	} else {
		remoteAllowedCIdRFlagName = fmt.Sprintf("%v.remoteAllowedCIDR", cmdPrefix)
	}

	var remoteAllowedCIdRFlagDefault string

	_ = cmd.PersistentFlags().String(remoteAllowedCIdRFlagName, remoteAllowedCIdRFlagDefault, remoteAllowedCIdRDescription)

	return nil
}

func registerAppSettingsReplaceCandidateAddrWithServerAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replaceCandidateAddrWithServerAddrDescription := ``

	var replaceCandidateAddrWithServerAddrFlagName string
	if cmdPrefix == "" {
		replaceCandidateAddrWithServerAddrFlagName = "replaceCandidateAddrWithServerAddr"
	} else {
		replaceCandidateAddrWithServerAddrFlagName = fmt.Sprintf("%v.replaceCandidateAddrWithServerAddr", cmdPrefix)
	}

	var replaceCandidateAddrWithServerAddrFlagDefault bool

	_ = cmd.PersistentFlags().Bool(replaceCandidateAddrWithServerAddrFlagName, replaceCandidateAddrWithServerAddrFlagDefault, replaceCandidateAddrWithServerAddrDescription)

	return nil
}

func registerAppSettingsRestartStreamFetcherPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restartStreamFetcherPeriodDescription := ``

	var restartStreamFetcherPeriodFlagName string
	if cmdPrefix == "" {
		restartStreamFetcherPeriodFlagName = "restartStreamFetcherPeriod"
	} else {
		restartStreamFetcherPeriodFlagName = fmt.Sprintf("%v.restartStreamFetcherPeriod", cmdPrefix)
	}

	var restartStreamFetcherPeriodFlagDefault int32

	_ = cmd.PersistentFlags().Int32(restartStreamFetcherPeriodFlagName, restartStreamFetcherPeriodFlagDefault, restartStreamFetcherPeriodDescription)

	return nil
}

func registerAppSettingsRtmpIngestBufferTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rtmpIngestBufferTimeMsDescription := ``

	var rtmpIngestBufferTimeMsFlagName string
	if cmdPrefix == "" {
		rtmpIngestBufferTimeMsFlagName = "rtmpIngestBufferTimeMs"
	} else {
		rtmpIngestBufferTimeMsFlagName = fmt.Sprintf("%v.rtmpIngestBufferTimeMs", cmdPrefix)
	}

	var rtmpIngestBufferTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rtmpIngestBufferTimeMsFlagName, rtmpIngestBufferTimeMsFlagDefault, rtmpIngestBufferTimeMsDescription)

	return nil
}

func registerAppSettingsRtspPullTransportType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rtspPullTransportTypeDescription := ``

	var rtspPullTransportTypeFlagName string
	if cmdPrefix == "" {
		rtspPullTransportTypeFlagName = "rtspPullTransportType"
	} else {
		rtspPullTransportTypeFlagName = fmt.Sprintf("%v.rtspPullTransportType", cmdPrefix)
	}

	var rtspPullTransportTypeFlagDefault string

	_ = cmd.PersistentFlags().String(rtspPullTransportTypeFlagName, rtspPullTransportTypeFlagDefault, rtspPullTransportTypeDescription)

	return nil
}

func registerAppSettingsRtspTimeoutDurationMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rtspTimeoutDurationMsDescription := ``

	var rtspTimeoutDurationMsFlagName string
	if cmdPrefix == "" {
		rtspTimeoutDurationMsFlagName = "rtspTimeoutDurationMs"
	} else {
		rtspTimeoutDurationMsFlagName = fmt.Sprintf("%v.rtspTimeoutDurationMs", cmdPrefix)
	}

	var rtspTimeoutDurationMsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(rtspTimeoutDurationMsFlagName, rtspTimeoutDurationMsFlagDefault, rtspTimeoutDurationMsDescription)

	return nil
}

func registerAppSettingsRttMeasurementDiffThresholdForSwitchback(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rttMeasurementDiffThresholdForSwitchbackDescription := ``

	var rttMeasurementDiffThresholdForSwitchbackFlagName string
	if cmdPrefix == "" {
		rttMeasurementDiffThresholdForSwitchbackFlagName = "rttMeasurementDiffThresholdForSwitchback"
	} else {
		rttMeasurementDiffThresholdForSwitchbackFlagName = fmt.Sprintf("%v.rttMeasurementDiffThresholdForSwitchback", cmdPrefix)
	}

	var rttMeasurementDiffThresholdForSwitchbackFlagDefault int32

	_ = cmd.PersistentFlags().Int32(rttMeasurementDiffThresholdForSwitchbackFlagName, rttMeasurementDiffThresholdForSwitchbackFlagDefault, rttMeasurementDiffThresholdForSwitchbackDescription)

	return nil
}

func registerAppSettingsS3AccessKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3AccessKeyDescription := ``

	var s3AccessKeyFlagName string
	if cmdPrefix == "" {
		s3AccessKeyFlagName = "s3AccessKey"
	} else {
		s3AccessKeyFlagName = fmt.Sprintf("%v.s3AccessKey", cmdPrefix)
	}

	var s3AccessKeyFlagDefault string

	_ = cmd.PersistentFlags().String(s3AccessKeyFlagName, s3AccessKeyFlagDefault, s3AccessKeyDescription)

	return nil
}

func registerAppSettingsS3BucketName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3BucketNameDescription := ``

	var s3BucketNameFlagName string
	if cmdPrefix == "" {
		s3BucketNameFlagName = "s3BucketName"
	} else {
		s3BucketNameFlagName = fmt.Sprintf("%v.s3BucketName", cmdPrefix)
	}

	var s3BucketNameFlagDefault string

	_ = cmd.PersistentFlags().String(s3BucketNameFlagName, s3BucketNameFlagDefault, s3BucketNameDescription)

	return nil
}

func registerAppSettingsS3Endpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3EndpointDescription := ``

	var s3EndpointFlagName string
	if cmdPrefix == "" {
		s3EndpointFlagName = "s3Endpoint"
	} else {
		s3EndpointFlagName = fmt.Sprintf("%v.s3Endpoint", cmdPrefix)
	}

	var s3EndpointFlagDefault string

	_ = cmd.PersistentFlags().String(s3EndpointFlagName, s3EndpointFlagDefault, s3EndpointDescription)

	return nil
}

func registerAppSettingsS3Permission(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3PermissionDescription := ``

	var s3PermissionFlagName string
	if cmdPrefix == "" {
		s3PermissionFlagName = "s3Permission"
	} else {
		s3PermissionFlagName = fmt.Sprintf("%v.s3Permission", cmdPrefix)
	}

	var s3PermissionFlagDefault string

	_ = cmd.PersistentFlags().String(s3PermissionFlagName, s3PermissionFlagDefault, s3PermissionDescription)

	return nil
}

func registerAppSettingsS3PreviewsFolderPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3PreviewsFolderPathDescription := ``

	var s3PreviewsFolderPathFlagName string
	if cmdPrefix == "" {
		s3PreviewsFolderPathFlagName = "s3PreviewsFolderPath"
	} else {
		s3PreviewsFolderPathFlagName = fmt.Sprintf("%v.s3PreviewsFolderPath", cmdPrefix)
	}

	var s3PreviewsFolderPathFlagDefault string

	_ = cmd.PersistentFlags().String(s3PreviewsFolderPathFlagName, s3PreviewsFolderPathFlagDefault, s3PreviewsFolderPathDescription)

	return nil
}

func registerAppSettingsS3RecordingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3RecordingEnabledDescription := ``

	var s3RecordingEnabledFlagName string
	if cmdPrefix == "" {
		s3RecordingEnabledFlagName = "s3RecordingEnabled"
	} else {
		s3RecordingEnabledFlagName = fmt.Sprintf("%v.s3RecordingEnabled", cmdPrefix)
	}

	var s3RecordingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(s3RecordingEnabledFlagName, s3RecordingEnabledFlagDefault, s3RecordingEnabledDescription)

	return nil
}

func registerAppSettingsS3RegionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3RegionNameDescription := ``

	var s3RegionNameFlagName string
	if cmdPrefix == "" {
		s3RegionNameFlagName = "s3RegionName"
	} else {
		s3RegionNameFlagName = fmt.Sprintf("%v.s3RegionName", cmdPrefix)
	}

	var s3RegionNameFlagDefault string

	_ = cmd.PersistentFlags().String(s3RegionNameFlagName, s3RegionNameFlagDefault, s3RegionNameDescription)

	return nil
}

func registerAppSettingsS3SecretKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3SecretKeyDescription := ``

	var s3SecretKeyFlagName string
	if cmdPrefix == "" {
		s3SecretKeyFlagName = "s3SecretKey"
	} else {
		s3SecretKeyFlagName = fmt.Sprintf("%v.s3SecretKey", cmdPrefix)
	}

	var s3SecretKeyFlagDefault string

	_ = cmd.PersistentFlags().String(s3SecretKeyFlagName, s3SecretKeyFlagDefault, s3SecretKeyDescription)

	return nil
}

func registerAppSettingsS3StorageClass(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3StorageClassDescription := ``

	var s3StorageClassFlagName string
	if cmdPrefix == "" {
		s3StorageClassFlagName = "s3StorageClass"
	} else {
		s3StorageClassFlagName = fmt.Sprintf("%v.s3StorageClass", cmdPrefix)
	}

	var s3StorageClassFlagDefault string

	_ = cmd.PersistentFlags().String(s3StorageClassFlagName, s3StorageClassFlagDefault, s3StorageClassDescription)

	return nil
}

func registerAppSettingsS3StreamsFolderPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	s3StreamsFolderPathDescription := ``

	var s3StreamsFolderPathFlagName string
	if cmdPrefix == "" {
		s3StreamsFolderPathFlagName = "s3StreamsFolderPath"
	} else {
		s3StreamsFolderPathFlagName = fmt.Sprintf("%v.s3StreamsFolderPath", cmdPrefix)
	}

	var s3StreamsFolderPathFlagDefault string

	_ = cmd.PersistentFlags().String(s3StreamsFolderPathFlagName, s3StreamsFolderPathFlagDefault, s3StreamsFolderPathDescription)

	return nil
}

func registerAppSettingsSignalingAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signalingAddressDescription := ``

	var signalingAddressFlagName string
	if cmdPrefix == "" {
		signalingAddressFlagName = "signalingAddress"
	} else {
		signalingAddressFlagName = fmt.Sprintf("%v.signalingAddress", cmdPrefix)
	}

	var signalingAddressFlagDefault string

	_ = cmd.PersistentFlags().String(signalingAddressFlagName, signalingAddressFlagDefault, signalingAddressDescription)

	return nil
}

func registerAppSettingsSignalingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signalingEnabledDescription := ``

	var signalingEnabledFlagName string
	if cmdPrefix == "" {
		signalingEnabledFlagName = "signalingEnabled"
	} else {
		signalingEnabledFlagName = fmt.Sprintf("%v.signalingEnabled", cmdPrefix)
	}

	var signalingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(signalingEnabledFlagName, signalingEnabledFlagDefault, signalingEnabledDescription)

	return nil
}

func registerAppSettingsStalkerDBPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stalkerDBPasswordDescription := ``

	var stalkerDBPasswordFlagName string
	if cmdPrefix == "" {
		stalkerDBPasswordFlagName = "stalkerDBPassword"
	} else {
		stalkerDBPasswordFlagName = fmt.Sprintf("%v.stalkerDBPassword", cmdPrefix)
	}

	var stalkerDBPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(stalkerDBPasswordFlagName, stalkerDBPasswordFlagDefault, stalkerDBPasswordDescription)

	return nil
}

func registerAppSettingsStalkerDBServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stalkerDBServerDescription := ``

	var stalkerDBServerFlagName string
	if cmdPrefix == "" {
		stalkerDBServerFlagName = "stalkerDBServer"
	} else {
		stalkerDBServerFlagName = fmt.Sprintf("%v.stalkerDBServer", cmdPrefix)
	}

	var stalkerDBServerFlagDefault string

	_ = cmd.PersistentFlags().String(stalkerDBServerFlagName, stalkerDBServerFlagDefault, stalkerDBServerDescription)

	return nil
}

func registerAppSettingsStalkerDBUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stalkerDBUsernameDescription := ``

	var stalkerDBUsernameFlagName string
	if cmdPrefix == "" {
		stalkerDBUsernameFlagName = "stalkerDBUsername"
	} else {
		stalkerDBUsernameFlagName = fmt.Sprintf("%v.stalkerDBUsername", cmdPrefix)
	}

	var stalkerDBUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(stalkerDBUsernameFlagName, stalkerDBUsernameFlagDefault, stalkerDBUsernameDescription)

	return nil
}

func registerAppSettingsStartStreamFetcherAutomatically(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startStreamFetcherAutomaticallyDescription := ``

	var startStreamFetcherAutomaticallyFlagName string
	if cmdPrefix == "" {
		startStreamFetcherAutomaticallyFlagName = "startStreamFetcherAutomatically"
	} else {
		startStreamFetcherAutomaticallyFlagName = fmt.Sprintf("%v.startStreamFetcherAutomatically", cmdPrefix)
	}

	var startStreamFetcherAutomaticallyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(startStreamFetcherAutomaticallyFlagName, startStreamFetcherAutomaticallyFlagDefault, startStreamFetcherAutomaticallyDescription)

	return nil
}

func registerAppSettingsStreamFetcherBufferTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamFetcherBufferTimeDescription := ``

	var streamFetcherBufferTimeFlagName string
	if cmdPrefix == "" {
		streamFetcherBufferTimeFlagName = "streamFetcherBufferTime"
	} else {
		streamFetcherBufferTimeFlagName = fmt.Sprintf("%v.streamFetcherBufferTime", cmdPrefix)
	}

	var streamFetcherBufferTimeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(streamFetcherBufferTimeFlagName, streamFetcherBufferTimeFlagDefault, streamFetcherBufferTimeDescription)

	return nil
}

func registerAppSettingsStunServerURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stunServerUriDescription := ``

	var stunServerUriFlagName string
	if cmdPrefix == "" {
		stunServerUriFlagName = "stunServerURI"
	} else {
		stunServerUriFlagName = fmt.Sprintf("%v.stunServerURI", cmdPrefix)
	}

	var stunServerUriFlagDefault string

	_ = cmd.PersistentFlags().String(stunServerUriFlagName, stunServerUriFlagDefault, stunServerUriDescription)

	return nil
}

func registerAppSettingsTargetLatency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetLatencyDescription := ``

	var targetLatencyFlagName string
	if cmdPrefix == "" {
		targetLatencyFlagName = "targetLatency"
	} else {
		targetLatencyFlagName = fmt.Sprintf("%v.targetLatency", cmdPrefix)
	}

	var targetLatencyFlagDefault string

	_ = cmd.PersistentFlags().String(targetLatencyFlagName, targetLatencyFlagDefault, targetLatencyDescription)

	return nil
}

func registerAppSettingsTimeTokenPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeTokenPeriodDescription := ``

	var timeTokenPeriodFlagName string
	if cmdPrefix == "" {
		timeTokenPeriodFlagName = "timeTokenPeriod"
	} else {
		timeTokenPeriodFlagName = fmt.Sprintf("%v.timeTokenPeriod", cmdPrefix)
	}

	var timeTokenPeriodFlagDefault int32

	_ = cmd.PersistentFlags().Int32(timeTokenPeriodFlagName, timeTokenPeriodFlagDefault, timeTokenPeriodDescription)

	return nil
}

func registerAppSettingsTimeTokenSubscriberOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeTokenSubscriberOnlyDescription := ``

	var timeTokenSubscriberOnlyFlagName string
	if cmdPrefix == "" {
		timeTokenSubscriberOnlyFlagName = "timeTokenSubscriberOnly"
	} else {
		timeTokenSubscriberOnlyFlagName = fmt.Sprintf("%v.timeTokenSubscriberOnly", cmdPrefix)
	}

	var timeTokenSubscriberOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(timeTokenSubscriberOnlyFlagName, timeTokenSubscriberOnlyFlagDefault, timeTokenSubscriberOnlyDescription)

	return nil
}

func registerAppSettingsToBeDeleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	toBeDeletedDescription := ``

	var toBeDeletedFlagName string
	if cmdPrefix == "" {
		toBeDeletedFlagName = "toBeDeleted"
	} else {
		toBeDeletedFlagName = fmt.Sprintf("%v.toBeDeleted", cmdPrefix)
	}

	var toBeDeletedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(toBeDeletedFlagName, toBeDeletedFlagDefault, toBeDeletedDescription)

	return nil
}

func registerAppSettingsTokenHashSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenHashSecretDescription := ``

	var tokenHashSecretFlagName string
	if cmdPrefix == "" {
		tokenHashSecretFlagName = "tokenHashSecret"
	} else {
		tokenHashSecretFlagName = fmt.Sprintf("%v.tokenHashSecret", cmdPrefix)
	}

	var tokenHashSecretFlagDefault string

	_ = cmd.PersistentFlags().String(tokenHashSecretFlagName, tokenHashSecretFlagDefault, tokenHashSecretDescription)

	return nil
}

func registerAppSettingsUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := ``

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "updateTime"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.updateTime", cmdPrefix)
	}

	var updateTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(updateTimeFlagName, updateTimeFlagDefault, updateTimeDescription)

	return nil
}

func registerAppSettingsUploadExtensionsToS3(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadExtensionsToS3Description := ``

	var uploadExtensionsToS3FlagName string
	if cmdPrefix == "" {
		uploadExtensionsToS3FlagName = "uploadExtensionsToS3"
	} else {
		uploadExtensionsToS3FlagName = fmt.Sprintf("%v.uploadExtensionsToS3", cmdPrefix)
	}

	var uploadExtensionsToS3FlagDefault int32

	_ = cmd.PersistentFlags().Int32(uploadExtensionsToS3FlagName, uploadExtensionsToS3FlagDefault, uploadExtensionsToS3Description)

	return nil
}

func registerAppSettingsUseOriginalWebRTCEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useOriginalWebRTCEnabledDescription := ``

	var useOriginalWebRTCEnabledFlagName string
	if cmdPrefix == "" {
		useOriginalWebRTCEnabledFlagName = "useOriginalWebRTCEnabled"
	} else {
		useOriginalWebRTCEnabledFlagName = fmt.Sprintf("%v.useOriginalWebRTCEnabled", cmdPrefix)
	}

	var useOriginalWebRTCEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useOriginalWebRTCEnabledFlagName, useOriginalWebRTCEnabledFlagDefault, useOriginalWebRTCEnabledDescription)

	return nil
}

func registerAppSettingsUseTimelineDashMuxing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useTimelineDashMuxingDescription := ``

	var useTimelineDashMuxingFlagName string
	if cmdPrefix == "" {
		useTimelineDashMuxingFlagName = "useTimelineDashMuxing"
	} else {
		useTimelineDashMuxingFlagName = fmt.Sprintf("%v.useTimelineDashMuxing", cmdPrefix)
	}

	var useTimelineDashMuxingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useTimelineDashMuxingFlagName, useTimelineDashMuxingFlagDefault, useTimelineDashMuxingDescription)

	return nil
}

func registerAppSettingsVodFinishScript(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vodFinishScriptDescription := ``

	var vodFinishScriptFlagName string
	if cmdPrefix == "" {
		vodFinishScriptFlagName = "vodFinishScript"
	} else {
		vodFinishScriptFlagName = fmt.Sprintf("%v.vodFinishScript", cmdPrefix)
	}

	var vodFinishScriptFlagDefault string

	_ = cmd.PersistentFlags().String(vodFinishScriptFlagName, vodFinishScriptFlagDefault, vodFinishScriptDescription)

	return nil
}

func registerAppSettingsVodFolder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vodFolderDescription := ``

	var vodFolderFlagName string
	if cmdPrefix == "" {
		vodFolderFlagName = "vodFolder"
	} else {
		vodFolderFlagName = fmt.Sprintf("%v.vodFolder", cmdPrefix)
	}

	var vodFolderFlagDefault string

	_ = cmd.PersistentFlags().String(vodFolderFlagName, vodFolderFlagDefault, vodFolderDescription)

	return nil
}

func registerAppSettingsVp8Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vp8EnabledDescription := ``

	var vp8EnabledFlagName string
	if cmdPrefix == "" {
		vp8EnabledFlagName = "vp8Enabled"
	} else {
		vp8EnabledFlagName = fmt.Sprintf("%v.vp8Enabled", cmdPrefix)
	}

	var vp8EnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(vp8EnabledFlagName, vp8EnabledFlagDefault, vp8EnabledDescription)

	return nil
}

func registerAppSettingsVp8EncoderDeadline(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vp8EncoderDeadlineDescription := ``

	var vp8EncoderDeadlineFlagName string
	if cmdPrefix == "" {
		vp8EncoderDeadlineFlagName = "vp8EncoderDeadline"
	} else {
		vp8EncoderDeadlineFlagName = fmt.Sprintf("%v.vp8EncoderDeadline", cmdPrefix)
	}

	var vp8EncoderDeadlineFlagDefault string

	_ = cmd.PersistentFlags().String(vp8EncoderDeadlineFlagName, vp8EncoderDeadlineFlagDefault, vp8EncoderDeadlineDescription)

	return nil
}

func registerAppSettingsVp8EncoderSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vp8EncoderSpeedDescription := ``

	var vp8EncoderSpeedFlagName string
	if cmdPrefix == "" {
		vp8EncoderSpeedFlagName = "vp8EncoderSpeed"
	} else {
		vp8EncoderSpeedFlagName = fmt.Sprintf("%v.vp8EncoderSpeed", cmdPrefix)
	}

	var vp8EncoderSpeedFlagDefault int32

	_ = cmd.PersistentFlags().Int32(vp8EncoderSpeedFlagName, vp8EncoderSpeedFlagDefault, vp8EncoderSpeedDescription)

	return nil
}

func registerAppSettingsVp8EncoderThreadCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vp8EncoderThreadCountDescription := ``

	var vp8EncoderThreadCountFlagName string
	if cmdPrefix == "" {
		vp8EncoderThreadCountFlagName = "vp8EncoderThreadCount"
	} else {
		vp8EncoderThreadCountFlagName = fmt.Sprintf("%v.vp8EncoderThreadCount", cmdPrefix)
	}

	var vp8EncoderThreadCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(vp8EncoderThreadCountFlagName, vp8EncoderThreadCountFlagDefault, vp8EncoderThreadCountDescription)

	return nil
}

func registerAppSettingsWarFileOriginServerAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	warFileOriginServerAddressDescription := ``

	var warFileOriginServerAddressFlagName string
	if cmdPrefix == "" {
		warFileOriginServerAddressFlagName = "warFileOriginServerAddress"
	} else {
		warFileOriginServerAddressFlagName = fmt.Sprintf("%v.warFileOriginServerAddress", cmdPrefix)
	}

	var warFileOriginServerAddressFlagDefault string

	_ = cmd.PersistentFlags().String(warFileOriginServerAddressFlagName, warFileOriginServerAddressFlagDefault, warFileOriginServerAddressDescription)

	return nil
}

func registerAppSettingsWebMMuxingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webMMuxingEnabledDescription := ``

	var webMMuxingEnabledFlagName string
	if cmdPrefix == "" {
		webMMuxingEnabledFlagName = "webMMuxingEnabled"
	} else {
		webMMuxingEnabledFlagName = fmt.Sprintf("%v.webMMuxingEnabled", cmdPrefix)
	}

	var webMMuxingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(webMMuxingEnabledFlagName, webMMuxingEnabledFlagDefault, webMMuxingEnabledDescription)

	return nil
}

func registerAppSettingsWebRTCClientStartTimeoutMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCClientStartTimeoutMsDescription := ``

	var webRTCClientStartTimeoutMsFlagName string
	if cmdPrefix == "" {
		webRTCClientStartTimeoutMsFlagName = "webRTCClientStartTimeoutMs"
	} else {
		webRTCClientStartTimeoutMsFlagName = fmt.Sprintf("%v.webRTCClientStartTimeoutMs", cmdPrefix)
	}

	var webRTCClientStartTimeoutMsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCClientStartTimeoutMsFlagName, webRTCClientStartTimeoutMsFlagDefault, webRTCClientStartTimeoutMsDescription)

	return nil
}

func registerAppSettingsWebRTCEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCEnabledDescription := ``

	var webRTCEnabledFlagName string
	if cmdPrefix == "" {
		webRTCEnabledFlagName = "webRTCEnabled"
	} else {
		webRTCEnabledFlagName = fmt.Sprintf("%v.webRTCEnabled", cmdPrefix)
	}

	var webRTCEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(webRTCEnabledFlagName, webRTCEnabledFlagDefault, webRTCEnabledDescription)

	return nil
}

func registerAppSettingsWebRTCFrameRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCFrameRateDescription := ``

	var webRTCFrameRateFlagName string
	if cmdPrefix == "" {
		webRTCFrameRateFlagName = "webRTCFrameRate"
	} else {
		webRTCFrameRateFlagName = fmt.Sprintf("%v.webRTCFrameRate", cmdPrefix)
	}

	var webRTCFrameRateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCFrameRateFlagName, webRTCFrameRateFlagDefault, webRTCFrameRateDescription)

	return nil
}

func registerAppSettingsWebRTCKeyframeTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCKeyframeTimeDescription := ``

	var webRTCKeyframeTimeFlagName string
	if cmdPrefix == "" {
		webRTCKeyframeTimeFlagName = "webRTCKeyframeTime"
	} else {
		webRTCKeyframeTimeFlagName = fmt.Sprintf("%v.webRTCKeyframeTime", cmdPrefix)
	}

	var webRTCKeyframeTimeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCKeyframeTimeFlagName, webRTCKeyframeTimeFlagDefault, webRTCKeyframeTimeDescription)

	return nil
}

func registerAppSettingsWebRTCPortRangeMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCPortRangeMaxDescription := ``

	var webRTCPortRangeMaxFlagName string
	if cmdPrefix == "" {
		webRTCPortRangeMaxFlagName = "webRTCPortRangeMax"
	} else {
		webRTCPortRangeMaxFlagName = fmt.Sprintf("%v.webRTCPortRangeMax", cmdPrefix)
	}

	var webRTCPortRangeMaxFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCPortRangeMaxFlagName, webRTCPortRangeMaxFlagDefault, webRTCPortRangeMaxDescription)

	return nil
}

func registerAppSettingsWebRTCPortRangeMin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCPortRangeMinDescription := ``

	var webRTCPortRangeMinFlagName string
	if cmdPrefix == "" {
		webRTCPortRangeMinFlagName = "webRTCPortRangeMin"
	} else {
		webRTCPortRangeMinFlagName = fmt.Sprintf("%v.webRTCPortRangeMin", cmdPrefix)
	}

	var webRTCPortRangeMinFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCPortRangeMinFlagName, webRTCPortRangeMinFlagDefault, webRTCPortRangeMinDescription)

	return nil
}

func registerAppSettingsWebRTCSdpSemantics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCSdpSemanticsDescription := ``

	var webRTCSdpSemanticsFlagName string
	if cmdPrefix == "" {
		webRTCSdpSemanticsFlagName = "webRTCSdpSemantics"
	} else {
		webRTCSdpSemanticsFlagName = fmt.Sprintf("%v.webRTCSdpSemantics", cmdPrefix)
	}

	var webRTCSdpSemanticsFlagDefault string

	_ = cmd.PersistentFlags().String(webRTCSdpSemanticsFlagName, webRTCSdpSemanticsFlagDefault, webRTCSdpSemanticsDescription)

	return nil
}

func registerAppSettingsWebRTCTCPCandidatesEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCTcpCandidatesEnabledDescription := ``

	var webRTCTcpCandidatesEnabledFlagName string
	if cmdPrefix == "" {
		webRTCTcpCandidatesEnabledFlagName = "webRTCTcpCandidatesEnabled"
	} else {
		webRTCTcpCandidatesEnabledFlagName = fmt.Sprintf("%v.webRTCTcpCandidatesEnabled", cmdPrefix)
	}

	var webRTCTcpCandidatesEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(webRTCTcpCandidatesEnabledFlagName, webRTCTcpCandidatesEnabledFlagDefault, webRTCTcpCandidatesEnabledDescription)

	return nil
}

func registerAppSettingsWebRTCViewerLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCViewerLimitDescription := ``

	var webRTCViewerLimitFlagName string
	if cmdPrefix == "" {
		webRTCViewerLimitFlagName = "webRTCViewerLimit"
	} else {
		webRTCViewerLimitFlagName = fmt.Sprintf("%v.webRTCViewerLimit", cmdPrefix)
	}

	var webRTCViewerLimitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(webRTCViewerLimitFlagName, webRTCViewerLimitFlagDefault, webRTCViewerLimitDescription)

	return nil
}

func registerAppSettingsWebhookAuthenticateURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webhookAuthenticateUrlDescription := ``

	var webhookAuthenticateUrlFlagName string
	if cmdPrefix == "" {
		webhookAuthenticateUrlFlagName = "webhookAuthenticateURL"
	} else {
		webhookAuthenticateUrlFlagName = fmt.Sprintf("%v.webhookAuthenticateURL", cmdPrefix)
	}

	var webhookAuthenticateUrlFlagDefault string

	_ = cmd.PersistentFlags().String(webhookAuthenticateUrlFlagName, webhookAuthenticateUrlFlagDefault, webhookAuthenticateUrlDescription)

	return nil
}

func registerAppSettingsWriteStatsToDatastore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	writeStatsToDatastoreDescription := ``

	var writeStatsToDatastoreFlagName string
	if cmdPrefix == "" {
		writeStatsToDatastoreFlagName = "writeStatsToDatastore"
	} else {
		writeStatsToDatastoreFlagName = fmt.Sprintf("%v.writeStatsToDatastore", cmdPrefix)
	}

	var writeStatsToDatastoreFlagDefault bool

	_ = cmd.PersistentFlags().Bool(writeStatsToDatastoreFlagName, writeStatsToDatastoreFlagDefault, writeStatsToDatastoreDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAppSettingsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aacEncodingEnabledAdded := retrieveAppSettingsAacEncodingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aacEncodingEnabledAdded

	err, acceptOnlyRoomsInDataStoreAdded := retrieveAppSettingsAcceptOnlyRoomsInDataStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptOnlyRoomsInDataStoreAdded

	err, acceptOnlyStreamsInDataStoreAdded := retrieveAppSettingsAcceptOnlyStreamsInDataStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || acceptOnlyStreamsInDataStoreAdded

	err, addDateTimeToMp4FileNameAdded := retrieveAppSettingsAddDateTimeToMp4FileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addDateTimeToMp4FileNameAdded

	err, allowedPublisherCIdRAdded := retrieveAppSettingsAllowedPublisherCIDRFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowedPublisherCIdRAdded

	err, appNameAdded := retrieveAppSettingsAppNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appNameAdded

	err, audioBitrateSFUAdded := retrieveAppSettingsAudioBitrateSFUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioBitrateSFUAdded

	err, collectSocialMediaActivityAdded := retrieveAppSettingsCollectSocialMediaActivityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || collectSocialMediaActivityAdded

	err, constantRateFactorAdded := retrieveAppSettingsConstantRateFactorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || constantRateFactorAdded

	err, createPreviewPeriodAdded := retrieveAppSettingsCreatePreviewPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createPreviewPeriodAdded

	err, dashExtraWindowSizeAdded := retrieveAppSettingsDashExtraWindowSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashExtraWindowSizeAdded

	err, dashFragmentDurationAdded := retrieveAppSettingsDashFragmentDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashFragmentDurationAdded

	err, dashHttpEndpointAdded := retrieveAppSettingsDashHTTPEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashHttpEndpointAdded

	err, dashHttpStreamingAdded := retrieveAppSettingsDashHTTPStreamingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashHttpStreamingAdded

	err, dashMuxingEnabledAdded := retrieveAppSettingsDashMuxingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashMuxingEnabledAdded

	err, dashSegDurationAdded := retrieveAppSettingsDashSegDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashSegDurationAdded

	err, dashWindowSizeAdded := retrieveAppSettingsDashWindowSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashWindowSizeAdded

	err, dataChannelEnabledAdded := retrieveAppSettingsDataChannelEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataChannelEnabledAdded

	err, dataChannelPlayerDistributionAdded := retrieveAppSettingsDataChannelPlayerDistributionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataChannelPlayerDistributionAdded

	err, dataChannelWebHookAdded := retrieveAppSettingsDataChannelWebHookFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataChannelWebHookAdded

	err, defaultDecodersEnabledAdded := retrieveAppSettingsDefaultDecodersEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultDecodersEnabledAdded

	err, deleteDASHFilesOnEndedAdded := retrieveAppSettingsDeleteDASHFilesOnEndedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deleteDASHFilesOnEndedAdded

	err, deleteHLSFilesOnEndedAdded := retrieveAppSettingsDeleteHLSFilesOnEndedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deleteHLSFilesOnEndedAdded

	err, disableIpv6CandidatesAdded := retrieveAppSettingsDisableIPV6CandidatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || disableIpv6CandidatesAdded

	err, enableTimeTokenForPlayAdded := retrieveAppSettingsEnableTimeTokenForPlayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableTimeTokenForPlayAdded

	err, enableTimeTokenForPublishAdded := retrieveAppSettingsEnableTimeTokenForPublishFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableTimeTokenForPublishAdded

	err, encoderLevelAdded := retrieveAppSettingsEncoderLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderLevelAdded

	err, encoderNameAdded := retrieveAppSettingsEncoderNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderNameAdded

	err, encoderPresetAdded := retrieveAppSettingsEncoderPresetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderPresetAdded

	err, encoderProfileAdded := retrieveAppSettingsEncoderProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderProfileAdded

	err, encoderRcAdded := retrieveAppSettingsEncoderRcFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderRcAdded

	err, encoderSelectionPreferenceAdded := retrieveAppSettingsEncoderSelectionPreferenceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderSelectionPreferenceAdded

	err, encoderSettingsAdded := retrieveAppSettingsEncoderSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderSettingsAdded

	err, encoderSettingsStringAdded := retrieveAppSettingsEncoderSettingsStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderSettingsStringAdded

	err, encoderSpecificAdded := retrieveAppSettingsEncoderSpecificFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderSpecificAdded

	err, encoderThreadCountAdded := retrieveAppSettingsEncoderThreadCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderThreadCountAdded

	err, encoderThreadTypeAdded := retrieveAppSettingsEncoderThreadTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderThreadTypeAdded

	err, encodingTimeoutAdded := retrieveAppSettingsEncodingTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encodingTimeoutAdded

	err, endpointHealthCheckPeriodMsAdded := retrieveAppSettingsEndpointHealthCheckPeriodMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointHealthCheckPeriodMsAdded

	err, endpointRepublishLimitAdded := retrieveAppSettingsEndpointRepublishLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointRepublishLimitAdded

	err, excessiveBandwidthAlgorithmEnabledAdded := retrieveAppSettingsExcessiveBandwidthAlgorithmEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || excessiveBandwidthAlgorithmEnabledAdded

	err, excessiveBandwidthCallThresholdAdded := retrieveAppSettingsExcessiveBandwidthCallThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || excessiveBandwidthCallThresholdAdded

	err, excessiveBandwidthValueAdded := retrieveAppSettingsExcessiveBandwidthValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || excessiveBandwidthValueAdded

	err, excessiveBandwithTryCountBeforeSwitchbackAdded := retrieveAppSettingsExcessiveBandwithTryCountBeforeSwitchbackFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || excessiveBandwithTryCountBeforeSwitchbackAdded

	err, fileNameFormatAdded := retrieveAppSettingsFileNameFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileNameFormatAdded

	err, forceAspectRatioInTranscodingAdded := retrieveAppSettingsForceAspectRatioInTranscodingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceAspectRatioInTranscodingAdded

	err, forceDecodingAdded := retrieveAppSettingsForceDecodingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceDecodingAdded

	err, generatePreviewAdded := retrieveAppSettingsGeneratePreviewFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || generatePreviewAdded

	err, gopSizeAdded := retrieveAppSettingsGopSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gopSizeAdded

	err, h264EnabledAdded := retrieveAppSettingsH264EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h264EnabledAdded

	err, h265EnabledAdded := retrieveAppSettingsH265EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h265EnabledAdded

	err, h265EncoderLevelAdded := retrieveAppSettingsH265EncoderLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h265EncoderLevelAdded

	err, h265EncoderPresetAdded := retrieveAppSettingsH265EncoderPresetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h265EncoderPresetAdded

	err, h265EncoderProfileAdded := retrieveAppSettingsH265EncoderProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h265EncoderProfileAdded

	err, h265EncoderRcAdded := retrieveAppSettingsH265EncoderRcFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h265EncoderRcAdded

	err, h265EncoderSpecificAdded := retrieveAppSettingsH265EncoderSpecificFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h265EncoderSpecificAdded

	err, hashControlPlayEnabledAdded := retrieveAppSettingsHashControlPlayEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashControlPlayEnabledAdded

	err, hashControlPublishEnabledAdded := retrieveAppSettingsHashControlPublishEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashControlPublishEnabledAdded

	err, heightRtmpForwardingAdded := retrieveAppSettingsHeightRtmpForwardingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || heightRtmpForwardingAdded

	err, hlsEnabledViaDashAdded := retrieveAppSettingsHlsEnabledViaDashFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsEnabledViaDashAdded

	err, hlsEncryptionKeyInfoFileAdded := retrieveAppSettingsHlsEncryptionKeyInfoFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsEncryptionKeyInfoFileAdded

	err, hlsFlagsAdded := retrieveAppSettingsHlsFlagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsFlagsAdded

	err, hlsListSizeAdded := retrieveAppSettingsHlsListSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsListSizeAdded

	err, hlsMuxingEnabledAdded := retrieveAppSettingsHlsMuxingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsMuxingEnabledAdded

	err, hlsPlayListTypeAdded := retrieveAppSettingsHlsPlayListTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsPlayListTypeAdded

	err, hlsTimeAdded := retrieveAppSettingsHlsTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hlsTimeAdded

	err, httpForwardingBaseUrlAdded := retrieveAppSettingsHTTPForwardingBaseURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpForwardingBaseUrlAdded

	err, httpForwardingExtensionAdded := retrieveAppSettingsHTTPForwardingExtensionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpForwardingExtensionAdded

	err, ingestingStreamLimitAdded := retrieveAppSettingsIngestingStreamLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestingStreamLimitAdded

	err, ipFilterEnabledAdded := retrieveAppSettingsIPFilterEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipFilterEnabledAdded

	err, islLDashEnabledAdded := retrieveAppSettingsIslLDashEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || islLDashEnabledAdded

	err, islLHLSEnabledAdded := retrieveAppSettingsIslLHLSEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || islLHLSEnabledAdded

	err, jwksUrlAdded := retrieveAppSettingsJwksURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jwksUrlAdded

	err, jwtControlEnabledAdded := retrieveAppSettingsJwtControlEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jwtControlEnabledAdded

	err, jwtSecretKeyAdded := retrieveAppSettingsJwtSecretKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jwtSecretKeyAdded

	err, jwtStreamSecretKeyAdded := retrieveAppSettingsJwtStreamSecretKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jwtStreamSecretKeyAdded

	err, listenerHookUrlAdded := retrieveAppSettingsListenerHookURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenerHookUrlAdded

	err, maxAnalyzeDurationMSAdded := retrieveAppSettingsMaxAnalyzeDurationMSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxAnalyzeDurationMSAdded

	err, maxResolutionAcceptAdded := retrieveAppSettingsMaxResolutionAcceptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxResolutionAcceptAdded

	err, mp4MuxingEnabledAdded := retrieveAppSettingsMp4MuxingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mp4MuxingEnabledAdded

	err, muxerFinishScriptAdded := retrieveAppSettingsMuxerFinishScriptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || muxerFinishScriptAdded

	err, mySqlClientPathAdded := retrieveAppSettingsMySQLClientPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mySqlClientPathAdded

	err, objectDetectionEnabledAdded := retrieveAppSettingsObjectDetectionEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || objectDetectionEnabledAdded

	err, packetLossDiffThresholdForSwitchbackAdded := retrieveAppSettingsPacketLossDiffThresholdForSwitchbackFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || packetLossDiffThresholdForSwitchbackAdded

	err, playJwtControlEnabledAdded := retrieveAppSettingsPlayJwtControlEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || playJwtControlEnabledAdded

	err, playTokenControlEnabledAdded := retrieveAppSettingsPlayTokenControlEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || playTokenControlEnabledAdded

	err, portAllocatorFlagsAdded := retrieveAppSettingsPortAllocatorFlagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAllocatorFlagsAdded

	err, previewHeightAdded := retrieveAppSettingsPreviewHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || previewHeightAdded

	err, previewOverwriteAdded := retrieveAppSettingsPreviewOverwriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || previewOverwriteAdded

	err, publishJwtControlEnabledAdded := retrieveAppSettingsPublishJwtControlEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishJwtControlEnabledAdded

	err, publishTokenControlEnabledAdded := retrieveAppSettingsPublishTokenControlEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishTokenControlEnabledAdded

	err, pullWarFileAdded := retrieveAppSettingsPullWarFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pullWarFileAdded

	err, remoteAllowedCIdRAdded := retrieveAppSettingsRemoteAllowedCIDRFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteAllowedCIdRAdded

	err, replaceCandidateAddrWithServerAddrAdded := retrieveAppSettingsReplaceCandidateAddrWithServerAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replaceCandidateAddrWithServerAddrAdded

	err, restartStreamFetcherPeriodAdded := retrieveAppSettingsRestartStreamFetcherPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartStreamFetcherPeriodAdded

	err, rtmpIngestBufferTimeMsAdded := retrieveAppSettingsRtmpIngestBufferTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rtmpIngestBufferTimeMsAdded

	err, rtspPullTransportTypeAdded := retrieveAppSettingsRtspPullTransportTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rtspPullTransportTypeAdded

	err, rtspTimeoutDurationMsAdded := retrieveAppSettingsRtspTimeoutDurationMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rtspTimeoutDurationMsAdded

	err, rttMeasurementDiffThresholdForSwitchbackAdded := retrieveAppSettingsRttMeasurementDiffThresholdForSwitchbackFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rttMeasurementDiffThresholdForSwitchbackAdded

	err, s3AccessKeyAdded := retrieveAppSettingsS3AccessKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3AccessKeyAdded

	err, s3BucketNameAdded := retrieveAppSettingsS3BucketNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3BucketNameAdded

	err, s3EndpointAdded := retrieveAppSettingsS3EndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3EndpointAdded

	err, s3PermissionAdded := retrieveAppSettingsS3PermissionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3PermissionAdded

	err, s3PreviewsFolderPathAdded := retrieveAppSettingsS3PreviewsFolderPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3PreviewsFolderPathAdded

	err, s3RecordingEnabledAdded := retrieveAppSettingsS3RecordingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3RecordingEnabledAdded

	err, s3RegionNameAdded := retrieveAppSettingsS3RegionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3RegionNameAdded

	err, s3SecretKeyAdded := retrieveAppSettingsS3SecretKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3SecretKeyAdded

	err, s3StorageClassAdded := retrieveAppSettingsS3StorageClassFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3StorageClassAdded

	err, s3StreamsFolderPathAdded := retrieveAppSettingsS3StreamsFolderPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || s3StreamsFolderPathAdded

	err, signalingAddressAdded := retrieveAppSettingsSignalingAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalingAddressAdded

	err, signalingEnabledAdded := retrieveAppSettingsSignalingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalingEnabledAdded

	err, stalkerDBPasswordAdded := retrieveAppSettingsStalkerDBPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stalkerDBPasswordAdded

	err, stalkerDBServerAdded := retrieveAppSettingsStalkerDBServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stalkerDBServerAdded

	err, stalkerDBUsernameAdded := retrieveAppSettingsStalkerDBUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stalkerDBUsernameAdded

	err, startStreamFetcherAutomaticallyAdded := retrieveAppSettingsStartStreamFetcherAutomaticallyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startStreamFetcherAutomaticallyAdded

	err, streamFetcherBufferTimeAdded := retrieveAppSettingsStreamFetcherBufferTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamFetcherBufferTimeAdded

	err, stunServerUriAdded := retrieveAppSettingsStunServerURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stunServerUriAdded

	err, targetLatencyAdded := retrieveAppSettingsTargetLatencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetLatencyAdded

	err, timeTokenPeriodAdded := retrieveAppSettingsTimeTokenPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeTokenPeriodAdded

	err, timeTokenSubscriberOnlyAdded := retrieveAppSettingsTimeTokenSubscriberOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeTokenSubscriberOnlyAdded

	err, toBeDeletedAdded := retrieveAppSettingsToBeDeletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || toBeDeletedAdded

	err, tokenHashSecretAdded := retrieveAppSettingsTokenHashSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenHashSecretAdded

	err, updateTimeAdded := retrieveAppSettingsUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	err, uploadExtensionsToS3Added := retrieveAppSettingsUploadExtensionsToS3Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadExtensionsToS3Added

	err, useOriginalWebRTCEnabledAdded := retrieveAppSettingsUseOriginalWebRTCEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useOriginalWebRTCEnabledAdded

	err, useTimelineDashMuxingAdded := retrieveAppSettingsUseTimelineDashMuxingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useTimelineDashMuxingAdded

	err, vodFinishScriptAdded := retrieveAppSettingsVodFinishScriptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vodFinishScriptAdded

	err, vodFolderAdded := retrieveAppSettingsVodFolderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vodFolderAdded

	err, vp8EnabledAdded := retrieveAppSettingsVp8EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vp8EnabledAdded

	err, vp8EncoderDeadlineAdded := retrieveAppSettingsVp8EncoderDeadlineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vp8EncoderDeadlineAdded

	err, vp8EncoderSpeedAdded := retrieveAppSettingsVp8EncoderSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vp8EncoderSpeedAdded

	err, vp8EncoderThreadCountAdded := retrieveAppSettingsVp8EncoderThreadCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vp8EncoderThreadCountAdded

	err, warFileOriginServerAddressAdded := retrieveAppSettingsWarFileOriginServerAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warFileOriginServerAddressAdded

	err, webMMuxingEnabledAdded := retrieveAppSettingsWebMMuxingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webMMuxingEnabledAdded

	err, webRTCClientStartTimeoutMsAdded := retrieveAppSettingsWebRTCClientStartTimeoutMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCClientStartTimeoutMsAdded

	err, webRTCEnabledAdded := retrieveAppSettingsWebRTCEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCEnabledAdded

	err, webRTCFrameRateAdded := retrieveAppSettingsWebRTCFrameRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCFrameRateAdded

	err, webRTCKeyframeTimeAdded := retrieveAppSettingsWebRTCKeyframeTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCKeyframeTimeAdded

	err, webRTCPortRangeMaxAdded := retrieveAppSettingsWebRTCPortRangeMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCPortRangeMaxAdded

	err, webRTCPortRangeMinAdded := retrieveAppSettingsWebRTCPortRangeMinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCPortRangeMinAdded

	err, webRTCSdpSemanticsAdded := retrieveAppSettingsWebRTCSdpSemanticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCSdpSemanticsAdded

	err, webRTCTcpCandidatesEnabledAdded := retrieveAppSettingsWebRTCTCPCandidatesEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCTcpCandidatesEnabledAdded

	err, webRTCViewerLimitAdded := retrieveAppSettingsWebRTCViewerLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCViewerLimitAdded

	err, webhookAuthenticateUrlAdded := retrieveAppSettingsWebhookAuthenticateURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webhookAuthenticateUrlAdded

	err, writeStatsToDatastoreAdded := retrieveAppSettingsWriteStatsToDatastoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || writeStatsToDatastoreAdded

	return nil, retAdded
}

func retrieveAppSettingsAacEncodingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aacEncodingEnabledFlagName := fmt.Sprintf("%v.aacEncodingEnabled", cmdPrefix)
	if cmd.Flags().Changed(aacEncodingEnabledFlagName) {

		var aacEncodingEnabledFlagName string
		if cmdPrefix == "" {
			aacEncodingEnabledFlagName = "aacEncodingEnabled"
		} else {
			aacEncodingEnabledFlagName = fmt.Sprintf("%v.aacEncodingEnabled", cmdPrefix)
		}

		aacEncodingEnabledFlagValue, err := cmd.Flags().GetBool(aacEncodingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.AacEncodingEnabled = aacEncodingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsAcceptOnlyRoomsInDataStoreFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptOnlyRoomsInDataStoreFlagName := fmt.Sprintf("%v.acceptOnlyRoomsInDataStore", cmdPrefix)
	if cmd.Flags().Changed(acceptOnlyRoomsInDataStoreFlagName) {

		var acceptOnlyRoomsInDataStoreFlagName string
		if cmdPrefix == "" {
			acceptOnlyRoomsInDataStoreFlagName = "acceptOnlyRoomsInDataStore"
		} else {
			acceptOnlyRoomsInDataStoreFlagName = fmt.Sprintf("%v.acceptOnlyRoomsInDataStore", cmdPrefix)
		}

		acceptOnlyRoomsInDataStoreFlagValue, err := cmd.Flags().GetBool(acceptOnlyRoomsInDataStoreFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptOnlyRoomsInDataStore = acceptOnlyRoomsInDataStoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsAcceptOnlyStreamsInDataStoreFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	acceptOnlyStreamsInDataStoreFlagName := fmt.Sprintf("%v.acceptOnlyStreamsInDataStore", cmdPrefix)
	if cmd.Flags().Changed(acceptOnlyStreamsInDataStoreFlagName) {

		var acceptOnlyStreamsInDataStoreFlagName string
		if cmdPrefix == "" {
			acceptOnlyStreamsInDataStoreFlagName = "acceptOnlyStreamsInDataStore"
		} else {
			acceptOnlyStreamsInDataStoreFlagName = fmt.Sprintf("%v.acceptOnlyStreamsInDataStore", cmdPrefix)
		}

		acceptOnlyStreamsInDataStoreFlagValue, err := cmd.Flags().GetBool(acceptOnlyStreamsInDataStoreFlagName)
		if err != nil {
			return err, false
		}
		m.AcceptOnlyStreamsInDataStore = acceptOnlyStreamsInDataStoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsAddDateTimeToMp4FileNameFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addDateTimeToMp4FileNameFlagName := fmt.Sprintf("%v.addDateTimeToMp4FileName", cmdPrefix)
	if cmd.Flags().Changed(addDateTimeToMp4FileNameFlagName) {

		var addDateTimeToMp4FileNameFlagName string
		if cmdPrefix == "" {
			addDateTimeToMp4FileNameFlagName = "addDateTimeToMp4FileName"
		} else {
			addDateTimeToMp4FileNameFlagName = fmt.Sprintf("%v.addDateTimeToMp4FileName", cmdPrefix)
		}

		addDateTimeToMp4FileNameFlagValue, err := cmd.Flags().GetBool(addDateTimeToMp4FileNameFlagName)
		if err != nil {
			return err, false
		}
		m.AddDateTimeToMp4FileName = addDateTimeToMp4FileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsAllowedPublisherCIDRFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowedPublisherCIdRFlagName := fmt.Sprintf("%v.allowedPublisherCIDR", cmdPrefix)
	if cmd.Flags().Changed(allowedPublisherCIdRFlagName) {

		var allowedPublisherCIdRFlagName string
		if cmdPrefix == "" {
			allowedPublisherCIdRFlagName = "allowedPublisherCIDR"
		} else {
			allowedPublisherCIdRFlagName = fmt.Sprintf("%v.allowedPublisherCIDR", cmdPrefix)
		}

		allowedPublisherCIdRFlagValue, err := cmd.Flags().GetString(allowedPublisherCIdRFlagName)
		if err != nil {
			return err, false
		}
		m.AllowedPublisherCIDR = allowedPublisherCIdRFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsAppNameFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appNameFlagName := fmt.Sprintf("%v.appName", cmdPrefix)
	if cmd.Flags().Changed(appNameFlagName) {

		var appNameFlagName string
		if cmdPrefix == "" {
			appNameFlagName = "appName"
		} else {
			appNameFlagName = fmt.Sprintf("%v.appName", cmdPrefix)
		}

		appNameFlagValue, err := cmd.Flags().GetString(appNameFlagName)
		if err != nil {
			return err, false
		}
		m.AppName = appNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsAudioBitrateSFUFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioBitrateSFUFlagName := fmt.Sprintf("%v.audioBitrateSFU", cmdPrefix)
	if cmd.Flags().Changed(audioBitrateSFUFlagName) {

		var audioBitrateSFUFlagName string
		if cmdPrefix == "" {
			audioBitrateSFUFlagName = "audioBitrateSFU"
		} else {
			audioBitrateSFUFlagName = fmt.Sprintf("%v.audioBitrateSFU", cmdPrefix)
		}

		audioBitrateSFUFlagValue, err := cmd.Flags().GetInt32(audioBitrateSFUFlagName)
		if err != nil {
			return err, false
		}
		m.AudioBitrateSFU = audioBitrateSFUFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsCollectSocialMediaActivityFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	collectSocialMediaActivityFlagName := fmt.Sprintf("%v.collectSocialMediaActivity", cmdPrefix)
	if cmd.Flags().Changed(collectSocialMediaActivityFlagName) {

		var collectSocialMediaActivityFlagName string
		if cmdPrefix == "" {
			collectSocialMediaActivityFlagName = "collectSocialMediaActivity"
		} else {
			collectSocialMediaActivityFlagName = fmt.Sprintf("%v.collectSocialMediaActivity", cmdPrefix)
		}

		collectSocialMediaActivityFlagValue, err := cmd.Flags().GetBool(collectSocialMediaActivityFlagName)
		if err != nil {
			return err, false
		}
		m.CollectSocialMediaActivity = collectSocialMediaActivityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsConstantRateFactorFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	constantRateFactorFlagName := fmt.Sprintf("%v.constantRateFactor", cmdPrefix)
	if cmd.Flags().Changed(constantRateFactorFlagName) {

		var constantRateFactorFlagName string
		if cmdPrefix == "" {
			constantRateFactorFlagName = "constantRateFactor"
		} else {
			constantRateFactorFlagName = fmt.Sprintf("%v.constantRateFactor", cmdPrefix)
		}

		constantRateFactorFlagValue, err := cmd.Flags().GetString(constantRateFactorFlagName)
		if err != nil {
			return err, false
		}
		m.ConstantRateFactor = constantRateFactorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsCreatePreviewPeriodFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createPreviewPeriodFlagName := fmt.Sprintf("%v.createPreviewPeriod", cmdPrefix)
	if cmd.Flags().Changed(createPreviewPeriodFlagName) {

		var createPreviewPeriodFlagName string
		if cmdPrefix == "" {
			createPreviewPeriodFlagName = "createPreviewPeriod"
		} else {
			createPreviewPeriodFlagName = fmt.Sprintf("%v.createPreviewPeriod", cmdPrefix)
		}

		createPreviewPeriodFlagValue, err := cmd.Flags().GetInt32(createPreviewPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.CreatePreviewPeriod = createPreviewPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashExtraWindowSizeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashExtraWindowSizeFlagName := fmt.Sprintf("%v.dashExtraWindowSize", cmdPrefix)
	if cmd.Flags().Changed(dashExtraWindowSizeFlagName) {

		var dashExtraWindowSizeFlagName string
		if cmdPrefix == "" {
			dashExtraWindowSizeFlagName = "dashExtraWindowSize"
		} else {
			dashExtraWindowSizeFlagName = fmt.Sprintf("%v.dashExtraWindowSize", cmdPrefix)
		}

		dashExtraWindowSizeFlagValue, err := cmd.Flags().GetString(dashExtraWindowSizeFlagName)
		if err != nil {
			return err, false
		}
		m.DashExtraWindowSize = dashExtraWindowSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashFragmentDurationFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashFragmentDurationFlagName := fmt.Sprintf("%v.dashFragmentDuration", cmdPrefix)
	if cmd.Flags().Changed(dashFragmentDurationFlagName) {

		var dashFragmentDurationFlagName string
		if cmdPrefix == "" {
			dashFragmentDurationFlagName = "dashFragmentDuration"
		} else {
			dashFragmentDurationFlagName = fmt.Sprintf("%v.dashFragmentDuration", cmdPrefix)
		}

		dashFragmentDurationFlagValue, err := cmd.Flags().GetString(dashFragmentDurationFlagName)
		if err != nil {
			return err, false
		}
		m.DashFragmentDuration = dashFragmentDurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashHTTPEndpointFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashHttpEndpointFlagName := fmt.Sprintf("%v.dashHttpEndpoint", cmdPrefix)
	if cmd.Flags().Changed(dashHttpEndpointFlagName) {

		var dashHttpEndpointFlagName string
		if cmdPrefix == "" {
			dashHttpEndpointFlagName = "dashHttpEndpoint"
		} else {
			dashHttpEndpointFlagName = fmt.Sprintf("%v.dashHttpEndpoint", cmdPrefix)
		}

		dashHttpEndpointFlagValue, err := cmd.Flags().GetString(dashHttpEndpointFlagName)
		if err != nil {
			return err, false
		}
		m.DashHTTPEndpoint = dashHttpEndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashHTTPStreamingFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashHttpStreamingFlagName := fmt.Sprintf("%v.dashHttpStreaming", cmdPrefix)
	if cmd.Flags().Changed(dashHttpStreamingFlagName) {

		var dashHttpStreamingFlagName string
		if cmdPrefix == "" {
			dashHttpStreamingFlagName = "dashHttpStreaming"
		} else {
			dashHttpStreamingFlagName = fmt.Sprintf("%v.dashHttpStreaming", cmdPrefix)
		}

		dashHttpStreamingFlagValue, err := cmd.Flags().GetBool(dashHttpStreamingFlagName)
		if err != nil {
			return err, false
		}
		m.DashHTTPStreaming = dashHttpStreamingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashMuxingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashMuxingEnabledFlagName := fmt.Sprintf("%v.dashMuxingEnabled", cmdPrefix)
	if cmd.Flags().Changed(dashMuxingEnabledFlagName) {

		var dashMuxingEnabledFlagName string
		if cmdPrefix == "" {
			dashMuxingEnabledFlagName = "dashMuxingEnabled"
		} else {
			dashMuxingEnabledFlagName = fmt.Sprintf("%v.dashMuxingEnabled", cmdPrefix)
		}

		dashMuxingEnabledFlagValue, err := cmd.Flags().GetBool(dashMuxingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DashMuxingEnabled = dashMuxingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashSegDurationFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashSegDurationFlagName := fmt.Sprintf("%v.dashSegDuration", cmdPrefix)
	if cmd.Flags().Changed(dashSegDurationFlagName) {

		var dashSegDurationFlagName string
		if cmdPrefix == "" {
			dashSegDurationFlagName = "dashSegDuration"
		} else {
			dashSegDurationFlagName = fmt.Sprintf("%v.dashSegDuration", cmdPrefix)
		}

		dashSegDurationFlagValue, err := cmd.Flags().GetString(dashSegDurationFlagName)
		if err != nil {
			return err, false
		}
		m.DashSegDuration = dashSegDurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDashWindowSizeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashWindowSizeFlagName := fmt.Sprintf("%v.dashWindowSize", cmdPrefix)
	if cmd.Flags().Changed(dashWindowSizeFlagName) {

		var dashWindowSizeFlagName string
		if cmdPrefix == "" {
			dashWindowSizeFlagName = "dashWindowSize"
		} else {
			dashWindowSizeFlagName = fmt.Sprintf("%v.dashWindowSize", cmdPrefix)
		}

		dashWindowSizeFlagValue, err := cmd.Flags().GetString(dashWindowSizeFlagName)
		if err != nil {
			return err, false
		}
		m.DashWindowSize = dashWindowSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDataChannelEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataChannelEnabledFlagName := fmt.Sprintf("%v.dataChannelEnabled", cmdPrefix)
	if cmd.Flags().Changed(dataChannelEnabledFlagName) {

		var dataChannelEnabledFlagName string
		if cmdPrefix == "" {
			dataChannelEnabledFlagName = "dataChannelEnabled"
		} else {
			dataChannelEnabledFlagName = fmt.Sprintf("%v.dataChannelEnabled", cmdPrefix)
		}

		dataChannelEnabledFlagValue, err := cmd.Flags().GetBool(dataChannelEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DataChannelEnabled = dataChannelEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDataChannelPlayerDistributionFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataChannelPlayerDistributionFlagName := fmt.Sprintf("%v.dataChannelPlayerDistribution", cmdPrefix)
	if cmd.Flags().Changed(dataChannelPlayerDistributionFlagName) {

		var dataChannelPlayerDistributionFlagName string
		if cmdPrefix == "" {
			dataChannelPlayerDistributionFlagName = "dataChannelPlayerDistribution"
		} else {
			dataChannelPlayerDistributionFlagName = fmt.Sprintf("%v.dataChannelPlayerDistribution", cmdPrefix)
		}

		dataChannelPlayerDistributionFlagValue, err := cmd.Flags().GetString(dataChannelPlayerDistributionFlagName)
		if err != nil {
			return err, false
		}
		m.DataChannelPlayerDistribution = dataChannelPlayerDistributionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDataChannelWebHookFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataChannelWebHookFlagName := fmt.Sprintf("%v.dataChannelWebHook", cmdPrefix)
	if cmd.Flags().Changed(dataChannelWebHookFlagName) {

		var dataChannelWebHookFlagName string
		if cmdPrefix == "" {
			dataChannelWebHookFlagName = "dataChannelWebHook"
		} else {
			dataChannelWebHookFlagName = fmt.Sprintf("%v.dataChannelWebHook", cmdPrefix)
		}

		dataChannelWebHookFlagValue, err := cmd.Flags().GetString(dataChannelWebHookFlagName)
		if err != nil {
			return err, false
		}
		m.DataChannelWebHook = dataChannelWebHookFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDefaultDecodersEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultDecodersEnabledFlagName := fmt.Sprintf("%v.defaultDecodersEnabled", cmdPrefix)
	if cmd.Flags().Changed(defaultDecodersEnabledFlagName) {

		var defaultDecodersEnabledFlagName string
		if cmdPrefix == "" {
			defaultDecodersEnabledFlagName = "defaultDecodersEnabled"
		} else {
			defaultDecodersEnabledFlagName = fmt.Sprintf("%v.defaultDecodersEnabled", cmdPrefix)
		}

		defaultDecodersEnabledFlagValue, err := cmd.Flags().GetBool(defaultDecodersEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultDecodersEnabled = defaultDecodersEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDeleteDASHFilesOnEndedFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deleteDASHFilesOnEndedFlagName := fmt.Sprintf("%v.deleteDASHFilesOnEnded", cmdPrefix)
	if cmd.Flags().Changed(deleteDASHFilesOnEndedFlagName) {

		var deleteDASHFilesOnEndedFlagName string
		if cmdPrefix == "" {
			deleteDASHFilesOnEndedFlagName = "deleteDASHFilesOnEnded"
		} else {
			deleteDASHFilesOnEndedFlagName = fmt.Sprintf("%v.deleteDASHFilesOnEnded", cmdPrefix)
		}

		deleteDASHFilesOnEndedFlagValue, err := cmd.Flags().GetBool(deleteDASHFilesOnEndedFlagName)
		if err != nil {
			return err, false
		}
		m.DeleteDASHFilesOnEnded = deleteDASHFilesOnEndedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDeleteHLSFilesOnEndedFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deleteHLSFilesOnEndedFlagName := fmt.Sprintf("%v.deleteHLSFilesOnEnded", cmdPrefix)
	if cmd.Flags().Changed(deleteHLSFilesOnEndedFlagName) {

		var deleteHLSFilesOnEndedFlagName string
		if cmdPrefix == "" {
			deleteHLSFilesOnEndedFlagName = "deleteHLSFilesOnEnded"
		} else {
			deleteHLSFilesOnEndedFlagName = fmt.Sprintf("%v.deleteHLSFilesOnEnded", cmdPrefix)
		}

		deleteHLSFilesOnEndedFlagValue, err := cmd.Flags().GetBool(deleteHLSFilesOnEndedFlagName)
		if err != nil {
			return err, false
		}
		m.DeleteHLSFilesOnEnded = deleteHLSFilesOnEndedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsDisableIPV6CandidatesFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	disableIpv6CandidatesFlagName := fmt.Sprintf("%v.disableIPv6Candidates", cmdPrefix)
	if cmd.Flags().Changed(disableIpv6CandidatesFlagName) {

		var disableIpv6CandidatesFlagName string
		if cmdPrefix == "" {
			disableIpv6CandidatesFlagName = "disableIPv6Candidates"
		} else {
			disableIpv6CandidatesFlagName = fmt.Sprintf("%v.disableIPv6Candidates", cmdPrefix)
		}

		disableIpv6CandidatesFlagValue, err := cmd.Flags().GetBool(disableIpv6CandidatesFlagName)
		if err != nil {
			return err, false
		}
		m.DisableIPV6Candidates = disableIpv6CandidatesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEnableTimeTokenForPlayFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableTimeTokenForPlayFlagName := fmt.Sprintf("%v.enableTimeTokenForPlay", cmdPrefix)
	if cmd.Flags().Changed(enableTimeTokenForPlayFlagName) {

		var enableTimeTokenForPlayFlagName string
		if cmdPrefix == "" {
			enableTimeTokenForPlayFlagName = "enableTimeTokenForPlay"
		} else {
			enableTimeTokenForPlayFlagName = fmt.Sprintf("%v.enableTimeTokenForPlay", cmdPrefix)
		}

		enableTimeTokenForPlayFlagValue, err := cmd.Flags().GetBool(enableTimeTokenForPlayFlagName)
		if err != nil {
			return err, false
		}
		m.EnableTimeTokenForPlay = enableTimeTokenForPlayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEnableTimeTokenForPublishFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableTimeTokenForPublishFlagName := fmt.Sprintf("%v.enableTimeTokenForPublish", cmdPrefix)
	if cmd.Flags().Changed(enableTimeTokenForPublishFlagName) {

		var enableTimeTokenForPublishFlagName string
		if cmdPrefix == "" {
			enableTimeTokenForPublishFlagName = "enableTimeTokenForPublish"
		} else {
			enableTimeTokenForPublishFlagName = fmt.Sprintf("%v.enableTimeTokenForPublish", cmdPrefix)
		}

		enableTimeTokenForPublishFlagValue, err := cmd.Flags().GetBool(enableTimeTokenForPublishFlagName)
		if err != nil {
			return err, false
		}
		m.EnableTimeTokenForPublish = enableTimeTokenForPublishFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderLevelFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderLevelFlagName := fmt.Sprintf("%v.encoderLevel", cmdPrefix)
	if cmd.Flags().Changed(encoderLevelFlagName) {

		var encoderLevelFlagName string
		if cmdPrefix == "" {
			encoderLevelFlagName = "encoderLevel"
		} else {
			encoderLevelFlagName = fmt.Sprintf("%v.encoderLevel", cmdPrefix)
		}

		encoderLevelFlagValue, err := cmd.Flags().GetString(encoderLevelFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderLevel = encoderLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderNameFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderNameFlagName := fmt.Sprintf("%v.encoderName", cmdPrefix)
	if cmd.Flags().Changed(encoderNameFlagName) {

		var encoderNameFlagName string
		if cmdPrefix == "" {
			encoderNameFlagName = "encoderName"
		} else {
			encoderNameFlagName = fmt.Sprintf("%v.encoderName", cmdPrefix)
		}

		encoderNameFlagValue, err := cmd.Flags().GetString(encoderNameFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderName = encoderNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderPresetFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderPresetFlagName := fmt.Sprintf("%v.encoderPreset", cmdPrefix)
	if cmd.Flags().Changed(encoderPresetFlagName) {

		var encoderPresetFlagName string
		if cmdPrefix == "" {
			encoderPresetFlagName = "encoderPreset"
		} else {
			encoderPresetFlagName = fmt.Sprintf("%v.encoderPreset", cmdPrefix)
		}

		encoderPresetFlagValue, err := cmd.Flags().GetString(encoderPresetFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderPreset = encoderPresetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderProfileFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderProfileFlagName := fmt.Sprintf("%v.encoderProfile", cmdPrefix)
	if cmd.Flags().Changed(encoderProfileFlagName) {

		var encoderProfileFlagName string
		if cmdPrefix == "" {
			encoderProfileFlagName = "encoderProfile"
		} else {
			encoderProfileFlagName = fmt.Sprintf("%v.encoderProfile", cmdPrefix)
		}

		encoderProfileFlagValue, err := cmd.Flags().GetString(encoderProfileFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderProfile = encoderProfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderRcFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderRcFlagName := fmt.Sprintf("%v.encoderRc", cmdPrefix)
	if cmd.Flags().Changed(encoderRcFlagName) {

		var encoderRcFlagName string
		if cmdPrefix == "" {
			encoderRcFlagName = "encoderRc"
		} else {
			encoderRcFlagName = fmt.Sprintf("%v.encoderRc", cmdPrefix)
		}

		encoderRcFlagValue, err := cmd.Flags().GetString(encoderRcFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderRc = encoderRcFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderSelectionPreferenceFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderSelectionPreferenceFlagName := fmt.Sprintf("%v.encoderSelectionPreference", cmdPrefix)
	if cmd.Flags().Changed(encoderSelectionPreferenceFlagName) {

		var encoderSelectionPreferenceFlagName string
		if cmdPrefix == "" {
			encoderSelectionPreferenceFlagName = "encoderSelectionPreference"
		} else {
			encoderSelectionPreferenceFlagName = fmt.Sprintf("%v.encoderSelectionPreference", cmdPrefix)
		}

		encoderSelectionPreferenceFlagValue, err := cmd.Flags().GetString(encoderSelectionPreferenceFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderSelectionPreference = encoderSelectionPreferenceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderSettingsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderSettingsFlagName := fmt.Sprintf("%v.encoderSettings", cmdPrefix)
	if cmd.Flags().Changed(encoderSettingsFlagName) {
		// warning: encoderSettings array type []*EncoderSettings is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderSettingsStringFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderSettingsStringFlagName := fmt.Sprintf("%v.encoderSettingsString", cmdPrefix)
	if cmd.Flags().Changed(encoderSettingsStringFlagName) {

		var encoderSettingsStringFlagName string
		if cmdPrefix == "" {
			encoderSettingsStringFlagName = "encoderSettingsString"
		} else {
			encoderSettingsStringFlagName = fmt.Sprintf("%v.encoderSettingsString", cmdPrefix)
		}

		encoderSettingsStringFlagValue, err := cmd.Flags().GetString(encoderSettingsStringFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderSettingsString = encoderSettingsStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderSpecificFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderSpecificFlagName := fmt.Sprintf("%v.encoderSpecific", cmdPrefix)
	if cmd.Flags().Changed(encoderSpecificFlagName) {

		var encoderSpecificFlagName string
		if cmdPrefix == "" {
			encoderSpecificFlagName = "encoderSpecific"
		} else {
			encoderSpecificFlagName = fmt.Sprintf("%v.encoderSpecific", cmdPrefix)
		}

		encoderSpecificFlagValue, err := cmd.Flags().GetString(encoderSpecificFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderSpecific = encoderSpecificFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderThreadCountFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderThreadCountFlagName := fmt.Sprintf("%v.encoderThreadCount", cmdPrefix)
	if cmd.Flags().Changed(encoderThreadCountFlagName) {

		var encoderThreadCountFlagName string
		if cmdPrefix == "" {
			encoderThreadCountFlagName = "encoderThreadCount"
		} else {
			encoderThreadCountFlagName = fmt.Sprintf("%v.encoderThreadCount", cmdPrefix)
		}

		encoderThreadCountFlagValue, err := cmd.Flags().GetInt32(encoderThreadCountFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderThreadCount = encoderThreadCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncoderThreadTypeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderThreadTypeFlagName := fmt.Sprintf("%v.encoderThreadType", cmdPrefix)
	if cmd.Flags().Changed(encoderThreadTypeFlagName) {

		var encoderThreadTypeFlagName string
		if cmdPrefix == "" {
			encoderThreadTypeFlagName = "encoderThreadType"
		} else {
			encoderThreadTypeFlagName = fmt.Sprintf("%v.encoderThreadType", cmdPrefix)
		}

		encoderThreadTypeFlagValue, err := cmd.Flags().GetInt32(encoderThreadTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderThreadType = encoderThreadTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEncodingTimeoutFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encodingTimeoutFlagName := fmt.Sprintf("%v.encodingTimeout", cmdPrefix)
	if cmd.Flags().Changed(encodingTimeoutFlagName) {

		var encodingTimeoutFlagName string
		if cmdPrefix == "" {
			encodingTimeoutFlagName = "encodingTimeout"
		} else {
			encodingTimeoutFlagName = fmt.Sprintf("%v.encodingTimeout", cmdPrefix)
		}

		encodingTimeoutFlagValue, err := cmd.Flags().GetInt32(encodingTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.EncodingTimeout = encodingTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEndpointHealthCheckPeriodMsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointHealthCheckPeriodMsFlagName := fmt.Sprintf("%v.endpointHealthCheckPeriodMs", cmdPrefix)
	if cmd.Flags().Changed(endpointHealthCheckPeriodMsFlagName) {

		var endpointHealthCheckPeriodMsFlagName string
		if cmdPrefix == "" {
			endpointHealthCheckPeriodMsFlagName = "endpointHealthCheckPeriodMs"
		} else {
			endpointHealthCheckPeriodMsFlagName = fmt.Sprintf("%v.endpointHealthCheckPeriodMs", cmdPrefix)
		}

		endpointHealthCheckPeriodMsFlagValue, err := cmd.Flags().GetInt32(endpointHealthCheckPeriodMsFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointHealthCheckPeriodMs = endpointHealthCheckPeriodMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsEndpointRepublishLimitFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointRepublishLimitFlagName := fmt.Sprintf("%v.endpointRepublishLimit", cmdPrefix)
	if cmd.Flags().Changed(endpointRepublishLimitFlagName) {

		var endpointRepublishLimitFlagName string
		if cmdPrefix == "" {
			endpointRepublishLimitFlagName = "endpointRepublishLimit"
		} else {
			endpointRepublishLimitFlagName = fmt.Sprintf("%v.endpointRepublishLimit", cmdPrefix)
		}

		endpointRepublishLimitFlagValue, err := cmd.Flags().GetInt32(endpointRepublishLimitFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointRepublishLimit = endpointRepublishLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsExcessiveBandwidthAlgorithmEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	excessiveBandwidthAlgorithmEnabledFlagName := fmt.Sprintf("%v.excessiveBandwidthAlgorithmEnabled", cmdPrefix)
	if cmd.Flags().Changed(excessiveBandwidthAlgorithmEnabledFlagName) {

		var excessiveBandwidthAlgorithmEnabledFlagName string
		if cmdPrefix == "" {
			excessiveBandwidthAlgorithmEnabledFlagName = "excessiveBandwidthAlgorithmEnabled"
		} else {
			excessiveBandwidthAlgorithmEnabledFlagName = fmt.Sprintf("%v.excessiveBandwidthAlgorithmEnabled", cmdPrefix)
		}

		excessiveBandwidthAlgorithmEnabledFlagValue, err := cmd.Flags().GetBool(excessiveBandwidthAlgorithmEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.ExcessiveBandwidthAlgorithmEnabled = excessiveBandwidthAlgorithmEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsExcessiveBandwidthCallThresholdFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	excessiveBandwidthCallThresholdFlagName := fmt.Sprintf("%v.excessiveBandwidthCallThreshold", cmdPrefix)
	if cmd.Flags().Changed(excessiveBandwidthCallThresholdFlagName) {

		var excessiveBandwidthCallThresholdFlagName string
		if cmdPrefix == "" {
			excessiveBandwidthCallThresholdFlagName = "excessiveBandwidthCallThreshold"
		} else {
			excessiveBandwidthCallThresholdFlagName = fmt.Sprintf("%v.excessiveBandwidthCallThreshold", cmdPrefix)
		}

		excessiveBandwidthCallThresholdFlagValue, err := cmd.Flags().GetInt32(excessiveBandwidthCallThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.ExcessiveBandwidthCallThreshold = excessiveBandwidthCallThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsExcessiveBandwidthValueFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	excessiveBandwidthValueFlagName := fmt.Sprintf("%v.excessiveBandwidthValue", cmdPrefix)
	if cmd.Flags().Changed(excessiveBandwidthValueFlagName) {

		var excessiveBandwidthValueFlagName string
		if cmdPrefix == "" {
			excessiveBandwidthValueFlagName = "excessiveBandwidthValue"
		} else {
			excessiveBandwidthValueFlagName = fmt.Sprintf("%v.excessiveBandwidthValue", cmdPrefix)
		}

		excessiveBandwidthValueFlagValue, err := cmd.Flags().GetInt32(excessiveBandwidthValueFlagName)
		if err != nil {
			return err, false
		}
		m.ExcessiveBandwidthValue = excessiveBandwidthValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsExcessiveBandwithTryCountBeforeSwitchbackFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	excessiveBandwithTryCountBeforeSwitchbackFlagName := fmt.Sprintf("%v.excessiveBandwithTryCountBeforeSwitchback", cmdPrefix)
	if cmd.Flags().Changed(excessiveBandwithTryCountBeforeSwitchbackFlagName) {

		var excessiveBandwithTryCountBeforeSwitchbackFlagName string
		if cmdPrefix == "" {
			excessiveBandwithTryCountBeforeSwitchbackFlagName = "excessiveBandwithTryCountBeforeSwitchback"
		} else {
			excessiveBandwithTryCountBeforeSwitchbackFlagName = fmt.Sprintf("%v.excessiveBandwithTryCountBeforeSwitchback", cmdPrefix)
		}

		excessiveBandwithTryCountBeforeSwitchbackFlagValue, err := cmd.Flags().GetInt32(excessiveBandwithTryCountBeforeSwitchbackFlagName)
		if err != nil {
			return err, false
		}
		m.ExcessiveBandwithTryCountBeforeSwitchback = excessiveBandwithTryCountBeforeSwitchbackFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsFileNameFormatFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileNameFormatFlagName := fmt.Sprintf("%v.fileNameFormat", cmdPrefix)
	if cmd.Flags().Changed(fileNameFormatFlagName) {

		var fileNameFormatFlagName string
		if cmdPrefix == "" {
			fileNameFormatFlagName = "fileNameFormat"
		} else {
			fileNameFormatFlagName = fmt.Sprintf("%v.fileNameFormat", cmdPrefix)
		}

		fileNameFormatFlagValue, err := cmd.Flags().GetString(fileNameFormatFlagName)
		if err != nil {
			return err, false
		}
		m.FileNameFormat = fileNameFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsForceAspectRatioInTranscodingFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceAspectRatioInTranscodingFlagName := fmt.Sprintf("%v.forceAspectRatioInTranscoding", cmdPrefix)
	if cmd.Flags().Changed(forceAspectRatioInTranscodingFlagName) {

		var forceAspectRatioInTranscodingFlagName string
		if cmdPrefix == "" {
			forceAspectRatioInTranscodingFlagName = "forceAspectRatioInTranscoding"
		} else {
			forceAspectRatioInTranscodingFlagName = fmt.Sprintf("%v.forceAspectRatioInTranscoding", cmdPrefix)
		}

		forceAspectRatioInTranscodingFlagValue, err := cmd.Flags().GetBool(forceAspectRatioInTranscodingFlagName)
		if err != nil {
			return err, false
		}
		m.ForceAspectRatioInTranscoding = forceAspectRatioInTranscodingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsForceDecodingFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceDecodingFlagName := fmt.Sprintf("%v.forceDecoding", cmdPrefix)
	if cmd.Flags().Changed(forceDecodingFlagName) {

		var forceDecodingFlagName string
		if cmdPrefix == "" {
			forceDecodingFlagName = "forceDecoding"
		} else {
			forceDecodingFlagName = fmt.Sprintf("%v.forceDecoding", cmdPrefix)
		}

		forceDecodingFlagValue, err := cmd.Flags().GetBool(forceDecodingFlagName)
		if err != nil {
			return err, false
		}
		m.ForceDecoding = forceDecodingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsGeneratePreviewFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	generatePreviewFlagName := fmt.Sprintf("%v.generatePreview", cmdPrefix)
	if cmd.Flags().Changed(generatePreviewFlagName) {

		var generatePreviewFlagName string
		if cmdPrefix == "" {
			generatePreviewFlagName = "generatePreview"
		} else {
			generatePreviewFlagName = fmt.Sprintf("%v.generatePreview", cmdPrefix)
		}

		generatePreviewFlagValue, err := cmd.Flags().GetBool(generatePreviewFlagName)
		if err != nil {
			return err, false
		}
		m.GeneratePreview = generatePreviewFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsGopSizeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gopSizeFlagName := fmt.Sprintf("%v.gopSize", cmdPrefix)
	if cmd.Flags().Changed(gopSizeFlagName) {

		var gopSizeFlagName string
		if cmdPrefix == "" {
			gopSizeFlagName = "gopSize"
		} else {
			gopSizeFlagName = fmt.Sprintf("%v.gopSize", cmdPrefix)
		}

		gopSizeFlagValue, err := cmd.Flags().GetInt32(gopSizeFlagName)
		if err != nil {
			return err, false
		}
		m.GopSize = gopSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH264EnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h264EnabledFlagName := fmt.Sprintf("%v.h264Enabled", cmdPrefix)
	if cmd.Flags().Changed(h264EnabledFlagName) {

		var h264EnabledFlagName string
		if cmdPrefix == "" {
			h264EnabledFlagName = "h264Enabled"
		} else {
			h264EnabledFlagName = fmt.Sprintf("%v.h264Enabled", cmdPrefix)
		}

		h264EnabledFlagValue, err := cmd.Flags().GetBool(h264EnabledFlagName)
		if err != nil {
			return err, false
		}
		m.H264Enabled = h264EnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH265EnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h265EnabledFlagName := fmt.Sprintf("%v.h265Enabled", cmdPrefix)
	if cmd.Flags().Changed(h265EnabledFlagName) {

		var h265EnabledFlagName string
		if cmdPrefix == "" {
			h265EnabledFlagName = "h265Enabled"
		} else {
			h265EnabledFlagName = fmt.Sprintf("%v.h265Enabled", cmdPrefix)
		}

		h265EnabledFlagValue, err := cmd.Flags().GetBool(h265EnabledFlagName)
		if err != nil {
			return err, false
		}
		m.H265Enabled = h265EnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH265EncoderLevelFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h265EncoderLevelFlagName := fmt.Sprintf("%v.h265EncoderLevel", cmdPrefix)
	if cmd.Flags().Changed(h265EncoderLevelFlagName) {

		var h265EncoderLevelFlagName string
		if cmdPrefix == "" {
			h265EncoderLevelFlagName = "h265EncoderLevel"
		} else {
			h265EncoderLevelFlagName = fmt.Sprintf("%v.h265EncoderLevel", cmdPrefix)
		}

		h265EncoderLevelFlagValue, err := cmd.Flags().GetString(h265EncoderLevelFlagName)
		if err != nil {
			return err, false
		}
		m.H265EncoderLevel = h265EncoderLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH265EncoderPresetFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h265EncoderPresetFlagName := fmt.Sprintf("%v.h265EncoderPreset", cmdPrefix)
	if cmd.Flags().Changed(h265EncoderPresetFlagName) {

		var h265EncoderPresetFlagName string
		if cmdPrefix == "" {
			h265EncoderPresetFlagName = "h265EncoderPreset"
		} else {
			h265EncoderPresetFlagName = fmt.Sprintf("%v.h265EncoderPreset", cmdPrefix)
		}

		h265EncoderPresetFlagValue, err := cmd.Flags().GetString(h265EncoderPresetFlagName)
		if err != nil {
			return err, false
		}
		m.H265EncoderPreset = h265EncoderPresetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH265EncoderProfileFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h265EncoderProfileFlagName := fmt.Sprintf("%v.h265EncoderProfile", cmdPrefix)
	if cmd.Flags().Changed(h265EncoderProfileFlagName) {

		var h265EncoderProfileFlagName string
		if cmdPrefix == "" {
			h265EncoderProfileFlagName = "h265EncoderProfile"
		} else {
			h265EncoderProfileFlagName = fmt.Sprintf("%v.h265EncoderProfile", cmdPrefix)
		}

		h265EncoderProfileFlagValue, err := cmd.Flags().GetString(h265EncoderProfileFlagName)
		if err != nil {
			return err, false
		}
		m.H265EncoderProfile = h265EncoderProfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH265EncoderRcFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h265EncoderRcFlagName := fmt.Sprintf("%v.h265EncoderRc", cmdPrefix)
	if cmd.Flags().Changed(h265EncoderRcFlagName) {

		var h265EncoderRcFlagName string
		if cmdPrefix == "" {
			h265EncoderRcFlagName = "h265EncoderRc"
		} else {
			h265EncoderRcFlagName = fmt.Sprintf("%v.h265EncoderRc", cmdPrefix)
		}

		h265EncoderRcFlagValue, err := cmd.Flags().GetString(h265EncoderRcFlagName)
		if err != nil {
			return err, false
		}
		m.H265EncoderRc = h265EncoderRcFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsH265EncoderSpecificFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h265EncoderSpecificFlagName := fmt.Sprintf("%v.h265EncoderSpecific", cmdPrefix)
	if cmd.Flags().Changed(h265EncoderSpecificFlagName) {

		var h265EncoderSpecificFlagName string
		if cmdPrefix == "" {
			h265EncoderSpecificFlagName = "h265EncoderSpecific"
		} else {
			h265EncoderSpecificFlagName = fmt.Sprintf("%v.h265EncoderSpecific", cmdPrefix)
		}

		h265EncoderSpecificFlagValue, err := cmd.Flags().GetString(h265EncoderSpecificFlagName)
		if err != nil {
			return err, false
		}
		m.H265EncoderSpecific = h265EncoderSpecificFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHashControlPlayEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashControlPlayEnabledFlagName := fmt.Sprintf("%v.hashControlPlayEnabled", cmdPrefix)
	if cmd.Flags().Changed(hashControlPlayEnabledFlagName) {

		var hashControlPlayEnabledFlagName string
		if cmdPrefix == "" {
			hashControlPlayEnabledFlagName = "hashControlPlayEnabled"
		} else {
			hashControlPlayEnabledFlagName = fmt.Sprintf("%v.hashControlPlayEnabled", cmdPrefix)
		}

		hashControlPlayEnabledFlagValue, err := cmd.Flags().GetBool(hashControlPlayEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.HashControlPlayEnabled = hashControlPlayEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHashControlPublishEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashControlPublishEnabledFlagName := fmt.Sprintf("%v.hashControlPublishEnabled", cmdPrefix)
	if cmd.Flags().Changed(hashControlPublishEnabledFlagName) {

		var hashControlPublishEnabledFlagName string
		if cmdPrefix == "" {
			hashControlPublishEnabledFlagName = "hashControlPublishEnabled"
		} else {
			hashControlPublishEnabledFlagName = fmt.Sprintf("%v.hashControlPublishEnabled", cmdPrefix)
		}

		hashControlPublishEnabledFlagValue, err := cmd.Flags().GetBool(hashControlPublishEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.HashControlPublishEnabled = hashControlPublishEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHeightRtmpForwardingFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	heightRtmpForwardingFlagName := fmt.Sprintf("%v.heightRtmpForwarding", cmdPrefix)
	if cmd.Flags().Changed(heightRtmpForwardingFlagName) {

		var heightRtmpForwardingFlagName string
		if cmdPrefix == "" {
			heightRtmpForwardingFlagName = "heightRtmpForwarding"
		} else {
			heightRtmpForwardingFlagName = fmt.Sprintf("%v.heightRtmpForwarding", cmdPrefix)
		}

		heightRtmpForwardingFlagValue, err := cmd.Flags().GetInt32(heightRtmpForwardingFlagName)
		if err != nil {
			return err, false
		}
		m.HeightRtmpForwarding = heightRtmpForwardingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsEnabledViaDashFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsEnabledViaDashFlagName := fmt.Sprintf("%v.hlsEnabledViaDash", cmdPrefix)
	if cmd.Flags().Changed(hlsEnabledViaDashFlagName) {

		var hlsEnabledViaDashFlagName string
		if cmdPrefix == "" {
			hlsEnabledViaDashFlagName = "hlsEnabledViaDash"
		} else {
			hlsEnabledViaDashFlagName = fmt.Sprintf("%v.hlsEnabledViaDash", cmdPrefix)
		}

		hlsEnabledViaDashFlagValue, err := cmd.Flags().GetBool(hlsEnabledViaDashFlagName)
		if err != nil {
			return err, false
		}
		m.HlsEnabledViaDash = hlsEnabledViaDashFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsEncryptionKeyInfoFileFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsEncryptionKeyInfoFileFlagName := fmt.Sprintf("%v.hlsEncryptionKeyInfoFile", cmdPrefix)
	if cmd.Flags().Changed(hlsEncryptionKeyInfoFileFlagName) {

		var hlsEncryptionKeyInfoFileFlagName string
		if cmdPrefix == "" {
			hlsEncryptionKeyInfoFileFlagName = "hlsEncryptionKeyInfoFile"
		} else {
			hlsEncryptionKeyInfoFileFlagName = fmt.Sprintf("%v.hlsEncryptionKeyInfoFile", cmdPrefix)
		}

		hlsEncryptionKeyInfoFileFlagValue, err := cmd.Flags().GetString(hlsEncryptionKeyInfoFileFlagName)
		if err != nil {
			return err, false
		}
		m.HlsEncryptionKeyInfoFile = hlsEncryptionKeyInfoFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsFlagsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsFlagsFlagName := fmt.Sprintf("%v.hlsFlags", cmdPrefix)
	if cmd.Flags().Changed(hlsFlagsFlagName) {

		var hlsFlagsFlagName string
		if cmdPrefix == "" {
			hlsFlagsFlagName = "hlsFlags"
		} else {
			hlsFlagsFlagName = fmt.Sprintf("%v.hlsFlags", cmdPrefix)
		}

		hlsFlagsFlagValue, err := cmd.Flags().GetString(hlsFlagsFlagName)
		if err != nil {
			return err, false
		}
		m.HlsFlags = hlsFlagsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsListSizeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsListSizeFlagName := fmt.Sprintf("%v.hlsListSize", cmdPrefix)
	if cmd.Flags().Changed(hlsListSizeFlagName) {

		var hlsListSizeFlagName string
		if cmdPrefix == "" {
			hlsListSizeFlagName = "hlsListSize"
		} else {
			hlsListSizeFlagName = fmt.Sprintf("%v.hlsListSize", cmdPrefix)
		}

		hlsListSizeFlagValue, err := cmd.Flags().GetString(hlsListSizeFlagName)
		if err != nil {
			return err, false
		}
		m.HlsListSize = hlsListSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsMuxingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsMuxingEnabledFlagName := fmt.Sprintf("%v.hlsMuxingEnabled", cmdPrefix)
	if cmd.Flags().Changed(hlsMuxingEnabledFlagName) {

		var hlsMuxingEnabledFlagName string
		if cmdPrefix == "" {
			hlsMuxingEnabledFlagName = "hlsMuxingEnabled"
		} else {
			hlsMuxingEnabledFlagName = fmt.Sprintf("%v.hlsMuxingEnabled", cmdPrefix)
		}

		hlsMuxingEnabledFlagValue, err := cmd.Flags().GetBool(hlsMuxingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.HlsMuxingEnabled = hlsMuxingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsPlayListTypeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsPlayListTypeFlagName := fmt.Sprintf("%v.hlsPlayListType", cmdPrefix)
	if cmd.Flags().Changed(hlsPlayListTypeFlagName) {

		var hlsPlayListTypeFlagName string
		if cmdPrefix == "" {
			hlsPlayListTypeFlagName = "hlsPlayListType"
		} else {
			hlsPlayListTypeFlagName = fmt.Sprintf("%v.hlsPlayListType", cmdPrefix)
		}

		hlsPlayListTypeFlagValue, err := cmd.Flags().GetString(hlsPlayListTypeFlagName)
		if err != nil {
			return err, false
		}
		m.HlsPlayListType = hlsPlayListTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHlsTimeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hlsTimeFlagName := fmt.Sprintf("%v.hlsTime", cmdPrefix)
	if cmd.Flags().Changed(hlsTimeFlagName) {

		var hlsTimeFlagName string
		if cmdPrefix == "" {
			hlsTimeFlagName = "hlsTime"
		} else {
			hlsTimeFlagName = fmt.Sprintf("%v.hlsTime", cmdPrefix)
		}

		hlsTimeFlagValue, err := cmd.Flags().GetString(hlsTimeFlagName)
		if err != nil {
			return err, false
		}
		m.HlsTime = hlsTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHTTPForwardingBaseURLFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpForwardingBaseUrlFlagName := fmt.Sprintf("%v.httpForwardingBaseURL", cmdPrefix)
	if cmd.Flags().Changed(httpForwardingBaseUrlFlagName) {

		var httpForwardingBaseUrlFlagName string
		if cmdPrefix == "" {
			httpForwardingBaseUrlFlagName = "httpForwardingBaseURL"
		} else {
			httpForwardingBaseUrlFlagName = fmt.Sprintf("%v.httpForwardingBaseURL", cmdPrefix)
		}

		httpForwardingBaseUrlFlagValue, err := cmd.Flags().GetString(httpForwardingBaseUrlFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPForwardingBaseURL = httpForwardingBaseUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsHTTPForwardingExtensionFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpForwardingExtensionFlagName := fmt.Sprintf("%v.httpForwardingExtension", cmdPrefix)
	if cmd.Flags().Changed(httpForwardingExtensionFlagName) {

		var httpForwardingExtensionFlagName string
		if cmdPrefix == "" {
			httpForwardingExtensionFlagName = "httpForwardingExtension"
		} else {
			httpForwardingExtensionFlagName = fmt.Sprintf("%v.httpForwardingExtension", cmdPrefix)
		}

		httpForwardingExtensionFlagValue, err := cmd.Flags().GetString(httpForwardingExtensionFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPForwardingExtension = httpForwardingExtensionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsIngestingStreamLimitFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingestingStreamLimitFlagName := fmt.Sprintf("%v.ingestingStreamLimit", cmdPrefix)
	if cmd.Flags().Changed(ingestingStreamLimitFlagName) {

		var ingestingStreamLimitFlagName string
		if cmdPrefix == "" {
			ingestingStreamLimitFlagName = "ingestingStreamLimit"
		} else {
			ingestingStreamLimitFlagName = fmt.Sprintf("%v.ingestingStreamLimit", cmdPrefix)
		}

		ingestingStreamLimitFlagValue, err := cmd.Flags().GetInt32(ingestingStreamLimitFlagName)
		if err != nil {
			return err, false
		}
		m.IngestingStreamLimit = ingestingStreamLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsIPFilterEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipFilterEnabledFlagName := fmt.Sprintf("%v.ipFilterEnabled", cmdPrefix)
	if cmd.Flags().Changed(ipFilterEnabledFlagName) {

		var ipFilterEnabledFlagName string
		if cmdPrefix == "" {
			ipFilterEnabledFlagName = "ipFilterEnabled"
		} else {
			ipFilterEnabledFlagName = fmt.Sprintf("%v.ipFilterEnabled", cmdPrefix)
		}

		ipFilterEnabledFlagValue, err := cmd.Flags().GetBool(ipFilterEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IPFilterEnabled = ipFilterEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsIslLDashEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	islLDashEnabledFlagName := fmt.Sprintf("%v.islLDashEnabled", cmdPrefix)
	if cmd.Flags().Changed(islLDashEnabledFlagName) {

		var islLDashEnabledFlagName string
		if cmdPrefix == "" {
			islLDashEnabledFlagName = "islLDashEnabled"
		} else {
			islLDashEnabledFlagName = fmt.Sprintf("%v.islLDashEnabled", cmdPrefix)
		}

		islLDashEnabledFlagValue, err := cmd.Flags().GetBool(islLDashEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IslLDashEnabled = islLDashEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsIslLHLSEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	islLHLSEnabledFlagName := fmt.Sprintf("%v.islLHLSEnabled", cmdPrefix)
	if cmd.Flags().Changed(islLHLSEnabledFlagName) {

		var islLHLSEnabledFlagName string
		if cmdPrefix == "" {
			islLHLSEnabledFlagName = "islLHLSEnabled"
		} else {
			islLHLSEnabledFlagName = fmt.Sprintf("%v.islLHLSEnabled", cmdPrefix)
		}

		islLHLSEnabledFlagValue, err := cmd.Flags().GetBool(islLHLSEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IslLHLSEnabled = islLHLSEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsJwksURLFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jwksUrlFlagName := fmt.Sprintf("%v.jwksURL", cmdPrefix)
	if cmd.Flags().Changed(jwksUrlFlagName) {

		var jwksUrlFlagName string
		if cmdPrefix == "" {
			jwksUrlFlagName = "jwksURL"
		} else {
			jwksUrlFlagName = fmt.Sprintf("%v.jwksURL", cmdPrefix)
		}

		jwksUrlFlagValue, err := cmd.Flags().GetString(jwksUrlFlagName)
		if err != nil {
			return err, false
		}
		m.JwksURL = jwksUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsJwtControlEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jwtControlEnabledFlagName := fmt.Sprintf("%v.jwtControlEnabled", cmdPrefix)
	if cmd.Flags().Changed(jwtControlEnabledFlagName) {

		var jwtControlEnabledFlagName string
		if cmdPrefix == "" {
			jwtControlEnabledFlagName = "jwtControlEnabled"
		} else {
			jwtControlEnabledFlagName = fmt.Sprintf("%v.jwtControlEnabled", cmdPrefix)
		}

		jwtControlEnabledFlagValue, err := cmd.Flags().GetBool(jwtControlEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.JwtControlEnabled = jwtControlEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsJwtSecretKeyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jwtSecretKeyFlagName := fmt.Sprintf("%v.jwtSecretKey", cmdPrefix)
	if cmd.Flags().Changed(jwtSecretKeyFlagName) {

		var jwtSecretKeyFlagName string
		if cmdPrefix == "" {
			jwtSecretKeyFlagName = "jwtSecretKey"
		} else {
			jwtSecretKeyFlagName = fmt.Sprintf("%v.jwtSecretKey", cmdPrefix)
		}

		jwtSecretKeyFlagValue, err := cmd.Flags().GetString(jwtSecretKeyFlagName)
		if err != nil {
			return err, false
		}
		m.JwtSecretKey = jwtSecretKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsJwtStreamSecretKeyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jwtStreamSecretKeyFlagName := fmt.Sprintf("%v.jwtStreamSecretKey", cmdPrefix)
	if cmd.Flags().Changed(jwtStreamSecretKeyFlagName) {

		var jwtStreamSecretKeyFlagName string
		if cmdPrefix == "" {
			jwtStreamSecretKeyFlagName = "jwtStreamSecretKey"
		} else {
			jwtStreamSecretKeyFlagName = fmt.Sprintf("%v.jwtStreamSecretKey", cmdPrefix)
		}

		jwtStreamSecretKeyFlagValue, err := cmd.Flags().GetString(jwtStreamSecretKeyFlagName)
		if err != nil {
			return err, false
		}
		m.JwtStreamSecretKey = jwtStreamSecretKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsListenerHookURLFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	listenerHookUrlFlagName := fmt.Sprintf("%v.listenerHookURL", cmdPrefix)
	if cmd.Flags().Changed(listenerHookUrlFlagName) {

		var listenerHookUrlFlagName string
		if cmdPrefix == "" {
			listenerHookUrlFlagName = "listenerHookURL"
		} else {
			listenerHookUrlFlagName = fmt.Sprintf("%v.listenerHookURL", cmdPrefix)
		}

		listenerHookUrlFlagValue, err := cmd.Flags().GetString(listenerHookUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ListenerHookURL = listenerHookUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsMaxAnalyzeDurationMSFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxAnalyzeDurationMSFlagName := fmt.Sprintf("%v.maxAnalyzeDurationMS", cmdPrefix)
	if cmd.Flags().Changed(maxAnalyzeDurationMSFlagName) {

		var maxAnalyzeDurationMSFlagName string
		if cmdPrefix == "" {
			maxAnalyzeDurationMSFlagName = "maxAnalyzeDurationMS"
		} else {
			maxAnalyzeDurationMSFlagName = fmt.Sprintf("%v.maxAnalyzeDurationMS", cmdPrefix)
		}

		maxAnalyzeDurationMSFlagValue, err := cmd.Flags().GetInt32(maxAnalyzeDurationMSFlagName)
		if err != nil {
			return err, false
		}
		m.MaxAnalyzeDurationMS = maxAnalyzeDurationMSFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsMaxResolutionAcceptFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxResolutionAcceptFlagName := fmt.Sprintf("%v.maxResolutionAccept", cmdPrefix)
	if cmd.Flags().Changed(maxResolutionAcceptFlagName) {

		var maxResolutionAcceptFlagName string
		if cmdPrefix == "" {
			maxResolutionAcceptFlagName = "maxResolutionAccept"
		} else {
			maxResolutionAcceptFlagName = fmt.Sprintf("%v.maxResolutionAccept", cmdPrefix)
		}

		maxResolutionAcceptFlagValue, err := cmd.Flags().GetInt32(maxResolutionAcceptFlagName)
		if err != nil {
			return err, false
		}
		m.MaxResolutionAccept = maxResolutionAcceptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsMp4MuxingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mp4MuxingEnabledFlagName := fmt.Sprintf("%v.mp4MuxingEnabled", cmdPrefix)
	if cmd.Flags().Changed(mp4MuxingEnabledFlagName) {

		var mp4MuxingEnabledFlagName string
		if cmdPrefix == "" {
			mp4MuxingEnabledFlagName = "mp4MuxingEnabled"
		} else {
			mp4MuxingEnabledFlagName = fmt.Sprintf("%v.mp4MuxingEnabled", cmdPrefix)
		}

		mp4MuxingEnabledFlagValue, err := cmd.Flags().GetBool(mp4MuxingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.Mp4MuxingEnabled = mp4MuxingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsMuxerFinishScriptFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	muxerFinishScriptFlagName := fmt.Sprintf("%v.muxerFinishScript", cmdPrefix)
	if cmd.Flags().Changed(muxerFinishScriptFlagName) {

		var muxerFinishScriptFlagName string
		if cmdPrefix == "" {
			muxerFinishScriptFlagName = "muxerFinishScript"
		} else {
			muxerFinishScriptFlagName = fmt.Sprintf("%v.muxerFinishScript", cmdPrefix)
		}

		muxerFinishScriptFlagValue, err := cmd.Flags().GetString(muxerFinishScriptFlagName)
		if err != nil {
			return err, false
		}
		m.MuxerFinishScript = muxerFinishScriptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsMySQLClientPathFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mySqlClientPathFlagName := fmt.Sprintf("%v.mySqlClientPath", cmdPrefix)
	if cmd.Flags().Changed(mySqlClientPathFlagName) {

		var mySqlClientPathFlagName string
		if cmdPrefix == "" {
			mySqlClientPathFlagName = "mySqlClientPath"
		} else {
			mySqlClientPathFlagName = fmt.Sprintf("%v.mySqlClientPath", cmdPrefix)
		}

		mySqlClientPathFlagValue, err := cmd.Flags().GetString(mySqlClientPathFlagName)
		if err != nil {
			return err, false
		}
		m.MySQLClientPath = mySqlClientPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsObjectDetectionEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	objectDetectionEnabledFlagName := fmt.Sprintf("%v.objectDetectionEnabled", cmdPrefix)
	if cmd.Flags().Changed(objectDetectionEnabledFlagName) {

		var objectDetectionEnabledFlagName string
		if cmdPrefix == "" {
			objectDetectionEnabledFlagName = "objectDetectionEnabled"
		} else {
			objectDetectionEnabledFlagName = fmt.Sprintf("%v.objectDetectionEnabled", cmdPrefix)
		}

		objectDetectionEnabledFlagValue, err := cmd.Flags().GetBool(objectDetectionEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.ObjectDetectionEnabled = objectDetectionEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPacketLossDiffThresholdForSwitchbackFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	packetLossDiffThresholdForSwitchbackFlagName := fmt.Sprintf("%v.packetLossDiffThresholdForSwitchback", cmdPrefix)
	if cmd.Flags().Changed(packetLossDiffThresholdForSwitchbackFlagName) {

		var packetLossDiffThresholdForSwitchbackFlagName string
		if cmdPrefix == "" {
			packetLossDiffThresholdForSwitchbackFlagName = "packetLossDiffThresholdForSwitchback"
		} else {
			packetLossDiffThresholdForSwitchbackFlagName = fmt.Sprintf("%v.packetLossDiffThresholdForSwitchback", cmdPrefix)
		}

		packetLossDiffThresholdForSwitchbackFlagValue, err := cmd.Flags().GetInt32(packetLossDiffThresholdForSwitchbackFlagName)
		if err != nil {
			return err, false
		}
		m.PacketLossDiffThresholdForSwitchback = packetLossDiffThresholdForSwitchbackFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPlayJwtControlEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	playJwtControlEnabledFlagName := fmt.Sprintf("%v.playJwtControlEnabled", cmdPrefix)
	if cmd.Flags().Changed(playJwtControlEnabledFlagName) {

		var playJwtControlEnabledFlagName string
		if cmdPrefix == "" {
			playJwtControlEnabledFlagName = "playJwtControlEnabled"
		} else {
			playJwtControlEnabledFlagName = fmt.Sprintf("%v.playJwtControlEnabled", cmdPrefix)
		}

		playJwtControlEnabledFlagValue, err := cmd.Flags().GetBool(playJwtControlEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PlayJwtControlEnabled = playJwtControlEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPlayTokenControlEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	playTokenControlEnabledFlagName := fmt.Sprintf("%v.playTokenControlEnabled", cmdPrefix)
	if cmd.Flags().Changed(playTokenControlEnabledFlagName) {

		var playTokenControlEnabledFlagName string
		if cmdPrefix == "" {
			playTokenControlEnabledFlagName = "playTokenControlEnabled"
		} else {
			playTokenControlEnabledFlagName = fmt.Sprintf("%v.playTokenControlEnabled", cmdPrefix)
		}

		playTokenControlEnabledFlagValue, err := cmd.Flags().GetBool(playTokenControlEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PlayTokenControlEnabled = playTokenControlEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPortAllocatorFlagsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portAllocatorFlagsFlagName := fmt.Sprintf("%v.portAllocatorFlags", cmdPrefix)
	if cmd.Flags().Changed(portAllocatorFlagsFlagName) {

		var portAllocatorFlagsFlagName string
		if cmdPrefix == "" {
			portAllocatorFlagsFlagName = "portAllocatorFlags"
		} else {
			portAllocatorFlagsFlagName = fmt.Sprintf("%v.portAllocatorFlags", cmdPrefix)
		}

		portAllocatorFlagsFlagValue, err := cmd.Flags().GetInt32(portAllocatorFlagsFlagName)
		if err != nil {
			return err, false
		}
		m.PortAllocatorFlags = portAllocatorFlagsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPreviewHeightFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	previewHeightFlagName := fmt.Sprintf("%v.previewHeight", cmdPrefix)
	if cmd.Flags().Changed(previewHeightFlagName) {

		var previewHeightFlagName string
		if cmdPrefix == "" {
			previewHeightFlagName = "previewHeight"
		} else {
			previewHeightFlagName = fmt.Sprintf("%v.previewHeight", cmdPrefix)
		}

		previewHeightFlagValue, err := cmd.Flags().GetInt32(previewHeightFlagName)
		if err != nil {
			return err, false
		}
		m.PreviewHeight = previewHeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPreviewOverwriteFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	previewOverwriteFlagName := fmt.Sprintf("%v.previewOverwrite", cmdPrefix)
	if cmd.Flags().Changed(previewOverwriteFlagName) {

		var previewOverwriteFlagName string
		if cmdPrefix == "" {
			previewOverwriteFlagName = "previewOverwrite"
		} else {
			previewOverwriteFlagName = fmt.Sprintf("%v.previewOverwrite", cmdPrefix)
		}

		previewOverwriteFlagValue, err := cmd.Flags().GetBool(previewOverwriteFlagName)
		if err != nil {
			return err, false
		}
		m.PreviewOverwrite = previewOverwriteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPublishJwtControlEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publishJwtControlEnabledFlagName := fmt.Sprintf("%v.publishJwtControlEnabled", cmdPrefix)
	if cmd.Flags().Changed(publishJwtControlEnabledFlagName) {

		var publishJwtControlEnabledFlagName string
		if cmdPrefix == "" {
			publishJwtControlEnabledFlagName = "publishJwtControlEnabled"
		} else {
			publishJwtControlEnabledFlagName = fmt.Sprintf("%v.publishJwtControlEnabled", cmdPrefix)
		}

		publishJwtControlEnabledFlagValue, err := cmd.Flags().GetBool(publishJwtControlEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PublishJwtControlEnabled = publishJwtControlEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPublishTokenControlEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publishTokenControlEnabledFlagName := fmt.Sprintf("%v.publishTokenControlEnabled", cmdPrefix)
	if cmd.Flags().Changed(publishTokenControlEnabledFlagName) {

		var publishTokenControlEnabledFlagName string
		if cmdPrefix == "" {
			publishTokenControlEnabledFlagName = "publishTokenControlEnabled"
		} else {
			publishTokenControlEnabledFlagName = fmt.Sprintf("%v.publishTokenControlEnabled", cmdPrefix)
		}

		publishTokenControlEnabledFlagValue, err := cmd.Flags().GetBool(publishTokenControlEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PublishTokenControlEnabled = publishTokenControlEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsPullWarFileFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pullWarFileFlagName := fmt.Sprintf("%v.pullWarFile", cmdPrefix)
	if cmd.Flags().Changed(pullWarFileFlagName) {

		var pullWarFileFlagName string
		if cmdPrefix == "" {
			pullWarFileFlagName = "pullWarFile"
		} else {
			pullWarFileFlagName = fmt.Sprintf("%v.pullWarFile", cmdPrefix)
		}

		pullWarFileFlagValue, err := cmd.Flags().GetBool(pullWarFileFlagName)
		if err != nil {
			return err, false
		}
		m.PullWarFile = pullWarFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsRemoteAllowedCIDRFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteAllowedCIdRFlagName := fmt.Sprintf("%v.remoteAllowedCIDR", cmdPrefix)
	if cmd.Flags().Changed(remoteAllowedCIdRFlagName) {

		var remoteAllowedCIdRFlagName string
		if cmdPrefix == "" {
			remoteAllowedCIdRFlagName = "remoteAllowedCIDR"
		} else {
			remoteAllowedCIdRFlagName = fmt.Sprintf("%v.remoteAllowedCIDR", cmdPrefix)
		}

		remoteAllowedCIdRFlagValue, err := cmd.Flags().GetString(remoteAllowedCIdRFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteAllowedCIDR = remoteAllowedCIdRFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsReplaceCandidateAddrWithServerAddrFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replaceCandidateAddrWithServerAddrFlagName := fmt.Sprintf("%v.replaceCandidateAddrWithServerAddr", cmdPrefix)
	if cmd.Flags().Changed(replaceCandidateAddrWithServerAddrFlagName) {

		var replaceCandidateAddrWithServerAddrFlagName string
		if cmdPrefix == "" {
			replaceCandidateAddrWithServerAddrFlagName = "replaceCandidateAddrWithServerAddr"
		} else {
			replaceCandidateAddrWithServerAddrFlagName = fmt.Sprintf("%v.replaceCandidateAddrWithServerAddr", cmdPrefix)
		}

		replaceCandidateAddrWithServerAddrFlagValue, err := cmd.Flags().GetBool(replaceCandidateAddrWithServerAddrFlagName)
		if err != nil {
			return err, false
		}
		m.ReplaceCandidateAddrWithServerAddr = replaceCandidateAddrWithServerAddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsRestartStreamFetcherPeriodFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	restartStreamFetcherPeriodFlagName := fmt.Sprintf("%v.restartStreamFetcherPeriod", cmdPrefix)
	if cmd.Flags().Changed(restartStreamFetcherPeriodFlagName) {

		var restartStreamFetcherPeriodFlagName string
		if cmdPrefix == "" {
			restartStreamFetcherPeriodFlagName = "restartStreamFetcherPeriod"
		} else {
			restartStreamFetcherPeriodFlagName = fmt.Sprintf("%v.restartStreamFetcherPeriod", cmdPrefix)
		}

		restartStreamFetcherPeriodFlagValue, err := cmd.Flags().GetInt32(restartStreamFetcherPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.RestartStreamFetcherPeriod = restartStreamFetcherPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsRtmpIngestBufferTimeMsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rtmpIngestBufferTimeMsFlagName := fmt.Sprintf("%v.rtmpIngestBufferTimeMs", cmdPrefix)
	if cmd.Flags().Changed(rtmpIngestBufferTimeMsFlagName) {

		var rtmpIngestBufferTimeMsFlagName string
		if cmdPrefix == "" {
			rtmpIngestBufferTimeMsFlagName = "rtmpIngestBufferTimeMs"
		} else {
			rtmpIngestBufferTimeMsFlagName = fmt.Sprintf("%v.rtmpIngestBufferTimeMs", cmdPrefix)
		}

		rtmpIngestBufferTimeMsFlagValue, err := cmd.Flags().GetInt64(rtmpIngestBufferTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.RtmpIngestBufferTimeMs = rtmpIngestBufferTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsRtspPullTransportTypeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rtspPullTransportTypeFlagName := fmt.Sprintf("%v.rtspPullTransportType", cmdPrefix)
	if cmd.Flags().Changed(rtspPullTransportTypeFlagName) {

		var rtspPullTransportTypeFlagName string
		if cmdPrefix == "" {
			rtspPullTransportTypeFlagName = "rtspPullTransportType"
		} else {
			rtspPullTransportTypeFlagName = fmt.Sprintf("%v.rtspPullTransportType", cmdPrefix)
		}

		rtspPullTransportTypeFlagValue, err := cmd.Flags().GetString(rtspPullTransportTypeFlagName)
		if err != nil {
			return err, false
		}
		m.RtspPullTransportType = rtspPullTransportTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsRtspTimeoutDurationMsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rtspTimeoutDurationMsFlagName := fmt.Sprintf("%v.rtspTimeoutDurationMs", cmdPrefix)
	if cmd.Flags().Changed(rtspTimeoutDurationMsFlagName) {

		var rtspTimeoutDurationMsFlagName string
		if cmdPrefix == "" {
			rtspTimeoutDurationMsFlagName = "rtspTimeoutDurationMs"
		} else {
			rtspTimeoutDurationMsFlagName = fmt.Sprintf("%v.rtspTimeoutDurationMs", cmdPrefix)
		}

		rtspTimeoutDurationMsFlagValue, err := cmd.Flags().GetInt32(rtspTimeoutDurationMsFlagName)
		if err != nil {
			return err, false
		}
		m.RtspTimeoutDurationMs = rtspTimeoutDurationMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsRttMeasurementDiffThresholdForSwitchbackFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rttMeasurementDiffThresholdForSwitchbackFlagName := fmt.Sprintf("%v.rttMeasurementDiffThresholdForSwitchback", cmdPrefix)
	if cmd.Flags().Changed(rttMeasurementDiffThresholdForSwitchbackFlagName) {

		var rttMeasurementDiffThresholdForSwitchbackFlagName string
		if cmdPrefix == "" {
			rttMeasurementDiffThresholdForSwitchbackFlagName = "rttMeasurementDiffThresholdForSwitchback"
		} else {
			rttMeasurementDiffThresholdForSwitchbackFlagName = fmt.Sprintf("%v.rttMeasurementDiffThresholdForSwitchback", cmdPrefix)
		}

		rttMeasurementDiffThresholdForSwitchbackFlagValue, err := cmd.Flags().GetInt32(rttMeasurementDiffThresholdForSwitchbackFlagName)
		if err != nil {
			return err, false
		}
		m.RttMeasurementDiffThresholdForSwitchback = rttMeasurementDiffThresholdForSwitchbackFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3AccessKeyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3AccessKeyFlagName := fmt.Sprintf("%v.s3AccessKey", cmdPrefix)
	if cmd.Flags().Changed(s3AccessKeyFlagName) {

		var s3AccessKeyFlagName string
		if cmdPrefix == "" {
			s3AccessKeyFlagName = "s3AccessKey"
		} else {
			s3AccessKeyFlagName = fmt.Sprintf("%v.s3AccessKey", cmdPrefix)
		}

		s3AccessKeyFlagValue, err := cmd.Flags().GetString(s3AccessKeyFlagName)
		if err != nil {
			return err, false
		}
		m.S3AccessKey = s3AccessKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3BucketNameFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3BucketNameFlagName := fmt.Sprintf("%v.s3BucketName", cmdPrefix)
	if cmd.Flags().Changed(s3BucketNameFlagName) {

		var s3BucketNameFlagName string
		if cmdPrefix == "" {
			s3BucketNameFlagName = "s3BucketName"
		} else {
			s3BucketNameFlagName = fmt.Sprintf("%v.s3BucketName", cmdPrefix)
		}

		s3BucketNameFlagValue, err := cmd.Flags().GetString(s3BucketNameFlagName)
		if err != nil {
			return err, false
		}
		m.S3BucketName = s3BucketNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3EndpointFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3EndpointFlagName := fmt.Sprintf("%v.s3Endpoint", cmdPrefix)
	if cmd.Flags().Changed(s3EndpointFlagName) {

		var s3EndpointFlagName string
		if cmdPrefix == "" {
			s3EndpointFlagName = "s3Endpoint"
		} else {
			s3EndpointFlagName = fmt.Sprintf("%v.s3Endpoint", cmdPrefix)
		}

		s3EndpointFlagValue, err := cmd.Flags().GetString(s3EndpointFlagName)
		if err != nil {
			return err, false
		}
		m.S3Endpoint = s3EndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3PermissionFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3PermissionFlagName := fmt.Sprintf("%v.s3Permission", cmdPrefix)
	if cmd.Flags().Changed(s3PermissionFlagName) {

		var s3PermissionFlagName string
		if cmdPrefix == "" {
			s3PermissionFlagName = "s3Permission"
		} else {
			s3PermissionFlagName = fmt.Sprintf("%v.s3Permission", cmdPrefix)
		}

		s3PermissionFlagValue, err := cmd.Flags().GetString(s3PermissionFlagName)
		if err != nil {
			return err, false
		}
		m.S3Permission = s3PermissionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3PreviewsFolderPathFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3PreviewsFolderPathFlagName := fmt.Sprintf("%v.s3PreviewsFolderPath", cmdPrefix)
	if cmd.Flags().Changed(s3PreviewsFolderPathFlagName) {

		var s3PreviewsFolderPathFlagName string
		if cmdPrefix == "" {
			s3PreviewsFolderPathFlagName = "s3PreviewsFolderPath"
		} else {
			s3PreviewsFolderPathFlagName = fmt.Sprintf("%v.s3PreviewsFolderPath", cmdPrefix)
		}

		s3PreviewsFolderPathFlagValue, err := cmd.Flags().GetString(s3PreviewsFolderPathFlagName)
		if err != nil {
			return err, false
		}
		m.S3PreviewsFolderPath = s3PreviewsFolderPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3RecordingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3RecordingEnabledFlagName := fmt.Sprintf("%v.s3RecordingEnabled", cmdPrefix)
	if cmd.Flags().Changed(s3RecordingEnabledFlagName) {

		var s3RecordingEnabledFlagName string
		if cmdPrefix == "" {
			s3RecordingEnabledFlagName = "s3RecordingEnabled"
		} else {
			s3RecordingEnabledFlagName = fmt.Sprintf("%v.s3RecordingEnabled", cmdPrefix)
		}

		s3RecordingEnabledFlagValue, err := cmd.Flags().GetBool(s3RecordingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.S3RecordingEnabled = s3RecordingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3RegionNameFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3RegionNameFlagName := fmt.Sprintf("%v.s3RegionName", cmdPrefix)
	if cmd.Flags().Changed(s3RegionNameFlagName) {

		var s3RegionNameFlagName string
		if cmdPrefix == "" {
			s3RegionNameFlagName = "s3RegionName"
		} else {
			s3RegionNameFlagName = fmt.Sprintf("%v.s3RegionName", cmdPrefix)
		}

		s3RegionNameFlagValue, err := cmd.Flags().GetString(s3RegionNameFlagName)
		if err != nil {
			return err, false
		}
		m.S3RegionName = s3RegionNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3SecretKeyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3SecretKeyFlagName := fmt.Sprintf("%v.s3SecretKey", cmdPrefix)
	if cmd.Flags().Changed(s3SecretKeyFlagName) {

		var s3SecretKeyFlagName string
		if cmdPrefix == "" {
			s3SecretKeyFlagName = "s3SecretKey"
		} else {
			s3SecretKeyFlagName = fmt.Sprintf("%v.s3SecretKey", cmdPrefix)
		}

		s3SecretKeyFlagValue, err := cmd.Flags().GetString(s3SecretKeyFlagName)
		if err != nil {
			return err, false
		}
		m.S3SecretKey = s3SecretKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3StorageClassFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3StorageClassFlagName := fmt.Sprintf("%v.s3StorageClass", cmdPrefix)
	if cmd.Flags().Changed(s3StorageClassFlagName) {

		var s3StorageClassFlagName string
		if cmdPrefix == "" {
			s3StorageClassFlagName = "s3StorageClass"
		} else {
			s3StorageClassFlagName = fmt.Sprintf("%v.s3StorageClass", cmdPrefix)
		}

		s3StorageClassFlagValue, err := cmd.Flags().GetString(s3StorageClassFlagName)
		if err != nil {
			return err, false
		}
		m.S3StorageClass = s3StorageClassFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsS3StreamsFolderPathFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	s3StreamsFolderPathFlagName := fmt.Sprintf("%v.s3StreamsFolderPath", cmdPrefix)
	if cmd.Flags().Changed(s3StreamsFolderPathFlagName) {

		var s3StreamsFolderPathFlagName string
		if cmdPrefix == "" {
			s3StreamsFolderPathFlagName = "s3StreamsFolderPath"
		} else {
			s3StreamsFolderPathFlagName = fmt.Sprintf("%v.s3StreamsFolderPath", cmdPrefix)
		}

		s3StreamsFolderPathFlagValue, err := cmd.Flags().GetString(s3StreamsFolderPathFlagName)
		if err != nil {
			return err, false
		}
		m.S3StreamsFolderPath = s3StreamsFolderPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsSignalingAddressFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalingAddressFlagName := fmt.Sprintf("%v.signalingAddress", cmdPrefix)
	if cmd.Flags().Changed(signalingAddressFlagName) {

		var signalingAddressFlagName string
		if cmdPrefix == "" {
			signalingAddressFlagName = "signalingAddress"
		} else {
			signalingAddressFlagName = fmt.Sprintf("%v.signalingAddress", cmdPrefix)
		}

		signalingAddressFlagValue, err := cmd.Flags().GetString(signalingAddressFlagName)
		if err != nil {
			return err, false
		}
		m.SignalingAddress = signalingAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsSignalingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalingEnabledFlagName := fmt.Sprintf("%v.signalingEnabled", cmdPrefix)
	if cmd.Flags().Changed(signalingEnabledFlagName) {

		var signalingEnabledFlagName string
		if cmdPrefix == "" {
			signalingEnabledFlagName = "signalingEnabled"
		} else {
			signalingEnabledFlagName = fmt.Sprintf("%v.signalingEnabled", cmdPrefix)
		}

		signalingEnabledFlagValue, err := cmd.Flags().GetBool(signalingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.SignalingEnabled = signalingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsStalkerDBPasswordFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stalkerDBPasswordFlagName := fmt.Sprintf("%v.stalkerDBPassword", cmdPrefix)
	if cmd.Flags().Changed(stalkerDBPasswordFlagName) {

		var stalkerDBPasswordFlagName string
		if cmdPrefix == "" {
			stalkerDBPasswordFlagName = "stalkerDBPassword"
		} else {
			stalkerDBPasswordFlagName = fmt.Sprintf("%v.stalkerDBPassword", cmdPrefix)
		}

		stalkerDBPasswordFlagValue, err := cmd.Flags().GetString(stalkerDBPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.StalkerDBPassword = stalkerDBPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsStalkerDBServerFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stalkerDBServerFlagName := fmt.Sprintf("%v.stalkerDBServer", cmdPrefix)
	if cmd.Flags().Changed(stalkerDBServerFlagName) {

		var stalkerDBServerFlagName string
		if cmdPrefix == "" {
			stalkerDBServerFlagName = "stalkerDBServer"
		} else {
			stalkerDBServerFlagName = fmt.Sprintf("%v.stalkerDBServer", cmdPrefix)
		}

		stalkerDBServerFlagValue, err := cmd.Flags().GetString(stalkerDBServerFlagName)
		if err != nil {
			return err, false
		}
		m.StalkerDBServer = stalkerDBServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsStalkerDBUsernameFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stalkerDBUsernameFlagName := fmt.Sprintf("%v.stalkerDBUsername", cmdPrefix)
	if cmd.Flags().Changed(stalkerDBUsernameFlagName) {

		var stalkerDBUsernameFlagName string
		if cmdPrefix == "" {
			stalkerDBUsernameFlagName = "stalkerDBUsername"
		} else {
			stalkerDBUsernameFlagName = fmt.Sprintf("%v.stalkerDBUsername", cmdPrefix)
		}

		stalkerDBUsernameFlagValue, err := cmd.Flags().GetString(stalkerDBUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.StalkerDBUsername = stalkerDBUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsStartStreamFetcherAutomaticallyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startStreamFetcherAutomaticallyFlagName := fmt.Sprintf("%v.startStreamFetcherAutomatically", cmdPrefix)
	if cmd.Flags().Changed(startStreamFetcherAutomaticallyFlagName) {

		var startStreamFetcherAutomaticallyFlagName string
		if cmdPrefix == "" {
			startStreamFetcherAutomaticallyFlagName = "startStreamFetcherAutomatically"
		} else {
			startStreamFetcherAutomaticallyFlagName = fmt.Sprintf("%v.startStreamFetcherAutomatically", cmdPrefix)
		}

		startStreamFetcherAutomaticallyFlagValue, err := cmd.Flags().GetBool(startStreamFetcherAutomaticallyFlagName)
		if err != nil {
			return err, false
		}
		m.StartStreamFetcherAutomatically = startStreamFetcherAutomaticallyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsStreamFetcherBufferTimeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamFetcherBufferTimeFlagName := fmt.Sprintf("%v.streamFetcherBufferTime", cmdPrefix)
	if cmd.Flags().Changed(streamFetcherBufferTimeFlagName) {

		var streamFetcherBufferTimeFlagName string
		if cmdPrefix == "" {
			streamFetcherBufferTimeFlagName = "streamFetcherBufferTime"
		} else {
			streamFetcherBufferTimeFlagName = fmt.Sprintf("%v.streamFetcherBufferTime", cmdPrefix)
		}

		streamFetcherBufferTimeFlagValue, err := cmd.Flags().GetInt32(streamFetcherBufferTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StreamFetcherBufferTime = streamFetcherBufferTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsStunServerURIFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stunServerUriFlagName := fmt.Sprintf("%v.stunServerURI", cmdPrefix)
	if cmd.Flags().Changed(stunServerUriFlagName) {

		var stunServerUriFlagName string
		if cmdPrefix == "" {
			stunServerUriFlagName = "stunServerURI"
		} else {
			stunServerUriFlagName = fmt.Sprintf("%v.stunServerURI", cmdPrefix)
		}

		stunServerUriFlagValue, err := cmd.Flags().GetString(stunServerUriFlagName)
		if err != nil {
			return err, false
		}
		m.StunServerURI = stunServerUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsTargetLatencyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetLatencyFlagName := fmt.Sprintf("%v.targetLatency", cmdPrefix)
	if cmd.Flags().Changed(targetLatencyFlagName) {

		var targetLatencyFlagName string
		if cmdPrefix == "" {
			targetLatencyFlagName = "targetLatency"
		} else {
			targetLatencyFlagName = fmt.Sprintf("%v.targetLatency", cmdPrefix)
		}

		targetLatencyFlagValue, err := cmd.Flags().GetString(targetLatencyFlagName)
		if err != nil {
			return err, false
		}
		m.TargetLatency = targetLatencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsTimeTokenPeriodFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeTokenPeriodFlagName := fmt.Sprintf("%v.timeTokenPeriod", cmdPrefix)
	if cmd.Flags().Changed(timeTokenPeriodFlagName) {

		var timeTokenPeriodFlagName string
		if cmdPrefix == "" {
			timeTokenPeriodFlagName = "timeTokenPeriod"
		} else {
			timeTokenPeriodFlagName = fmt.Sprintf("%v.timeTokenPeriod", cmdPrefix)
		}

		timeTokenPeriodFlagValue, err := cmd.Flags().GetInt32(timeTokenPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.TimeTokenPeriod = timeTokenPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsTimeTokenSubscriberOnlyFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeTokenSubscriberOnlyFlagName := fmt.Sprintf("%v.timeTokenSubscriberOnly", cmdPrefix)
	if cmd.Flags().Changed(timeTokenSubscriberOnlyFlagName) {

		var timeTokenSubscriberOnlyFlagName string
		if cmdPrefix == "" {
			timeTokenSubscriberOnlyFlagName = "timeTokenSubscriberOnly"
		} else {
			timeTokenSubscriberOnlyFlagName = fmt.Sprintf("%v.timeTokenSubscriberOnly", cmdPrefix)
		}

		timeTokenSubscriberOnlyFlagValue, err := cmd.Flags().GetBool(timeTokenSubscriberOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.TimeTokenSubscriberOnly = timeTokenSubscriberOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsToBeDeletedFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	toBeDeletedFlagName := fmt.Sprintf("%v.toBeDeleted", cmdPrefix)
	if cmd.Flags().Changed(toBeDeletedFlagName) {

		var toBeDeletedFlagName string
		if cmdPrefix == "" {
			toBeDeletedFlagName = "toBeDeleted"
		} else {
			toBeDeletedFlagName = fmt.Sprintf("%v.toBeDeleted", cmdPrefix)
		}

		toBeDeletedFlagValue, err := cmd.Flags().GetBool(toBeDeletedFlagName)
		if err != nil {
			return err, false
		}
		m.ToBeDeleted = toBeDeletedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsTokenHashSecretFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenHashSecretFlagName := fmt.Sprintf("%v.tokenHashSecret", cmdPrefix)
	if cmd.Flags().Changed(tokenHashSecretFlagName) {

		var tokenHashSecretFlagName string
		if cmdPrefix == "" {
			tokenHashSecretFlagName = "tokenHashSecret"
		} else {
			tokenHashSecretFlagName = fmt.Sprintf("%v.tokenHashSecret", cmdPrefix)
		}

		tokenHashSecretFlagValue, err := cmd.Flags().GetString(tokenHashSecretFlagName)
		if err != nil {
			return err, false
		}
		m.TokenHashSecret = tokenHashSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsUpdateTimeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.updateTime", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "updateTime"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.updateTime", cmdPrefix)
		}

		updateTimeFlagValue, err := cmd.Flags().GetInt64(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsUploadExtensionsToS3Flags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadExtensionsToS3FlagName := fmt.Sprintf("%v.uploadExtensionsToS3", cmdPrefix)
	if cmd.Flags().Changed(uploadExtensionsToS3FlagName) {

		var uploadExtensionsToS3FlagName string
		if cmdPrefix == "" {
			uploadExtensionsToS3FlagName = "uploadExtensionsToS3"
		} else {
			uploadExtensionsToS3FlagName = fmt.Sprintf("%v.uploadExtensionsToS3", cmdPrefix)
		}

		uploadExtensionsToS3FlagValue, err := cmd.Flags().GetInt32(uploadExtensionsToS3FlagName)
		if err != nil {
			return err, false
		}
		m.UploadExtensionsToS3 = uploadExtensionsToS3FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsUseOriginalWebRTCEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useOriginalWebRTCEnabledFlagName := fmt.Sprintf("%v.useOriginalWebRTCEnabled", cmdPrefix)
	if cmd.Flags().Changed(useOriginalWebRTCEnabledFlagName) {

		var useOriginalWebRTCEnabledFlagName string
		if cmdPrefix == "" {
			useOriginalWebRTCEnabledFlagName = "useOriginalWebRTCEnabled"
		} else {
			useOriginalWebRTCEnabledFlagName = fmt.Sprintf("%v.useOriginalWebRTCEnabled", cmdPrefix)
		}

		useOriginalWebRTCEnabledFlagValue, err := cmd.Flags().GetBool(useOriginalWebRTCEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.UseOriginalWebRTCEnabled = useOriginalWebRTCEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsUseTimelineDashMuxingFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useTimelineDashMuxingFlagName := fmt.Sprintf("%v.useTimelineDashMuxing", cmdPrefix)
	if cmd.Flags().Changed(useTimelineDashMuxingFlagName) {

		var useTimelineDashMuxingFlagName string
		if cmdPrefix == "" {
			useTimelineDashMuxingFlagName = "useTimelineDashMuxing"
		} else {
			useTimelineDashMuxingFlagName = fmt.Sprintf("%v.useTimelineDashMuxing", cmdPrefix)
		}

		useTimelineDashMuxingFlagValue, err := cmd.Flags().GetBool(useTimelineDashMuxingFlagName)
		if err != nil {
			return err, false
		}
		m.UseTimelineDashMuxing = useTimelineDashMuxingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsVodFinishScriptFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vodFinishScriptFlagName := fmt.Sprintf("%v.vodFinishScript", cmdPrefix)
	if cmd.Flags().Changed(vodFinishScriptFlagName) {

		var vodFinishScriptFlagName string
		if cmdPrefix == "" {
			vodFinishScriptFlagName = "vodFinishScript"
		} else {
			vodFinishScriptFlagName = fmt.Sprintf("%v.vodFinishScript", cmdPrefix)
		}

		vodFinishScriptFlagValue, err := cmd.Flags().GetString(vodFinishScriptFlagName)
		if err != nil {
			return err, false
		}
		m.VodFinishScript = vodFinishScriptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsVodFolderFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vodFolderFlagName := fmt.Sprintf("%v.vodFolder", cmdPrefix)
	if cmd.Flags().Changed(vodFolderFlagName) {

		var vodFolderFlagName string
		if cmdPrefix == "" {
			vodFolderFlagName = "vodFolder"
		} else {
			vodFolderFlagName = fmt.Sprintf("%v.vodFolder", cmdPrefix)
		}

		vodFolderFlagValue, err := cmd.Flags().GetString(vodFolderFlagName)
		if err != nil {
			return err, false
		}
		m.VodFolder = vodFolderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsVp8EnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vp8EnabledFlagName := fmt.Sprintf("%v.vp8Enabled", cmdPrefix)
	if cmd.Flags().Changed(vp8EnabledFlagName) {

		var vp8EnabledFlagName string
		if cmdPrefix == "" {
			vp8EnabledFlagName = "vp8Enabled"
		} else {
			vp8EnabledFlagName = fmt.Sprintf("%v.vp8Enabled", cmdPrefix)
		}

		vp8EnabledFlagValue, err := cmd.Flags().GetBool(vp8EnabledFlagName)
		if err != nil {
			return err, false
		}
		m.Vp8Enabled = vp8EnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsVp8EncoderDeadlineFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vp8EncoderDeadlineFlagName := fmt.Sprintf("%v.vp8EncoderDeadline", cmdPrefix)
	if cmd.Flags().Changed(vp8EncoderDeadlineFlagName) {

		var vp8EncoderDeadlineFlagName string
		if cmdPrefix == "" {
			vp8EncoderDeadlineFlagName = "vp8EncoderDeadline"
		} else {
			vp8EncoderDeadlineFlagName = fmt.Sprintf("%v.vp8EncoderDeadline", cmdPrefix)
		}

		vp8EncoderDeadlineFlagValue, err := cmd.Flags().GetString(vp8EncoderDeadlineFlagName)
		if err != nil {
			return err, false
		}
		m.Vp8EncoderDeadline = vp8EncoderDeadlineFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsVp8EncoderSpeedFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vp8EncoderSpeedFlagName := fmt.Sprintf("%v.vp8EncoderSpeed", cmdPrefix)
	if cmd.Flags().Changed(vp8EncoderSpeedFlagName) {

		var vp8EncoderSpeedFlagName string
		if cmdPrefix == "" {
			vp8EncoderSpeedFlagName = "vp8EncoderSpeed"
		} else {
			vp8EncoderSpeedFlagName = fmt.Sprintf("%v.vp8EncoderSpeed", cmdPrefix)
		}

		vp8EncoderSpeedFlagValue, err := cmd.Flags().GetInt32(vp8EncoderSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.Vp8EncoderSpeed = vp8EncoderSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsVp8EncoderThreadCountFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vp8EncoderThreadCountFlagName := fmt.Sprintf("%v.vp8EncoderThreadCount", cmdPrefix)
	if cmd.Flags().Changed(vp8EncoderThreadCountFlagName) {

		var vp8EncoderThreadCountFlagName string
		if cmdPrefix == "" {
			vp8EncoderThreadCountFlagName = "vp8EncoderThreadCount"
		} else {
			vp8EncoderThreadCountFlagName = fmt.Sprintf("%v.vp8EncoderThreadCount", cmdPrefix)
		}

		vp8EncoderThreadCountFlagValue, err := cmd.Flags().GetInt32(vp8EncoderThreadCountFlagName)
		if err != nil {
			return err, false
		}
		m.Vp8EncoderThreadCount = vp8EncoderThreadCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWarFileOriginServerAddressFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	warFileOriginServerAddressFlagName := fmt.Sprintf("%v.warFileOriginServerAddress", cmdPrefix)
	if cmd.Flags().Changed(warFileOriginServerAddressFlagName) {

		var warFileOriginServerAddressFlagName string
		if cmdPrefix == "" {
			warFileOriginServerAddressFlagName = "warFileOriginServerAddress"
		} else {
			warFileOriginServerAddressFlagName = fmt.Sprintf("%v.warFileOriginServerAddress", cmdPrefix)
		}

		warFileOriginServerAddressFlagValue, err := cmd.Flags().GetString(warFileOriginServerAddressFlagName)
		if err != nil {
			return err, false
		}
		m.WarFileOriginServerAddress = warFileOriginServerAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebMMuxingEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webMMuxingEnabledFlagName := fmt.Sprintf("%v.webMMuxingEnabled", cmdPrefix)
	if cmd.Flags().Changed(webMMuxingEnabledFlagName) {

		var webMMuxingEnabledFlagName string
		if cmdPrefix == "" {
			webMMuxingEnabledFlagName = "webMMuxingEnabled"
		} else {
			webMMuxingEnabledFlagName = fmt.Sprintf("%v.webMMuxingEnabled", cmdPrefix)
		}

		webMMuxingEnabledFlagValue, err := cmd.Flags().GetBool(webMMuxingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.WebMMuxingEnabled = webMMuxingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCClientStartTimeoutMsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCClientStartTimeoutMsFlagName := fmt.Sprintf("%v.webRTCClientStartTimeoutMs", cmdPrefix)
	if cmd.Flags().Changed(webRTCClientStartTimeoutMsFlagName) {

		var webRTCClientStartTimeoutMsFlagName string
		if cmdPrefix == "" {
			webRTCClientStartTimeoutMsFlagName = "webRTCClientStartTimeoutMs"
		} else {
			webRTCClientStartTimeoutMsFlagName = fmt.Sprintf("%v.webRTCClientStartTimeoutMs", cmdPrefix)
		}

		webRTCClientStartTimeoutMsFlagValue, err := cmd.Flags().GetInt32(webRTCClientStartTimeoutMsFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCClientStartTimeoutMs = webRTCClientStartTimeoutMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCEnabledFlagName := fmt.Sprintf("%v.webRTCEnabled", cmdPrefix)
	if cmd.Flags().Changed(webRTCEnabledFlagName) {

		var webRTCEnabledFlagName string
		if cmdPrefix == "" {
			webRTCEnabledFlagName = "webRTCEnabled"
		} else {
			webRTCEnabledFlagName = fmt.Sprintf("%v.webRTCEnabled", cmdPrefix)
		}

		webRTCEnabledFlagValue, err := cmd.Flags().GetBool(webRTCEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCEnabled = webRTCEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCFrameRateFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCFrameRateFlagName := fmt.Sprintf("%v.webRTCFrameRate", cmdPrefix)
	if cmd.Flags().Changed(webRTCFrameRateFlagName) {

		var webRTCFrameRateFlagName string
		if cmdPrefix == "" {
			webRTCFrameRateFlagName = "webRTCFrameRate"
		} else {
			webRTCFrameRateFlagName = fmt.Sprintf("%v.webRTCFrameRate", cmdPrefix)
		}

		webRTCFrameRateFlagValue, err := cmd.Flags().GetInt32(webRTCFrameRateFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCFrameRate = webRTCFrameRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCKeyframeTimeFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCKeyframeTimeFlagName := fmt.Sprintf("%v.webRTCKeyframeTime", cmdPrefix)
	if cmd.Flags().Changed(webRTCKeyframeTimeFlagName) {

		var webRTCKeyframeTimeFlagName string
		if cmdPrefix == "" {
			webRTCKeyframeTimeFlagName = "webRTCKeyframeTime"
		} else {
			webRTCKeyframeTimeFlagName = fmt.Sprintf("%v.webRTCKeyframeTime", cmdPrefix)
		}

		webRTCKeyframeTimeFlagValue, err := cmd.Flags().GetInt32(webRTCKeyframeTimeFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCKeyframeTime = webRTCKeyframeTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCPortRangeMaxFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCPortRangeMaxFlagName := fmt.Sprintf("%v.webRTCPortRangeMax", cmdPrefix)
	if cmd.Flags().Changed(webRTCPortRangeMaxFlagName) {

		var webRTCPortRangeMaxFlagName string
		if cmdPrefix == "" {
			webRTCPortRangeMaxFlagName = "webRTCPortRangeMax"
		} else {
			webRTCPortRangeMaxFlagName = fmt.Sprintf("%v.webRTCPortRangeMax", cmdPrefix)
		}

		webRTCPortRangeMaxFlagValue, err := cmd.Flags().GetInt32(webRTCPortRangeMaxFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCPortRangeMax = webRTCPortRangeMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCPortRangeMinFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCPortRangeMinFlagName := fmt.Sprintf("%v.webRTCPortRangeMin", cmdPrefix)
	if cmd.Flags().Changed(webRTCPortRangeMinFlagName) {

		var webRTCPortRangeMinFlagName string
		if cmdPrefix == "" {
			webRTCPortRangeMinFlagName = "webRTCPortRangeMin"
		} else {
			webRTCPortRangeMinFlagName = fmt.Sprintf("%v.webRTCPortRangeMin", cmdPrefix)
		}

		webRTCPortRangeMinFlagValue, err := cmd.Flags().GetInt32(webRTCPortRangeMinFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCPortRangeMin = webRTCPortRangeMinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCSdpSemanticsFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCSdpSemanticsFlagName := fmt.Sprintf("%v.webRTCSdpSemantics", cmdPrefix)
	if cmd.Flags().Changed(webRTCSdpSemanticsFlagName) {

		var webRTCSdpSemanticsFlagName string
		if cmdPrefix == "" {
			webRTCSdpSemanticsFlagName = "webRTCSdpSemantics"
		} else {
			webRTCSdpSemanticsFlagName = fmt.Sprintf("%v.webRTCSdpSemantics", cmdPrefix)
		}

		webRTCSdpSemanticsFlagValue, err := cmd.Flags().GetString(webRTCSdpSemanticsFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCSdpSemantics = webRTCSdpSemanticsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCTCPCandidatesEnabledFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCTcpCandidatesEnabledFlagName := fmt.Sprintf("%v.webRTCTcpCandidatesEnabled", cmdPrefix)
	if cmd.Flags().Changed(webRTCTcpCandidatesEnabledFlagName) {

		var webRTCTcpCandidatesEnabledFlagName string
		if cmdPrefix == "" {
			webRTCTcpCandidatesEnabledFlagName = "webRTCTcpCandidatesEnabled"
		} else {
			webRTCTcpCandidatesEnabledFlagName = fmt.Sprintf("%v.webRTCTcpCandidatesEnabled", cmdPrefix)
		}

		webRTCTcpCandidatesEnabledFlagValue, err := cmd.Flags().GetBool(webRTCTcpCandidatesEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCTCPCandidatesEnabled = webRTCTcpCandidatesEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebRTCViewerLimitFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCViewerLimitFlagName := fmt.Sprintf("%v.webRTCViewerLimit", cmdPrefix)
	if cmd.Flags().Changed(webRTCViewerLimitFlagName) {

		var webRTCViewerLimitFlagName string
		if cmdPrefix == "" {
			webRTCViewerLimitFlagName = "webRTCViewerLimit"
		} else {
			webRTCViewerLimitFlagName = fmt.Sprintf("%v.webRTCViewerLimit", cmdPrefix)
		}

		webRTCViewerLimitFlagValue, err := cmd.Flags().GetInt32(webRTCViewerLimitFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCViewerLimit = webRTCViewerLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWebhookAuthenticateURLFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webhookAuthenticateUrlFlagName := fmt.Sprintf("%v.webhookAuthenticateURL", cmdPrefix)
	if cmd.Flags().Changed(webhookAuthenticateUrlFlagName) {

		var webhookAuthenticateUrlFlagName string
		if cmdPrefix == "" {
			webhookAuthenticateUrlFlagName = "webhookAuthenticateURL"
		} else {
			webhookAuthenticateUrlFlagName = fmt.Sprintf("%v.webhookAuthenticateURL", cmdPrefix)
		}

		webhookAuthenticateUrlFlagValue, err := cmd.Flags().GetString(webhookAuthenticateUrlFlagName)
		if err != nil {
			return err, false
		}
		m.WebhookAuthenticateURL = webhookAuthenticateUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAppSettingsWriteStatsToDatastoreFlags(depth int, m *models.AppSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	writeStatsToDatastoreFlagName := fmt.Sprintf("%v.writeStatsToDatastore", cmdPrefix)
	if cmd.Flags().Changed(writeStatsToDatastoreFlagName) {

		var writeStatsToDatastoreFlagName string
		if cmdPrefix == "" {
			writeStatsToDatastoreFlagName = "writeStatsToDatastore"
		} else {
			writeStatsToDatastoreFlagName = fmt.Sprintf("%v.writeStatsToDatastore", cmdPrefix)
		}

		writeStatsToDatastoreFlagValue, err := cmd.Flags().GetBool(writeStatsToDatastoreFlagName)
		if err != nil {
			return err, false
		}
		m.WriteStatsToDatastore = writeStatsToDatastoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}
