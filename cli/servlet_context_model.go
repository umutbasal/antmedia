// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for ServletContext

// register flags to command
func registerModelServletContextFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServletContextAttributeNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextClassLoader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextContextPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextDefaultSessionTrackingModes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextEffectiveMajorVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextEffectiveMinorVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextEffectiveSessionTrackingModes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextFilterRegistrations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextInitParameterNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextJspConfigDescriptor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextMajorVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextMinorVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextServerInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextServletContextName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextServletNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextServletRegistrations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextServlets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextSessionCookieConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServletContextVirtualServerName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServletContextAttributeNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributeNames EnumerationString map type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextClassLoader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var classLoaderFlagName string
	if cmdPrefix == "" {
		classLoaderFlagName = "classLoader"
	} else {
		classLoaderFlagName = fmt.Sprintf("%v.classLoader", cmdPrefix)
	}

	if err := registerModelClassLoaderFlags(depth+1, classLoaderFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServletContextContextPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contextPathDescription := ``

	var contextPathFlagName string
	if cmdPrefix == "" {
		contextPathFlagName = "contextPath"
	} else {
		contextPathFlagName = fmt.Sprintf("%v.contextPath", cmdPrefix)
	}

	var contextPathFlagDefault string

	_ = cmd.PersistentFlags().String(contextPathFlagName, contextPathFlagDefault, contextPathDescription)

	return nil
}

func registerServletContextDefaultSessionTrackingModes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: defaultSessionTrackingModes []string array type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextEffectiveMajorVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	effectiveMajorVersionDescription := ``

	var effectiveMajorVersionFlagName string
	if cmdPrefix == "" {
		effectiveMajorVersionFlagName = "effectiveMajorVersion"
	} else {
		effectiveMajorVersionFlagName = fmt.Sprintf("%v.effectiveMajorVersion", cmdPrefix)
	}

	var effectiveMajorVersionFlagDefault int32

	_ = cmd.PersistentFlags().Int32(effectiveMajorVersionFlagName, effectiveMajorVersionFlagDefault, effectiveMajorVersionDescription)

	return nil
}

func registerServletContextEffectiveMinorVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	effectiveMinorVersionDescription := ``

	var effectiveMinorVersionFlagName string
	if cmdPrefix == "" {
		effectiveMinorVersionFlagName = "effectiveMinorVersion"
	} else {
		effectiveMinorVersionFlagName = fmt.Sprintf("%v.effectiveMinorVersion", cmdPrefix)
	}

	var effectiveMinorVersionFlagDefault int32

	_ = cmd.PersistentFlags().Int32(effectiveMinorVersionFlagName, effectiveMinorVersionFlagDefault, effectiveMinorVersionDescription)

	return nil
}

func registerServletContextEffectiveSessionTrackingModes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: effectiveSessionTrackingModes []string array type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextFilterRegistrations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: filterRegistrations map[string]FilterRegistration map type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextInitParameterNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: initParameterNames EnumerationString map type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextJspConfigDescriptor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var jspConfigDescriptorFlagName string
	if cmdPrefix == "" {
		jspConfigDescriptorFlagName = "jspConfigDescriptor"
	} else {
		jspConfigDescriptorFlagName = fmt.Sprintf("%v.jspConfigDescriptor", cmdPrefix)
	}

	if err := registerModelJspConfigDescriptorFlags(depth+1, jspConfigDescriptorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServletContextMajorVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	majorVersionDescription := ``

	var majorVersionFlagName string
	if cmdPrefix == "" {
		majorVersionFlagName = "majorVersion"
	} else {
		majorVersionFlagName = fmt.Sprintf("%v.majorVersion", cmdPrefix)
	}

	var majorVersionFlagDefault int32

	_ = cmd.PersistentFlags().Int32(majorVersionFlagName, majorVersionFlagDefault, majorVersionDescription)

	return nil
}

func registerServletContextMinorVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minorVersionDescription := ``

	var minorVersionFlagName string
	if cmdPrefix == "" {
		minorVersionFlagName = "minorVersion"
	} else {
		minorVersionFlagName = fmt.Sprintf("%v.minorVersion", cmdPrefix)
	}

	var minorVersionFlagDefault int32

	_ = cmd.PersistentFlags().Int32(minorVersionFlagName, minorVersionFlagDefault, minorVersionDescription)

	return nil
}

func registerServletContextServerInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverInfoDescription := ``

	var serverInfoFlagName string
	if cmdPrefix == "" {
		serverInfoFlagName = "serverInfo"
	} else {
		serverInfoFlagName = fmt.Sprintf("%v.serverInfo", cmdPrefix)
	}

	var serverInfoFlagDefault string

	_ = cmd.PersistentFlags().String(serverInfoFlagName, serverInfoFlagDefault, serverInfoDescription)

	return nil
}

func registerServletContextServletContextName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	servletContextNameDescription := ``

	var servletContextNameFlagName string
	if cmdPrefix == "" {
		servletContextNameFlagName = "servletContextName"
	} else {
		servletContextNameFlagName = fmt.Sprintf("%v.servletContextName", cmdPrefix)
	}

	var servletContextNameFlagDefault string

	_ = cmd.PersistentFlags().String(servletContextNameFlagName, servletContextNameFlagDefault, servletContextNameDescription)

	return nil
}

func registerServletContextServletNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: servletNames EnumerationString map type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextServletRegistrations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: servletRegistrations map[string]ServletRegistration map type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextServlets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: servlets EnumerationServlet map type is not supported by go-swagger cli yet

	return nil
}

func registerServletContextSessionCookieConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var sessionCookieConfigFlagName string
	if cmdPrefix == "" {
		sessionCookieConfigFlagName = "sessionCookieConfig"
	} else {
		sessionCookieConfigFlagName = fmt.Sprintf("%v.sessionCookieConfig", cmdPrefix)
	}

	if err := registerModelSessionCookieConfigFlags(depth+1, sessionCookieConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServletContextVirtualServerName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	virtualServerNameDescription := ``

	var virtualServerNameFlagName string
	if cmdPrefix == "" {
		virtualServerNameFlagName = "virtualServerName"
	} else {
		virtualServerNameFlagName = fmt.Sprintf("%v.virtualServerName", cmdPrefix)
	}

	var virtualServerNameFlagDefault string

	_ = cmd.PersistentFlags().String(virtualServerNameFlagName, virtualServerNameFlagDefault, virtualServerNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServletContextFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributeNamesAdded := retrieveServletContextAttributeNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributeNamesAdded

	err, classLoaderAdded := retrieveServletContextClassLoaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || classLoaderAdded

	err, contextPathAdded := retrieveServletContextContextPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextPathAdded

	err, defaultSessionTrackingModesAdded := retrieveServletContextDefaultSessionTrackingModesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultSessionTrackingModesAdded

	err, effectiveMajorVersionAdded := retrieveServletContextEffectiveMajorVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || effectiveMajorVersionAdded

	err, effectiveMinorVersionAdded := retrieveServletContextEffectiveMinorVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || effectiveMinorVersionAdded

	err, effectiveSessionTrackingModesAdded := retrieveServletContextEffectiveSessionTrackingModesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || effectiveSessionTrackingModesAdded

	err, filterRegistrationsAdded := retrieveServletContextFilterRegistrationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filterRegistrationsAdded

	err, initParameterNamesAdded := retrieveServletContextInitParameterNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || initParameterNamesAdded

	err, jspConfigDescriptorAdded := retrieveServletContextJspConfigDescriptorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jspConfigDescriptorAdded

	err, majorVersionAdded := retrieveServletContextMajorVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || majorVersionAdded

	err, minorVersionAdded := retrieveServletContextMinorVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minorVersionAdded

	err, serverInfoAdded := retrieveServletContextServerInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverInfoAdded

	err, servletContextNameAdded := retrieveServletContextServletContextNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || servletContextNameAdded

	err, servletNamesAdded := retrieveServletContextServletNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || servletNamesAdded

	err, servletRegistrationsAdded := retrieveServletContextServletRegistrationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || servletRegistrationsAdded

	err, servletsAdded := retrieveServletContextServletsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || servletsAdded

	err, sessionCookieConfigAdded := retrieveServletContextSessionCookieConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessionCookieConfigAdded

	err, virtualServerNameAdded := retrieveServletContextVirtualServerNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || virtualServerNameAdded

	return nil, retAdded
}

func retrieveServletContextAttributeNamesFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributeNamesFlagName := fmt.Sprintf("%v.attributeNames", cmdPrefix)
	if cmd.Flags().Changed(attributeNamesFlagName) {
		// warning: attributeNames map type EnumerationString is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextClassLoaderFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	classLoaderFlagName := fmt.Sprintf("%v.classLoader", cmdPrefix)
	if cmd.Flags().Changed(classLoaderFlagName) {
		// info: complex object classLoader ClassLoader is retrieved outside this Changed() block
	}
	classLoaderFlagValue := m.ClassLoader
	if swag.IsZero(classLoaderFlagValue) {
		classLoaderFlagValue = &models.ClassLoader{}
	}

	err, classLoaderAdded := retrieveModelClassLoaderFlags(depth+1, classLoaderFlagValue, classLoaderFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || classLoaderAdded
	if classLoaderAdded {
		m.ClassLoader = classLoaderFlagValue
	}

	return nil, retAdded
}

func retrieveServletContextContextPathFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextPathFlagName := fmt.Sprintf("%v.contextPath", cmdPrefix)
	if cmd.Flags().Changed(contextPathFlagName) {

		var contextPathFlagName string
		if cmdPrefix == "" {
			contextPathFlagName = "contextPath"
		} else {
			contextPathFlagName = fmt.Sprintf("%v.contextPath", cmdPrefix)
		}

		contextPathFlagValue, err := cmd.Flags().GetString(contextPathFlagName)
		if err != nil {
			return err, false
		}
		m.ContextPath = contextPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextDefaultSessionTrackingModesFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultSessionTrackingModesFlagName := fmt.Sprintf("%v.defaultSessionTrackingModes", cmdPrefix)
	if cmd.Flags().Changed(defaultSessionTrackingModesFlagName) {
		// warning: defaultSessionTrackingModes array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextEffectiveMajorVersionFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	effectiveMajorVersionFlagName := fmt.Sprintf("%v.effectiveMajorVersion", cmdPrefix)
	if cmd.Flags().Changed(effectiveMajorVersionFlagName) {

		var effectiveMajorVersionFlagName string
		if cmdPrefix == "" {
			effectiveMajorVersionFlagName = "effectiveMajorVersion"
		} else {
			effectiveMajorVersionFlagName = fmt.Sprintf("%v.effectiveMajorVersion", cmdPrefix)
		}

		effectiveMajorVersionFlagValue, err := cmd.Flags().GetInt32(effectiveMajorVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EffectiveMajorVersion = effectiveMajorVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextEffectiveMinorVersionFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	effectiveMinorVersionFlagName := fmt.Sprintf("%v.effectiveMinorVersion", cmdPrefix)
	if cmd.Flags().Changed(effectiveMinorVersionFlagName) {

		var effectiveMinorVersionFlagName string
		if cmdPrefix == "" {
			effectiveMinorVersionFlagName = "effectiveMinorVersion"
		} else {
			effectiveMinorVersionFlagName = fmt.Sprintf("%v.effectiveMinorVersion", cmdPrefix)
		}

		effectiveMinorVersionFlagValue, err := cmd.Flags().GetInt32(effectiveMinorVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EffectiveMinorVersion = effectiveMinorVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextEffectiveSessionTrackingModesFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	effectiveSessionTrackingModesFlagName := fmt.Sprintf("%v.effectiveSessionTrackingModes", cmdPrefix)
	if cmd.Flags().Changed(effectiveSessionTrackingModesFlagName) {
		// warning: effectiveSessionTrackingModes array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextFilterRegistrationsFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filterRegistrationsFlagName := fmt.Sprintf("%v.filterRegistrations", cmdPrefix)
	if cmd.Flags().Changed(filterRegistrationsFlagName) {
		// warning: filterRegistrations map type map[string]FilterRegistration is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextInitParameterNamesFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	initParameterNamesFlagName := fmt.Sprintf("%v.initParameterNames", cmdPrefix)
	if cmd.Flags().Changed(initParameterNamesFlagName) {
		// warning: initParameterNames map type EnumerationString is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextJspConfigDescriptorFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jspConfigDescriptorFlagName := fmt.Sprintf("%v.jspConfigDescriptor", cmdPrefix)
	if cmd.Flags().Changed(jspConfigDescriptorFlagName) {
		// info: complex object jspConfigDescriptor JspConfigDescriptor is retrieved outside this Changed() block
	}
	jspConfigDescriptorFlagValue := m.JspConfigDescriptor
	if swag.IsZero(jspConfigDescriptorFlagValue) {
		jspConfigDescriptorFlagValue = &models.JspConfigDescriptor{}
	}

	err, jspConfigDescriptorAdded := retrieveModelJspConfigDescriptorFlags(depth+1, jspConfigDescriptorFlagValue, jspConfigDescriptorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jspConfigDescriptorAdded
	if jspConfigDescriptorAdded {
		m.JspConfigDescriptor = jspConfigDescriptorFlagValue
	}

	return nil, retAdded
}

func retrieveServletContextMajorVersionFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	majorVersionFlagName := fmt.Sprintf("%v.majorVersion", cmdPrefix)
	if cmd.Flags().Changed(majorVersionFlagName) {

		var majorVersionFlagName string
		if cmdPrefix == "" {
			majorVersionFlagName = "majorVersion"
		} else {
			majorVersionFlagName = fmt.Sprintf("%v.majorVersion", cmdPrefix)
		}

		majorVersionFlagValue, err := cmd.Flags().GetInt32(majorVersionFlagName)
		if err != nil {
			return err, false
		}
		m.MajorVersion = majorVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextMinorVersionFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minorVersionFlagName := fmt.Sprintf("%v.minorVersion", cmdPrefix)
	if cmd.Flags().Changed(minorVersionFlagName) {

		var minorVersionFlagName string
		if cmdPrefix == "" {
			minorVersionFlagName = "minorVersion"
		} else {
			minorVersionFlagName = fmt.Sprintf("%v.minorVersion", cmdPrefix)
		}

		minorVersionFlagValue, err := cmd.Flags().GetInt32(minorVersionFlagName)
		if err != nil {
			return err, false
		}
		m.MinorVersion = minorVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextServerInfoFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverInfoFlagName := fmt.Sprintf("%v.serverInfo", cmdPrefix)
	if cmd.Flags().Changed(serverInfoFlagName) {

		var serverInfoFlagName string
		if cmdPrefix == "" {
			serverInfoFlagName = "serverInfo"
		} else {
			serverInfoFlagName = fmt.Sprintf("%v.serverInfo", cmdPrefix)
		}

		serverInfoFlagValue, err := cmd.Flags().GetString(serverInfoFlagName)
		if err != nil {
			return err, false
		}
		m.ServerInfo = serverInfoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextServletContextNameFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	servletContextNameFlagName := fmt.Sprintf("%v.servletContextName", cmdPrefix)
	if cmd.Flags().Changed(servletContextNameFlagName) {

		var servletContextNameFlagName string
		if cmdPrefix == "" {
			servletContextNameFlagName = "servletContextName"
		} else {
			servletContextNameFlagName = fmt.Sprintf("%v.servletContextName", cmdPrefix)
		}

		servletContextNameFlagValue, err := cmd.Flags().GetString(servletContextNameFlagName)
		if err != nil {
			return err, false
		}
		m.ServletContextName = servletContextNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServletContextServletNamesFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	servletNamesFlagName := fmt.Sprintf("%v.servletNames", cmdPrefix)
	if cmd.Flags().Changed(servletNamesFlagName) {
		// warning: servletNames map type EnumerationString is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextServletRegistrationsFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	servletRegistrationsFlagName := fmt.Sprintf("%v.servletRegistrations", cmdPrefix)
	if cmd.Flags().Changed(servletRegistrationsFlagName) {
		// warning: servletRegistrations map type map[string]ServletRegistration is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextServletsFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	servletsFlagName := fmt.Sprintf("%v.servlets", cmdPrefix)
	if cmd.Flags().Changed(servletsFlagName) {
		// warning: servlets map type EnumerationServlet is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServletContextSessionCookieConfigFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessionCookieConfigFlagName := fmt.Sprintf("%v.sessionCookieConfig", cmdPrefix)
	if cmd.Flags().Changed(sessionCookieConfigFlagName) {
		// info: complex object sessionCookieConfig SessionCookieConfig is retrieved outside this Changed() block
	}
	sessionCookieConfigFlagValue := m.SessionCookieConfig
	if swag.IsZero(sessionCookieConfigFlagValue) {
		sessionCookieConfigFlagValue = &models.SessionCookieConfig{}
	}

	err, sessionCookieConfigAdded := retrieveModelSessionCookieConfigFlags(depth+1, sessionCookieConfigFlagValue, sessionCookieConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessionCookieConfigAdded
	if sessionCookieConfigAdded {
		m.SessionCookieConfig = sessionCookieConfigFlagValue
	}

	return nil, retAdded
}

func retrieveServletContextVirtualServerNameFlags(depth int, m *models.ServletContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	virtualServerNameFlagName := fmt.Sprintf("%v.virtualServerName", cmdPrefix)
	if cmd.Flags().Changed(virtualServerNameFlagName) {

		var virtualServerNameFlagName string
		if cmdPrefix == "" {
			virtualServerNameFlagName = "virtualServerName"
		} else {
			virtualServerNameFlagName = fmt.Sprintf("%v.virtualServerName", cmdPrefix)
		}

		virtualServerNameFlagValue, err := cmd.Flags().GetString(virtualServerNameFlagName)
		if err != nil {
			return err, false
		}
		m.VirtualServerName = virtualServerNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
