// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for IAntMediaStreamHandler

// register flags to command
func registerModelIAntMediaStreamHandlerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIAntMediaStreamHandlerServerShuttingDown(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIAntMediaStreamHandlerServerShuttingDown(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverShuttingDownDescription := ``

	var serverShuttingDownFlagName string
	if cmdPrefix == "" {
		serverShuttingDownFlagName = "serverShuttingDown"
	} else {
		serverShuttingDownFlagName = fmt.Sprintf("%v.serverShuttingDown", cmdPrefix)
	}

	var serverShuttingDownFlagDefault bool

	_ = cmd.PersistentFlags().Bool(serverShuttingDownFlagName, serverShuttingDownFlagDefault, serverShuttingDownDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIAntMediaStreamHandlerFlags(depth int, m *models.IAntMediaStreamHandler, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, serverShuttingDownAdded := retrieveIAntMediaStreamHandlerServerShuttingDownFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverShuttingDownAdded

	return nil, retAdded
}

func retrieveIAntMediaStreamHandlerServerShuttingDownFlags(depth int, m *models.IAntMediaStreamHandler, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverShuttingDownFlagName := fmt.Sprintf("%v.serverShuttingDown", cmdPrefix)
	if cmd.Flags().Changed(serverShuttingDownFlagName) {

		var serverShuttingDownFlagName string
		if cmdPrefix == "" {
			serverShuttingDownFlagName = "serverShuttingDown"
		} else {
			serverShuttingDownFlagName = fmt.Sprintf("%v.serverShuttingDown", cmdPrefix)
		}

		serverShuttingDownFlagValue, err := cmd.Flags().GetBool(serverShuttingDownFlagName)
		if err != nil {
			return err, false
		}
		m.ServerShuttingDown = serverShuttingDownFlagValue

		retAdded = true
	}

	return nil, retAdded
}
