// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for BroadcastStatistics

// register flags to command
func registerModelBroadcastStatisticsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBroadcastStatisticsTotalHLSWatchersCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastStatisticsTotalRTMPWatchersCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBroadcastStatisticsTotalWebRTCWatchersCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBroadcastStatisticsTotalHLSWatchersCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalHLSWatchersCountDescription := `the total HLS viewers of the stream`

	var totalHLSWatchersCountFlagName string
	if cmdPrefix == "" {
		totalHLSWatchersCountFlagName = "totalHLSWatchersCount"
	} else {
		totalHLSWatchersCountFlagName = fmt.Sprintf("%v.totalHLSWatchersCount", cmdPrefix)
	}

	var totalHLSWatchersCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalHLSWatchersCountFlagName, totalHLSWatchersCountFlagDefault, totalHLSWatchersCountDescription)

	return nil
}

func registerBroadcastStatisticsTotalRTMPWatchersCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalRTMPWatchersCountDescription := `the total RTMP viewers of the stream`

	var totalRTMPWatchersCountFlagName string
	if cmdPrefix == "" {
		totalRTMPWatchersCountFlagName = "totalRTMPWatchersCount"
	} else {
		totalRTMPWatchersCountFlagName = fmt.Sprintf("%v.totalRTMPWatchersCount", cmdPrefix)
	}

	var totalRTMPWatchersCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalRTMPWatchersCountFlagName, totalRTMPWatchersCountFlagDefault, totalRTMPWatchersCountDescription)

	return nil
}

func registerBroadcastStatisticsTotalWebRTCWatchersCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalWebRTCWatchersCountDescription := `the total WebRTC viewers of the stream`

	var totalWebRTCWatchersCountFlagName string
	if cmdPrefix == "" {
		totalWebRTCWatchersCountFlagName = "totalWebRTCWatchersCount"
	} else {
		totalWebRTCWatchersCountFlagName = fmt.Sprintf("%v.totalWebRTCWatchersCount", cmdPrefix)
	}

	var totalWebRTCWatchersCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalWebRTCWatchersCountFlagName, totalWebRTCWatchersCountFlagDefault, totalWebRTCWatchersCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBroadcastStatisticsFlags(depth int, m *models.BroadcastStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, totalHLSWatchersCountAdded := retrieveBroadcastStatisticsTotalHLSWatchersCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalHLSWatchersCountAdded

	err, totalRTMPWatchersCountAdded := retrieveBroadcastStatisticsTotalRTMPWatchersCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalRTMPWatchersCountAdded

	err, totalWebRTCWatchersCountAdded := retrieveBroadcastStatisticsTotalWebRTCWatchersCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalWebRTCWatchersCountAdded

	return nil, retAdded
}

func retrieveBroadcastStatisticsTotalHLSWatchersCountFlags(depth int, m *models.BroadcastStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalHLSWatchersCountFlagName := fmt.Sprintf("%v.totalHLSWatchersCount", cmdPrefix)
	if cmd.Flags().Changed(totalHLSWatchersCountFlagName) {

		var totalHLSWatchersCountFlagName string
		if cmdPrefix == "" {
			totalHLSWatchersCountFlagName = "totalHLSWatchersCount"
		} else {
			totalHLSWatchersCountFlagName = fmt.Sprintf("%v.totalHLSWatchersCount", cmdPrefix)
		}

		totalHLSWatchersCountFlagValue, err := cmd.Flags().GetInt32(totalHLSWatchersCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalHLSWatchersCount = totalHLSWatchersCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastStatisticsTotalRTMPWatchersCountFlags(depth int, m *models.BroadcastStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalRTMPWatchersCountFlagName := fmt.Sprintf("%v.totalRTMPWatchersCount", cmdPrefix)
	if cmd.Flags().Changed(totalRTMPWatchersCountFlagName) {

		var totalRTMPWatchersCountFlagName string
		if cmdPrefix == "" {
			totalRTMPWatchersCountFlagName = "totalRTMPWatchersCount"
		} else {
			totalRTMPWatchersCountFlagName = fmt.Sprintf("%v.totalRTMPWatchersCount", cmdPrefix)
		}

		totalRTMPWatchersCountFlagValue, err := cmd.Flags().GetInt32(totalRTMPWatchersCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalRTMPWatchersCount = totalRTMPWatchersCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBroadcastStatisticsTotalWebRTCWatchersCountFlags(depth int, m *models.BroadcastStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalWebRTCWatchersCountFlagName := fmt.Sprintf("%v.totalWebRTCWatchersCount", cmdPrefix)
	if cmd.Flags().Changed(totalWebRTCWatchersCountFlagName) {

		var totalWebRTCWatchersCountFlagName string
		if cmdPrefix == "" {
			totalWebRTCWatchersCountFlagName = "totalWebRTCWatchersCount"
		} else {
			totalWebRTCWatchersCountFlagName = fmt.Sprintf("%v.totalWebRTCWatchersCount", cmdPrefix)
		}

		totalWebRTCWatchersCountFlagValue, err := cmd.Flags().GetInt32(totalWebRTCWatchersCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalWebRTCWatchersCount = totalWebRTCWatchersCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
