// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for FileConsumer

// register flags to command
func registerModelFileConsumerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFileConsumerDelayWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFileConsumerFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFileConsumerQueueThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFileConsumerSchedulerThreadSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFileConsumerDelayWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	delayWriteDescription := ``

	var delayWriteFlagName string
	if cmdPrefix == "" {
		delayWriteFlagName = "delayWrite"
	} else {
		delayWriteFlagName = fmt.Sprintf("%v.delayWrite", cmdPrefix)
	}

	var delayWriteFlagDefault bool

	_ = cmd.PersistentFlags().Bool(delayWriteFlagName, delayWriteFlagDefault, delayWriteDescription)

	return nil
}

func registerFileConsumerFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	return nil
}

func registerFileConsumerQueueThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queueThresholdDescription := ``

	var queueThresholdFlagName string
	if cmdPrefix == "" {
		queueThresholdFlagName = "queueThreshold"
	} else {
		queueThresholdFlagName = fmt.Sprintf("%v.queueThreshold", cmdPrefix)
	}

	var queueThresholdFlagDefault int32

	_ = cmd.PersistentFlags().Int32(queueThresholdFlagName, queueThresholdFlagDefault, queueThresholdDescription)

	return nil
}

func registerFileConsumerSchedulerThreadSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schedulerThreadSizeDescription := ``

	var schedulerThreadSizeFlagName string
	if cmdPrefix == "" {
		schedulerThreadSizeFlagName = "schedulerThreadSize"
	} else {
		schedulerThreadSizeFlagName = fmt.Sprintf("%v.schedulerThreadSize", cmdPrefix)
	}

	var schedulerThreadSizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(schedulerThreadSizeFlagName, schedulerThreadSizeFlagDefault, schedulerThreadSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFileConsumerFlags(depth int, m *models.FileConsumer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, delayWriteAdded := retrieveFileConsumerDelayWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || delayWriteAdded

	err, fileAdded := retrieveFileConsumerFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileAdded

	err, queueThresholdAdded := retrieveFileConsumerQueueThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queueThresholdAdded

	err, schedulerThreadSizeAdded := retrieveFileConsumerSchedulerThreadSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schedulerThreadSizeAdded

	return nil, retAdded
}

func retrieveFileConsumerDelayWriteFlags(depth int, m *models.FileConsumer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	delayWriteFlagName := fmt.Sprintf("%v.delayWrite", cmdPrefix)
	if cmd.Flags().Changed(delayWriteFlagName) {

		var delayWriteFlagName string
		if cmdPrefix == "" {
			delayWriteFlagName = "delayWrite"
		} else {
			delayWriteFlagName = fmt.Sprintf("%v.delayWrite", cmdPrefix)
		}

		delayWriteFlagValue, err := cmd.Flags().GetBool(delayWriteFlagName)
		if err != nil {
			return err, false
		}
		m.DelayWrite = delayWriteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFileConsumerFileFlags(depth int, m *models.FileConsumer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileFlagName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(fileFlagName) {

		// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFileConsumerQueueThresholdFlags(depth int, m *models.FileConsumer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queueThresholdFlagName := fmt.Sprintf("%v.queueThreshold", cmdPrefix)
	if cmd.Flags().Changed(queueThresholdFlagName) {

		var queueThresholdFlagName string
		if cmdPrefix == "" {
			queueThresholdFlagName = "queueThreshold"
		} else {
			queueThresholdFlagName = fmt.Sprintf("%v.queueThreshold", cmdPrefix)
		}

		queueThresholdFlagValue, err := cmd.Flags().GetInt32(queueThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.QueueThreshold = queueThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFileConsumerSchedulerThreadSizeFlags(depth int, m *models.FileConsumer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schedulerThreadSizeFlagName := fmt.Sprintf("%v.schedulerThreadSize", cmdPrefix)
	if cmd.Flags().Changed(schedulerThreadSizeFlagName) {

		var schedulerThreadSizeFlagName string
		if cmdPrefix == "" {
			schedulerThreadSizeFlagName = "schedulerThreadSize"
		} else {
			schedulerThreadSizeFlagName = fmt.Sprintf("%v.schedulerThreadSize", cmdPrefix)
		}

		schedulerThreadSizeFlagValue, err := cmd.Flags().GetInt32(schedulerThreadSizeFlagName)
		if err != nil {
			return err, false
		}
		m.SchedulerThreadSize = schedulerThreadSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
