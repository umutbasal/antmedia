// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for ConsoleDataStoreFactory

// register flags to command
func registerModelConsoleDataStoreFactoryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConsoleDataStoreFactoryAppName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsoleDataStoreFactoryDataStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsoleDataStoreFactoryDbHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsoleDataStoreFactoryDbName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsoleDataStoreFactoryDbPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsoleDataStoreFactoryDbType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConsoleDataStoreFactoryDbUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConsoleDataStoreFactoryAppName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	appNameDescription := ``

	var appNameFlagName string
	if cmdPrefix == "" {
		appNameFlagName = "appName"
	} else {
		appNameFlagName = fmt.Sprintf("%v.appName", cmdPrefix)
	}

	var appNameFlagDefault string

	_ = cmd.PersistentFlags().String(appNameFlagName, appNameFlagDefault, appNameDescription)

	return nil
}

func registerConsoleDataStoreFactoryDataStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataStoreFlagName string
	if cmdPrefix == "" {
		dataStoreFlagName = "dataStore"
	} else {
		dataStoreFlagName = fmt.Sprintf("%v.dataStore", cmdPrefix)
	}

	if err := registerModelAbstractConsoleDataStoreFlags(depth+1, dataStoreFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConsoleDataStoreFactoryDbHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dbHostDescription := ``

	var dbHostFlagName string
	if cmdPrefix == "" {
		dbHostFlagName = "dbHost"
	} else {
		dbHostFlagName = fmt.Sprintf("%v.dbHost", cmdPrefix)
	}

	var dbHostFlagDefault string

	_ = cmd.PersistentFlags().String(dbHostFlagName, dbHostFlagDefault, dbHostDescription)

	return nil
}

func registerConsoleDataStoreFactoryDbName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dbNameDescription := ``

	var dbNameFlagName string
	if cmdPrefix == "" {
		dbNameFlagName = "dbName"
	} else {
		dbNameFlagName = fmt.Sprintf("%v.dbName", cmdPrefix)
	}

	var dbNameFlagDefault string

	_ = cmd.PersistentFlags().String(dbNameFlagName, dbNameFlagDefault, dbNameDescription)

	return nil
}

func registerConsoleDataStoreFactoryDbPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dbPasswordDescription := ``

	var dbPasswordFlagName string
	if cmdPrefix == "" {
		dbPasswordFlagName = "dbPassword"
	} else {
		dbPasswordFlagName = fmt.Sprintf("%v.dbPassword", cmdPrefix)
	}

	var dbPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(dbPasswordFlagName, dbPasswordFlagDefault, dbPasswordDescription)

	return nil
}

func registerConsoleDataStoreFactoryDbType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dbTypeDescription := ``

	var dbTypeFlagName string
	if cmdPrefix == "" {
		dbTypeFlagName = "dbType"
	} else {
		dbTypeFlagName = fmt.Sprintf("%v.dbType", cmdPrefix)
	}

	var dbTypeFlagDefault string

	_ = cmd.PersistentFlags().String(dbTypeFlagName, dbTypeFlagDefault, dbTypeDescription)

	return nil
}

func registerConsoleDataStoreFactoryDbUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dbUserDescription := ``

	var dbUserFlagName string
	if cmdPrefix == "" {
		dbUserFlagName = "dbUser"
	} else {
		dbUserFlagName = fmt.Sprintf("%v.dbUser", cmdPrefix)
	}

	var dbUserFlagDefault string

	_ = cmd.PersistentFlags().String(dbUserFlagName, dbUserFlagDefault, dbUserDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConsoleDataStoreFactoryFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, appNameAdded := retrieveConsoleDataStoreFactoryAppNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appNameAdded

	err, dataStoreAdded := retrieveConsoleDataStoreFactoryDataStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded

	err, dbHostAdded := retrieveConsoleDataStoreFactoryDbHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dbHostAdded

	err, dbNameAdded := retrieveConsoleDataStoreFactoryDbNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dbNameAdded

	err, dbPasswordAdded := retrieveConsoleDataStoreFactoryDbPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dbPasswordAdded

	err, dbTypeAdded := retrieveConsoleDataStoreFactoryDbTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dbTypeAdded

	err, dbUserAdded := retrieveConsoleDataStoreFactoryDbUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dbUserAdded

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryAppNameFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appNameFlagName := fmt.Sprintf("%v.appName", cmdPrefix)
	if cmd.Flags().Changed(appNameFlagName) {

		var appNameFlagName string
		if cmdPrefix == "" {
			appNameFlagName = "appName"
		} else {
			appNameFlagName = fmt.Sprintf("%v.appName", cmdPrefix)
		}

		appNameFlagValue, err := cmd.Flags().GetString(appNameFlagName)
		if err != nil {
			return err, false
		}
		m.AppName = appNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryDataStoreFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataStoreFlagName := fmt.Sprintf("%v.dataStore", cmdPrefix)
	if cmd.Flags().Changed(dataStoreFlagName) {
		// info: complex object dataStore AbstractConsoleDataStore is retrieved outside this Changed() block
	}
	dataStoreFlagValue := m.DataStore
	if swag.IsZero(dataStoreFlagValue) {
		dataStoreFlagValue = &models.AbstractConsoleDataStore{}
	}

	err, dataStoreAdded := retrieveModelAbstractConsoleDataStoreFlags(depth+1, dataStoreFlagValue, dataStoreFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded
	if dataStoreAdded {
		m.DataStore = dataStoreFlagValue
	}

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryDbHostFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dbHostFlagName := fmt.Sprintf("%v.dbHost", cmdPrefix)
	if cmd.Flags().Changed(dbHostFlagName) {

		var dbHostFlagName string
		if cmdPrefix == "" {
			dbHostFlagName = "dbHost"
		} else {
			dbHostFlagName = fmt.Sprintf("%v.dbHost", cmdPrefix)
		}

		dbHostFlagValue, err := cmd.Flags().GetString(dbHostFlagName)
		if err != nil {
			return err, false
		}
		m.DbHost = dbHostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryDbNameFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dbNameFlagName := fmt.Sprintf("%v.dbName", cmdPrefix)
	if cmd.Flags().Changed(dbNameFlagName) {

		var dbNameFlagName string
		if cmdPrefix == "" {
			dbNameFlagName = "dbName"
		} else {
			dbNameFlagName = fmt.Sprintf("%v.dbName", cmdPrefix)
		}

		dbNameFlagValue, err := cmd.Flags().GetString(dbNameFlagName)
		if err != nil {
			return err, false
		}
		m.DbName = dbNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryDbPasswordFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dbPasswordFlagName := fmt.Sprintf("%v.dbPassword", cmdPrefix)
	if cmd.Flags().Changed(dbPasswordFlagName) {

		var dbPasswordFlagName string
		if cmdPrefix == "" {
			dbPasswordFlagName = "dbPassword"
		} else {
			dbPasswordFlagName = fmt.Sprintf("%v.dbPassword", cmdPrefix)
		}

		dbPasswordFlagValue, err := cmd.Flags().GetString(dbPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.DbPassword = dbPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryDbTypeFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dbTypeFlagName := fmt.Sprintf("%v.dbType", cmdPrefix)
	if cmd.Flags().Changed(dbTypeFlagName) {

		var dbTypeFlagName string
		if cmdPrefix == "" {
			dbTypeFlagName = "dbType"
		} else {
			dbTypeFlagName = fmt.Sprintf("%v.dbType", cmdPrefix)
		}

		dbTypeFlagValue, err := cmd.Flags().GetString(dbTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DbType = dbTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConsoleDataStoreFactoryDbUserFlags(depth int, m *models.ConsoleDataStoreFactory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dbUserFlagName := fmt.Sprintf("%v.dbUser", cmdPrefix)
	if cmd.Flags().Changed(dbUserFlagName) {

		var dbUserFlagName string
		if cmdPrefix == "" {
			dbUserFlagName = "dbUser"
		} else {
			dbUserFlagName = fmt.Sprintf("%v.dbUser", cmdPrefix)
		}

		dbUserFlagValue, err := cmd.Flags().GetString(dbUserFlagName)
		if err != nil {
			return err, false
		}
		m.DbUser = dbUserFlagValue

		retAdded = true
	}

	return nil, retAdded
}
