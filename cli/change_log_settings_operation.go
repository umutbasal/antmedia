// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/umutbasal/antmedia/client/operations"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationOperationsChangeLogSettingsCmd returns a cmd to handle operation changeLogSettings
func makeOperationOperationsChangeLogSettingsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "changeLogSettings",
		Short: ``,
		RunE:  runOperationOperationsChangeLogSettings,
	}

	if err := registerOperationOperationsChangeLogSettingsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationOperationsChangeLogSettings uses cmd flags to call endpoint api
func runOperationOperationsChangeLogSettings(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := operations.NewChangeLogSettingsParams()
	if err, _ := retrieveOperationOperationsChangeLogSettingsLevelFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationOperationsChangeLogSettingsResult(appCli.Operations.ChangeLogSettings(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationOperationsChangeLogSettingsParamFlags registers all flags needed to fill params
func registerOperationOperationsChangeLogSettingsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationOperationsChangeLogSettingsLevelParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationOperationsChangeLogSettingsLevelParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	levelDescription := `Required. `

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	return nil
}

func retrieveOperationOperationsChangeLogSettingsLevelFlag(m *operations.ChangeLogSettingsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("level") {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = levelFlagValue

	}
	return nil, retAdded
}

// parseOperationOperationsChangeLogSettingsResult parses request result and return the string content
func parseOperationOperationsChangeLogSettingsResult(resp0 *operations.ChangeLogSettingsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*operations.ChangeLogSettingsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
