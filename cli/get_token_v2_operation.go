// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/umutbasal/antmedia/client/broadcast_rest_service"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBroadcastRestServiceGetTokenV2Cmd returns a cmd to handle operation getTokenV2
func makeOperationBroadcastRestServiceGetTokenV2Cmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTokenV2",
		Short: ``,
		RunE:  runOperationBroadcastRestServiceGetTokenV2,
	}

	if err := registerOperationBroadcastRestServiceGetTokenV2ParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBroadcastRestServiceGetTokenV2 uses cmd flags to call endpoint api
func runOperationBroadcastRestServiceGetTokenV2(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broadcast_rest_service.NewGetTokenV2Params()
	if err, _ := retrieveOperationBroadcastRestServiceGetTokenV2ExpireDateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetTokenV2IDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetTokenV2RoomIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetTokenV2TypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBroadcastRestServiceGetTokenV2Result(appCli.BroadcastRestService.GetTokenV2(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBroadcastRestServiceGetTokenV2ParamFlags registers all flags needed to fill params
func registerOperationBroadcastRestServiceGetTokenV2ParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBroadcastRestServiceGetTokenV2ExpireDateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetTokenV2IDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetTokenV2RoomIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetTokenV2TypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBroadcastRestServiceGetTokenV2ExpireDateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	expireDateDescription := `Required. The expire time of the token. It's in unix timestamp seconds`

	var expireDateFlagName string
	if cmdPrefix == "" {
		expireDateFlagName = "expireDate"
	} else {
		expireDateFlagName = fmt.Sprintf("%v.expireDate", cmdPrefix)
	}

	var expireDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expireDateFlagName, expireDateFlagDefault, expireDateDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetTokenV2IDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. The id of the stream`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetTokenV2RoomIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	roomIdDescription := `Room Id that token belongs to. It's not mandatory `

	var roomIdFlagName string
	if cmdPrefix == "" {
		roomIdFlagName = "roomId"
	} else {
		roomIdFlagName = fmt.Sprintf("%v.roomId", cmdPrefix)
	}

	var roomIdFlagDefault string

	_ = cmd.PersistentFlags().String(roomIdFlagName, roomIdFlagDefault, roomIdDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetTokenV2TypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Required. Type of the token. It may be play or publish `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationBroadcastRestServiceGetTokenV2ExpireDateFlag(m *broadcast_rest_service.GetTokenV2Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("expireDate") {

		var expireDateFlagName string
		if cmdPrefix == "" {
			expireDateFlagName = "expireDate"
		} else {
			expireDateFlagName = fmt.Sprintf("%v.expireDate", cmdPrefix)
		}

		expireDateFlagValue, err := cmd.Flags().GetInt64(expireDateFlagName)
		if err != nil {
			return err, false
		}
		m.ExpireDate = expireDateFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetTokenV2IDFlag(m *broadcast_rest_service.GetTokenV2Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetTokenV2RoomIDFlag(m *broadcast_rest_service.GetTokenV2Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("roomId") {

		var roomIdFlagName string
		if cmdPrefix == "" {
			roomIdFlagName = "roomId"
		} else {
			roomIdFlagName = fmt.Sprintf("%v.roomId", cmdPrefix)
		}

		roomIdFlagValue, err := cmd.Flags().GetString(roomIdFlagName)
		if err != nil {
			return err, false
		}
		m.RoomID = &roomIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetTokenV2TypeFlag(m *broadcast_rest_service.GetTokenV2Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

	}
	return nil, retAdded
}

// parseOperationBroadcastRestServiceGetTokenV2Result parses request result and return the string content
func parseOperationBroadcastRestServiceGetTokenV2Result(resp0 *broadcast_rest_service.GetTokenV2OK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broadcast_rest_service.GetTokenV2OK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*broadcast_rest_service.GetTokenV2BadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
