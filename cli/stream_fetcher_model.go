// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for StreamFetcher

// register flags to command
func registerModelStreamFetcherFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStreamFetcherAvpacket(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherBufferTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherCameraError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherDataStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherExceptionInThread(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherInstance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherMuxAdaptor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherRestartStream(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherStopRequestReceived(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherStopped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherStreamAlive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherStreamFetcherListener(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherStreamURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherThread(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStreamFetcherThreadActive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherAvpacket(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var avpacketFlagName string
	if cmdPrefix == "" {
		avpacketFlagName = "avpacket"
	} else {
		avpacketFlagName = fmt.Sprintf("%v.avpacket", cmdPrefix)
	}

	if err := registerModelAVPacketFlags(depth+1, avpacketFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherBufferTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bufferTimeDescription := ``

	var bufferTimeFlagName string
	if cmdPrefix == "" {
		bufferTimeFlagName = "bufferTime"
	} else {
		bufferTimeFlagName = fmt.Sprintf("%v.bufferTime", cmdPrefix)
	}

	var bufferTimeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(bufferTimeFlagName, bufferTimeFlagDefault, bufferTimeDescription)

	return nil
}

func registerStreamFetcherCameraError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cameraErrorFlagName string
	if cmdPrefix == "" {
		cameraErrorFlagName = "cameraError"
	} else {
		cameraErrorFlagName = fmt.Sprintf("%v.cameraError", cmdPrefix)
	}

	if err := registerModelResultFlags(depth+1, cameraErrorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherDataStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataStoreFlagName string
	if cmdPrefix == "" {
		dataStoreFlagName = "dataStore"
	} else {
		dataStoreFlagName = fmt.Sprintf("%v.dataStore", cmdPrefix)
	}

	if err := registerModelDataStoreFlags(depth+1, dataStoreFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherExceptionInThread(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exceptionInThreadDescription := ``

	var exceptionInThreadFlagName string
	if cmdPrefix == "" {
		exceptionInThreadFlagName = "exceptionInThread"
	} else {
		exceptionInThreadFlagName = fmt.Sprintf("%v.exceptionInThread", cmdPrefix)
	}

	var exceptionInThreadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(exceptionInThreadFlagName, exceptionInThreadFlagDefault, exceptionInThreadDescription)

	return nil
}

func registerStreamFetcherInstance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var instanceFlagName string
	if cmdPrefix == "" {
		instanceFlagName = "instance"
	} else {
		instanceFlagName = fmt.Sprintf("%v.instance", cmdPrefix)
	}

	if err := registerModelAntMediaApplicationAdapterFlags(depth+1, instanceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherMuxAdaptor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var muxAdaptorFlagName string
	if cmdPrefix == "" {
		muxAdaptorFlagName = "muxAdaptor"
	} else {
		muxAdaptorFlagName = fmt.Sprintf("%v.muxAdaptor", cmdPrefix)
	}

	if err := registerModelMuxAdaptorFlags(depth+1, muxAdaptorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherRestartStream(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restartStreamDescription := ``

	var restartStreamFlagName string
	if cmdPrefix == "" {
		restartStreamFlagName = "restartStream"
	} else {
		restartStreamFlagName = fmt.Sprintf("%v.restartStream", cmdPrefix)
	}

	var restartStreamFlagDefault bool

	_ = cmd.PersistentFlags().Bool(restartStreamFlagName, restartStreamFlagDefault, restartStreamDescription)

	return nil
}

func registerStreamFetcherScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scopeFlagName string
	if cmdPrefix == "" {
		scopeFlagName = "scope"
	} else {
		scopeFlagName = fmt.Sprintf("%v.scope", cmdPrefix)
	}

	if err := registerModelIScopeFlags(depth+1, scopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherStopRequestReceived(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stopRequestReceivedDescription := ``

	var stopRequestReceivedFlagName string
	if cmdPrefix == "" {
		stopRequestReceivedFlagName = "stopRequestReceived"
	} else {
		stopRequestReceivedFlagName = fmt.Sprintf("%v.stopRequestReceived", cmdPrefix)
	}

	var stopRequestReceivedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stopRequestReceivedFlagName, stopRequestReceivedFlagDefault, stopRequestReceivedDescription)

	return nil
}

func registerStreamFetcherStopped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stoppedDescription := ``

	var stoppedFlagName string
	if cmdPrefix == "" {
		stoppedFlagName = "stopped"
	} else {
		stoppedFlagName = fmt.Sprintf("%v.stopped", cmdPrefix)
	}

	var stoppedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stoppedFlagName, stoppedFlagDefault, stoppedDescription)

	return nil
}

func registerStreamFetcherStreamAlive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamAliveDescription := ``

	var streamAliveFlagName string
	if cmdPrefix == "" {
		streamAliveFlagName = "streamAlive"
	} else {
		streamAliveFlagName = fmt.Sprintf("%v.streamAlive", cmdPrefix)
	}

	var streamAliveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(streamAliveFlagName, streamAliveFlagDefault, streamAliveDescription)

	return nil
}

func registerStreamFetcherStreamFetcherListener(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamFetcherListener IStreamFetcherListener map type is not supported by go-swagger cli yet

	return nil
}

func registerStreamFetcherStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamIdDescription := ``

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func registerStreamFetcherStreamURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamUrlDescription := ``

	var streamUrlFlagName string
	if cmdPrefix == "" {
		streamUrlFlagName = "streamUrl"
	} else {
		streamUrlFlagName = fmt.Sprintf("%v.streamUrl", cmdPrefix)
	}

	var streamUrlFlagDefault string

	_ = cmd.PersistentFlags().String(streamUrlFlagName, streamUrlFlagDefault, streamUrlDescription)

	return nil
}

func registerStreamFetcherThread(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var threadFlagName string
	if cmdPrefix == "" {
		threadFlagName = "thread"
	} else {
		threadFlagName = fmt.Sprintf("%v.thread", cmdPrefix)
	}

	if err := registerModelWorkerThreadFlags(depth+1, threadFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStreamFetcherThreadActive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	threadActiveDescription := ``

	var threadActiveFlagName string
	if cmdPrefix == "" {
		threadActiveFlagName = "threadActive"
	} else {
		threadActiveFlagName = fmt.Sprintf("%v.threadActive", cmdPrefix)
	}

	var threadActiveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(threadActiveFlagName, threadActiveFlagDefault, threadActiveDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStreamFetcherFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, avpacketAdded := retrieveStreamFetcherAvpacketFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || avpacketAdded

	err, bufferTimeAdded := retrieveStreamFetcherBufferTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufferTimeAdded

	err, cameraErrorAdded := retrieveStreamFetcherCameraErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cameraErrorAdded

	err, dataStoreAdded := retrieveStreamFetcherDataStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded

	err, exceptionInThreadAdded := retrieveStreamFetcherExceptionInThreadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exceptionInThreadAdded

	err, instanceAdded := retrieveStreamFetcherInstanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceAdded

	err, muxAdaptorAdded := retrieveStreamFetcherMuxAdaptorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || muxAdaptorAdded

	err, restartStreamAdded := retrieveStreamFetcherRestartStreamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartStreamAdded

	err, scopeAdded := retrieveStreamFetcherScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, stopRequestReceivedAdded := retrieveStreamFetcherStopRequestReceivedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stopRequestReceivedAdded

	err, stoppedAdded := retrieveStreamFetcherStoppedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stoppedAdded

	err, streamAliveAdded := retrieveStreamFetcherStreamAliveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamAliveAdded

	err, streamFetcherListenerAdded := retrieveStreamFetcherStreamFetcherListenerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamFetcherListenerAdded

	err, streamIdAdded := retrieveStreamFetcherStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, streamUrlAdded := retrieveStreamFetcherStreamURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamUrlAdded

	err, threadAdded := retrieveStreamFetcherThreadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadAdded

	err, threadActiveAdded := retrieveStreamFetcherThreadActiveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadActiveAdded

	return nil, retAdded
}

func retrieveStreamFetcherAvpacketFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	avpacketFlagName := fmt.Sprintf("%v.avpacket", cmdPrefix)
	if cmd.Flags().Changed(avpacketFlagName) {
		// info: complex object avpacket AVPacket is retrieved outside this Changed() block
	}
	avpacketFlagValue := m.Avpacket
	if swag.IsZero(avpacketFlagValue) {
		avpacketFlagValue = &models.AVPacket{}
	}

	err, avpacketAdded := retrieveModelAVPacketFlags(depth+1, avpacketFlagValue, avpacketFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || avpacketAdded
	if avpacketAdded {
		m.Avpacket = avpacketFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherBufferTimeFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufferTimeFlagName := fmt.Sprintf("%v.bufferTime", cmdPrefix)
	if cmd.Flags().Changed(bufferTimeFlagName) {

		var bufferTimeFlagName string
		if cmdPrefix == "" {
			bufferTimeFlagName = "bufferTime"
		} else {
			bufferTimeFlagName = fmt.Sprintf("%v.bufferTime", cmdPrefix)
		}

		bufferTimeFlagValue, err := cmd.Flags().GetInt32(bufferTimeFlagName)
		if err != nil {
			return err, false
		}
		m.BufferTime = bufferTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherCameraErrorFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cameraErrorFlagName := fmt.Sprintf("%v.cameraError", cmdPrefix)
	if cmd.Flags().Changed(cameraErrorFlagName) {
		// info: complex object cameraError Result is retrieved outside this Changed() block
	}
	cameraErrorFlagValue := m.CameraError
	if swag.IsZero(cameraErrorFlagValue) {
		cameraErrorFlagValue = &models.Result{}
	}

	err, cameraErrorAdded := retrieveModelResultFlags(depth+1, cameraErrorFlagValue, cameraErrorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cameraErrorAdded
	if cameraErrorAdded {
		m.CameraError = cameraErrorFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherDataStoreFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataStoreFlagName := fmt.Sprintf("%v.dataStore", cmdPrefix)
	if cmd.Flags().Changed(dataStoreFlagName) {
		// info: complex object dataStore DataStore is retrieved outside this Changed() block
	}
	dataStoreFlagValue := m.DataStore
	if swag.IsZero(dataStoreFlagValue) {
		dataStoreFlagValue = &models.DataStore{}
	}

	err, dataStoreAdded := retrieveModelDataStoreFlags(depth+1, dataStoreFlagValue, dataStoreFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded
	if dataStoreAdded {
		m.DataStore = dataStoreFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherExceptionInThreadFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exceptionInThreadFlagName := fmt.Sprintf("%v.exceptionInThread", cmdPrefix)
	if cmd.Flags().Changed(exceptionInThreadFlagName) {

		var exceptionInThreadFlagName string
		if cmdPrefix == "" {
			exceptionInThreadFlagName = "exceptionInThread"
		} else {
			exceptionInThreadFlagName = fmt.Sprintf("%v.exceptionInThread", cmdPrefix)
		}

		exceptionInThreadFlagValue, err := cmd.Flags().GetBool(exceptionInThreadFlagName)
		if err != nil {
			return err, false
		}
		m.ExceptionInThread = exceptionInThreadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherInstanceFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceFlagName := fmt.Sprintf("%v.instance", cmdPrefix)
	if cmd.Flags().Changed(instanceFlagName) {
		// info: complex object instance AntMediaApplicationAdapter is retrieved outside this Changed() block
	}
	instanceFlagValue := m.Instance
	if swag.IsZero(instanceFlagValue) {
		instanceFlagValue = &models.AntMediaApplicationAdapter{}
	}

	err, instanceAdded := retrieveModelAntMediaApplicationAdapterFlags(depth+1, instanceFlagValue, instanceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceAdded
	if instanceAdded {
		m.Instance = instanceFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherMuxAdaptorFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	muxAdaptorFlagName := fmt.Sprintf("%v.muxAdaptor", cmdPrefix)
	if cmd.Flags().Changed(muxAdaptorFlagName) {
		// info: complex object muxAdaptor MuxAdaptor is retrieved outside this Changed() block
	}
	muxAdaptorFlagValue := m.MuxAdaptor
	if swag.IsZero(muxAdaptorFlagValue) {
		muxAdaptorFlagValue = &models.MuxAdaptor{}
	}

	err, muxAdaptorAdded := retrieveModelMuxAdaptorFlags(depth+1, muxAdaptorFlagValue, muxAdaptorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || muxAdaptorAdded
	if muxAdaptorAdded {
		m.MuxAdaptor = muxAdaptorFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherRestartStreamFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	restartStreamFlagName := fmt.Sprintf("%v.restartStream", cmdPrefix)
	if cmd.Flags().Changed(restartStreamFlagName) {

		var restartStreamFlagName string
		if cmdPrefix == "" {
			restartStreamFlagName = "restartStream"
		} else {
			restartStreamFlagName = fmt.Sprintf("%v.restartStream", cmdPrefix)
		}

		restartStreamFlagValue, err := cmd.Flags().GetBool(restartStreamFlagName)
		if err != nil {
			return err, false
		}
		m.RestartStream = restartStreamFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherScopeFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeFlagName := fmt.Sprintf("%v.scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {
		// info: complex object scope IScope is retrieved outside this Changed() block
	}
	scopeFlagValue := m.Scope
	if swag.IsZero(scopeFlagValue) {
		scopeFlagValue = &models.IScope{}
	}

	err, scopeAdded := retrieveModelIScopeFlags(depth+1, scopeFlagValue, scopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded
	if scopeAdded {
		m.Scope = scopeFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherStopRequestReceivedFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stopRequestReceivedFlagName := fmt.Sprintf("%v.stopRequestReceived", cmdPrefix)
	if cmd.Flags().Changed(stopRequestReceivedFlagName) {

		var stopRequestReceivedFlagName string
		if cmdPrefix == "" {
			stopRequestReceivedFlagName = "stopRequestReceived"
		} else {
			stopRequestReceivedFlagName = fmt.Sprintf("%v.stopRequestReceived", cmdPrefix)
		}

		stopRequestReceivedFlagValue, err := cmd.Flags().GetBool(stopRequestReceivedFlagName)
		if err != nil {
			return err, false
		}
		m.StopRequestReceived = stopRequestReceivedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherStoppedFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stoppedFlagName := fmt.Sprintf("%v.stopped", cmdPrefix)
	if cmd.Flags().Changed(stoppedFlagName) {

		var stoppedFlagName string
		if cmdPrefix == "" {
			stoppedFlagName = "stopped"
		} else {
			stoppedFlagName = fmt.Sprintf("%v.stopped", cmdPrefix)
		}

		stoppedFlagValue, err := cmd.Flags().GetBool(stoppedFlagName)
		if err != nil {
			return err, false
		}
		m.Stopped = stoppedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherStreamAliveFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamAliveFlagName := fmt.Sprintf("%v.streamAlive", cmdPrefix)
	if cmd.Flags().Changed(streamAliveFlagName) {

		var streamAliveFlagName string
		if cmdPrefix == "" {
			streamAliveFlagName = "streamAlive"
		} else {
			streamAliveFlagName = fmt.Sprintf("%v.streamAlive", cmdPrefix)
		}

		streamAliveFlagValue, err := cmd.Flags().GetBool(streamAliveFlagName)
		if err != nil {
			return err, false
		}
		m.StreamAlive = streamAliveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherStreamFetcherListenerFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamFetcherListenerFlagName := fmt.Sprintf("%v.streamFetcherListener", cmdPrefix)
	if cmd.Flags().Changed(streamFetcherListenerFlagName) {
		// warning: streamFetcherListener map type IStreamFetcherListener is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStreamFetcherStreamIDFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherStreamURLFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamUrlFlagName := fmt.Sprintf("%v.streamUrl", cmdPrefix)
	if cmd.Flags().Changed(streamUrlFlagName) {

		var streamUrlFlagName string
		if cmdPrefix == "" {
			streamUrlFlagName = "streamUrl"
		} else {
			streamUrlFlagName = fmt.Sprintf("%v.streamUrl", cmdPrefix)
		}

		streamUrlFlagValue, err := cmd.Flags().GetString(streamUrlFlagName)
		if err != nil {
			return err, false
		}
		m.StreamURL = streamUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStreamFetcherThreadFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	threadFlagName := fmt.Sprintf("%v.thread", cmdPrefix)
	if cmd.Flags().Changed(threadFlagName) {
		// info: complex object thread WorkerThread is retrieved outside this Changed() block
	}
	threadFlagValue := m.Thread
	if swag.IsZero(threadFlagValue) {
		threadFlagValue = &models.WorkerThread{}
	}

	err, threadAdded := retrieveModelWorkerThreadFlags(depth+1, threadFlagValue, threadFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadAdded
	if threadAdded {
		m.Thread = threadFlagValue
	}

	return nil, retAdded
}

func retrieveStreamFetcherThreadActiveFlags(depth int, m *models.StreamFetcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	threadActiveFlagName := fmt.Sprintf("%v.threadActive", cmdPrefix)
	if cmd.Flags().Changed(threadActiveFlagName) {

		var threadActiveFlagName string
		if cmdPrefix == "" {
			threadActiveFlagName = "threadActive"
		} else {
			threadActiveFlagName = fmt.Sprintf("%v.threadActive", cmdPrefix)
		}

		threadActiveFlagValue, err := cmd.Flags().GetBool(threadActiveFlagName)
		if err != nil {
			return err, false
		}
		m.ThreadActive = threadActiveFlagValue

		retAdded = true
	}

	return nil, retAdded
}
