// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Package

// register flags to command
func registerModelPackageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPackageAnnotations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageDeclaredAnnotations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageImplementationTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageImplementationVendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageImplementationVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageSealed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageSpecificationTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageSpecificationVendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPackageSpecificationVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPackageAnnotations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: annotations []Annotation array type is not supported by go-swagger cli yet

	return nil
}

func registerPackageDeclaredAnnotations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: declaredAnnotations []Annotation array type is not supported by go-swagger cli yet

	return nil
}

func registerPackageImplementationTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	implementationTitleDescription := ``

	var implementationTitleFlagName string
	if cmdPrefix == "" {
		implementationTitleFlagName = "implementationTitle"
	} else {
		implementationTitleFlagName = fmt.Sprintf("%v.implementationTitle", cmdPrefix)
	}

	var implementationTitleFlagDefault string

	_ = cmd.PersistentFlags().String(implementationTitleFlagName, implementationTitleFlagDefault, implementationTitleDescription)

	return nil
}

func registerPackageImplementationVendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	implementationVendorDescription := ``

	var implementationVendorFlagName string
	if cmdPrefix == "" {
		implementationVendorFlagName = "implementationVendor"
	} else {
		implementationVendorFlagName = fmt.Sprintf("%v.implementationVendor", cmdPrefix)
	}

	var implementationVendorFlagDefault string

	_ = cmd.PersistentFlags().String(implementationVendorFlagName, implementationVendorFlagDefault, implementationVendorDescription)

	return nil
}

func registerPackageImplementationVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	implementationVersionDescription := ``

	var implementationVersionFlagName string
	if cmdPrefix == "" {
		implementationVersionFlagName = "implementationVersion"
	} else {
		implementationVersionFlagName = fmt.Sprintf("%v.implementationVersion", cmdPrefix)
	}

	var implementationVersionFlagDefault string

	_ = cmd.PersistentFlags().String(implementationVersionFlagName, implementationVersionFlagDefault, implementationVersionDescription)

	return nil
}

func registerPackageName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPackageSealed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sealedDescription := ``

	var sealedFlagName string
	if cmdPrefix == "" {
		sealedFlagName = "sealed"
	} else {
		sealedFlagName = fmt.Sprintf("%v.sealed", cmdPrefix)
	}

	var sealedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sealedFlagName, sealedFlagDefault, sealedDescription)

	return nil
}

func registerPackageSpecificationTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	specificationTitleDescription := ``

	var specificationTitleFlagName string
	if cmdPrefix == "" {
		specificationTitleFlagName = "specificationTitle"
	} else {
		specificationTitleFlagName = fmt.Sprintf("%v.specificationTitle", cmdPrefix)
	}

	var specificationTitleFlagDefault string

	_ = cmd.PersistentFlags().String(specificationTitleFlagName, specificationTitleFlagDefault, specificationTitleDescription)

	return nil
}

func registerPackageSpecificationVendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	specificationVendorDescription := ``

	var specificationVendorFlagName string
	if cmdPrefix == "" {
		specificationVendorFlagName = "specificationVendor"
	} else {
		specificationVendorFlagName = fmt.Sprintf("%v.specificationVendor", cmdPrefix)
	}

	var specificationVendorFlagDefault string

	_ = cmd.PersistentFlags().String(specificationVendorFlagName, specificationVendorFlagDefault, specificationVendorDescription)

	return nil
}

func registerPackageSpecificationVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	specificationVersionDescription := ``

	var specificationVersionFlagName string
	if cmdPrefix == "" {
		specificationVersionFlagName = "specificationVersion"
	} else {
		specificationVersionFlagName = fmt.Sprintf("%v.specificationVersion", cmdPrefix)
	}

	var specificationVersionFlagDefault string

	_ = cmd.PersistentFlags().String(specificationVersionFlagName, specificationVersionFlagDefault, specificationVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPackageFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, annotationsAdded := retrievePackageAnnotationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || annotationsAdded

	err, declaredAnnotationsAdded := retrievePackageDeclaredAnnotationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || declaredAnnotationsAdded

	err, implementationTitleAdded := retrievePackageImplementationTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || implementationTitleAdded

	err, implementationVendorAdded := retrievePackageImplementationVendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || implementationVendorAdded

	err, implementationVersionAdded := retrievePackageImplementationVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || implementationVersionAdded

	err, nameAdded := retrievePackageNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, sealedAdded := retrievePackageSealedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sealedAdded

	err, specificationTitleAdded := retrievePackageSpecificationTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specificationTitleAdded

	err, specificationVendorAdded := retrievePackageSpecificationVendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specificationVendorAdded

	err, specificationVersionAdded := retrievePackageSpecificationVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specificationVersionAdded

	return nil, retAdded
}

func retrievePackageAnnotationsFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	annotationsFlagName := fmt.Sprintf("%v.annotations", cmdPrefix)
	if cmd.Flags().Changed(annotationsFlagName) {
		// warning: annotations array type []Annotation is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePackageDeclaredAnnotationsFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	declaredAnnotationsFlagName := fmt.Sprintf("%v.declaredAnnotations", cmdPrefix)
	if cmd.Flags().Changed(declaredAnnotationsFlagName) {
		// warning: declaredAnnotations array type []Annotation is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePackageImplementationTitleFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	implementationTitleFlagName := fmt.Sprintf("%v.implementationTitle", cmdPrefix)
	if cmd.Flags().Changed(implementationTitleFlagName) {

		var implementationTitleFlagName string
		if cmdPrefix == "" {
			implementationTitleFlagName = "implementationTitle"
		} else {
			implementationTitleFlagName = fmt.Sprintf("%v.implementationTitle", cmdPrefix)
		}

		implementationTitleFlagValue, err := cmd.Flags().GetString(implementationTitleFlagName)
		if err != nil {
			return err, false
		}
		m.ImplementationTitle = implementationTitleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageImplementationVendorFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	implementationVendorFlagName := fmt.Sprintf("%v.implementationVendor", cmdPrefix)
	if cmd.Flags().Changed(implementationVendorFlagName) {

		var implementationVendorFlagName string
		if cmdPrefix == "" {
			implementationVendorFlagName = "implementationVendor"
		} else {
			implementationVendorFlagName = fmt.Sprintf("%v.implementationVendor", cmdPrefix)
		}

		implementationVendorFlagValue, err := cmd.Flags().GetString(implementationVendorFlagName)
		if err != nil {
			return err, false
		}
		m.ImplementationVendor = implementationVendorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageImplementationVersionFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	implementationVersionFlagName := fmt.Sprintf("%v.implementationVersion", cmdPrefix)
	if cmd.Flags().Changed(implementationVersionFlagName) {

		var implementationVersionFlagName string
		if cmdPrefix == "" {
			implementationVersionFlagName = "implementationVersion"
		} else {
			implementationVersionFlagName = fmt.Sprintf("%v.implementationVersion", cmdPrefix)
		}

		implementationVersionFlagValue, err := cmd.Flags().GetString(implementationVersionFlagName)
		if err != nil {
			return err, false
		}
		m.ImplementationVersion = implementationVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageNameFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageSealedFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sealedFlagName := fmt.Sprintf("%v.sealed", cmdPrefix)
	if cmd.Flags().Changed(sealedFlagName) {

		var sealedFlagName string
		if cmdPrefix == "" {
			sealedFlagName = "sealed"
		} else {
			sealedFlagName = fmt.Sprintf("%v.sealed", cmdPrefix)
		}

		sealedFlagValue, err := cmd.Flags().GetBool(sealedFlagName)
		if err != nil {
			return err, false
		}
		m.Sealed = sealedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageSpecificationTitleFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specificationTitleFlagName := fmt.Sprintf("%v.specificationTitle", cmdPrefix)
	if cmd.Flags().Changed(specificationTitleFlagName) {

		var specificationTitleFlagName string
		if cmdPrefix == "" {
			specificationTitleFlagName = "specificationTitle"
		} else {
			specificationTitleFlagName = fmt.Sprintf("%v.specificationTitle", cmdPrefix)
		}

		specificationTitleFlagValue, err := cmd.Flags().GetString(specificationTitleFlagName)
		if err != nil {
			return err, false
		}
		m.SpecificationTitle = specificationTitleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageSpecificationVendorFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specificationVendorFlagName := fmt.Sprintf("%v.specificationVendor", cmdPrefix)
	if cmd.Flags().Changed(specificationVendorFlagName) {

		var specificationVendorFlagName string
		if cmdPrefix == "" {
			specificationVendorFlagName = "specificationVendor"
		} else {
			specificationVendorFlagName = fmt.Sprintf("%v.specificationVendor", cmdPrefix)
		}

		specificationVendorFlagValue, err := cmd.Flags().GetString(specificationVendorFlagName)
		if err != nil {
			return err, false
		}
		m.SpecificationVendor = specificationVendorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePackageSpecificationVersionFlags(depth int, m *models.Package, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specificationVersionFlagName := fmt.Sprintf("%v.specificationVersion", cmdPrefix)
	if cmd.Flags().Changed(specificationVersionFlagName) {

		var specificationVersionFlagName string
		if cmdPrefix == "" {
			specificationVersionFlagName = "specificationVersion"
		} else {
			specificationVersionFlagName = fmt.Sprintf("%v.specificationVersion", cmdPrefix)
		}

		specificationVersionFlagValue, err := cmd.Flags().GetString(specificationVersionFlagName)
		if err != nil {
			return err, false
		}
		m.SpecificationVersion = specificationVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
