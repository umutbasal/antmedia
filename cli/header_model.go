// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Header

// register flags to command
func registerModelHeaderFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHeaderChannelID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderEmpty(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderExtendedTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderTimer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderTimerBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHeaderTimerDelta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHeaderChannelID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelIdDescription := ``

	var channelIdFlagName string
	if cmdPrefix == "" {
		channelIdFlagName = "channelId"
	} else {
		channelIdFlagName = fmt.Sprintf("%v.channelId", cmdPrefix)
	}

	var channelIdFlagDefault int32

	_ = cmd.PersistentFlags().Int32(channelIdFlagName, channelIdFlagDefault, channelIdDescription)

	return nil
}

func registerHeaderDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive dataType strfmt.Base64 is not supported by go-swagger cli yet

	return nil
}

func registerHeaderEmpty(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emptyDescription := ``

	var emptyFlagName string
	if cmdPrefix == "" {
		emptyFlagName = "empty"
	} else {
		emptyFlagName = fmt.Sprintf("%v.empty", cmdPrefix)
	}

	var emptyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(emptyFlagName, emptyFlagDefault, emptyDescription)

	return nil
}

func registerHeaderExtendedTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	extendedTimestampDescription := ``

	var extendedTimestampFlagName string
	if cmdPrefix == "" {
		extendedTimestampFlagName = "extendedTimestamp"
	} else {
		extendedTimestampFlagName = fmt.Sprintf("%v.extendedTimestamp", cmdPrefix)
	}

	var extendedTimestampFlagDefault int32

	_ = cmd.PersistentFlags().Int32(extendedTimestampFlagName, extendedTimestampFlagDefault, extendedTimestampDescription)

	return nil
}

func registerHeaderSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerHeaderStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamId Number map type is not supported by go-swagger cli yet

	return nil
}

func registerHeaderTimer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timerDescription := ``

	var timerFlagName string
	if cmdPrefix == "" {
		timerFlagName = "timer"
	} else {
		timerFlagName = fmt.Sprintf("%v.timer", cmdPrefix)
	}

	var timerFlagDefault int32

	_ = cmd.PersistentFlags().Int32(timerFlagName, timerFlagDefault, timerDescription)

	return nil
}

func registerHeaderTimerBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timerBaseDescription := ``

	var timerBaseFlagName string
	if cmdPrefix == "" {
		timerBaseFlagName = "timerBase"
	} else {
		timerBaseFlagName = fmt.Sprintf("%v.timerBase", cmdPrefix)
	}

	var timerBaseFlagDefault int32

	_ = cmd.PersistentFlags().Int32(timerBaseFlagName, timerBaseFlagDefault, timerBaseDescription)

	return nil
}

func registerHeaderTimerDelta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timerDeltaDescription := ``

	var timerDeltaFlagName string
	if cmdPrefix == "" {
		timerDeltaFlagName = "timerDelta"
	} else {
		timerDeltaFlagName = fmt.Sprintf("%v.timerDelta", cmdPrefix)
	}

	var timerDeltaFlagDefault int32

	_ = cmd.PersistentFlags().Int32(timerDeltaFlagName, timerDeltaFlagDefault, timerDeltaDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHeaderFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, channelIdAdded := retrieveHeaderChannelIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelIdAdded

	err, dataTypeAdded := retrieveHeaderDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataTypeAdded

	err, emptyAdded := retrieveHeaderEmptyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emptyAdded

	err, extendedTimestampAdded := retrieveHeaderExtendedTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extendedTimestampAdded

	err, sizeAdded := retrieveHeaderSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, streamIdAdded := retrieveHeaderStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, timerAdded := retrieveHeaderTimerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timerAdded

	err, timerBaseAdded := retrieveHeaderTimerBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timerBaseAdded

	err, timerDeltaAdded := retrieveHeaderTimerDeltaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timerDeltaAdded

	return nil, retAdded
}

func retrieveHeaderChannelIDFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelIdFlagName := fmt.Sprintf("%v.channelId", cmdPrefix)
	if cmd.Flags().Changed(channelIdFlagName) {

		var channelIdFlagName string
		if cmdPrefix == "" {
			channelIdFlagName = "channelId"
		} else {
			channelIdFlagName = fmt.Sprintf("%v.channelId", cmdPrefix)
		}

		channelIdFlagValue, err := cmd.Flags().GetInt32(channelIdFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelID = channelIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderDataTypeFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataTypeFlagName := fmt.Sprintf("%v.dataType", cmdPrefix)
	if cmd.Flags().Changed(dataTypeFlagName) {

		// warning: primitive dataType strfmt.Base64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderEmptyFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emptyFlagName := fmt.Sprintf("%v.empty", cmdPrefix)
	if cmd.Flags().Changed(emptyFlagName) {

		var emptyFlagName string
		if cmdPrefix == "" {
			emptyFlagName = "empty"
		} else {
			emptyFlagName = fmt.Sprintf("%v.empty", cmdPrefix)
		}

		emptyFlagValue, err := cmd.Flags().GetBool(emptyFlagName)
		if err != nil {
			return err, false
		}
		m.Empty = emptyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderExtendedTimestampFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	extendedTimestampFlagName := fmt.Sprintf("%v.extendedTimestamp", cmdPrefix)
	if cmd.Flags().Changed(extendedTimestampFlagName) {

		var extendedTimestampFlagName string
		if cmdPrefix == "" {
			extendedTimestampFlagName = "extendedTimestamp"
		} else {
			extendedTimestampFlagName = fmt.Sprintf("%v.extendedTimestamp", cmdPrefix)
		}

		extendedTimestampFlagValue, err := cmd.Flags().GetInt32(extendedTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.ExtendedTimestamp = extendedTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderSizeFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt32(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderStreamIDFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {
		// warning: streamId map type Number is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHeaderTimerFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timerFlagName := fmt.Sprintf("%v.timer", cmdPrefix)
	if cmd.Flags().Changed(timerFlagName) {

		var timerFlagName string
		if cmdPrefix == "" {
			timerFlagName = "timer"
		} else {
			timerFlagName = fmt.Sprintf("%v.timer", cmdPrefix)
		}

		timerFlagValue, err := cmd.Flags().GetInt32(timerFlagName)
		if err != nil {
			return err, false
		}
		m.Timer = timerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderTimerBaseFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timerBaseFlagName := fmt.Sprintf("%v.timerBase", cmdPrefix)
	if cmd.Flags().Changed(timerBaseFlagName) {

		var timerBaseFlagName string
		if cmdPrefix == "" {
			timerBaseFlagName = "timerBase"
		} else {
			timerBaseFlagName = fmt.Sprintf("%v.timerBase", cmdPrefix)
		}

		timerBaseFlagValue, err := cmd.Flags().GetInt32(timerBaseFlagName)
		if err != nil {
			return err, false
		}
		m.TimerBase = timerBaseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHeaderTimerDeltaFlags(depth int, m *models.Header, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timerDeltaFlagName := fmt.Sprintf("%v.timerDelta", cmdPrefix)
	if cmd.Flags().Changed(timerDeltaFlagName) {

		var timerDeltaFlagName string
		if cmdPrefix == "" {
			timerDeltaFlagName = "timerDelta"
		} else {
			timerDeltaFlagName = fmt.Sprintf("%v.timerDelta", cmdPrefix)
		}

		timerDeltaFlagValue, err := cmd.Flags().GetInt32(timerDeltaFlagName)
		if err != nil {
			return err, false
		}
		m.TimerDelta = timerDeltaFlagValue

		retAdded = true
	}

	return nil, retAdded
}
