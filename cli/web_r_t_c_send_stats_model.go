// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for WebRTCSendStats

// register flags to command
func registerModelWebRTCSendStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebRTCSendStatsAudioSendStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCSendStatsVideoSendStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebRTCSendStatsAudioSendStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var audioSendStatsFlagName string
	if cmdPrefix == "" {
		audioSendStatsFlagName = "audioSendStats"
	} else {
		audioSendStatsFlagName = fmt.Sprintf("%v.audioSendStats", cmdPrefix)
	}

	if err := registerModelWebRTCAudioSendStatsFlags(depth+1, audioSendStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebRTCSendStatsVideoSendStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var videoSendStatsFlagName string
	if cmdPrefix == "" {
		videoSendStatsFlagName = "videoSendStats"
	} else {
		videoSendStatsFlagName = fmt.Sprintf("%v.videoSendStats", cmdPrefix)
	}

	if err := registerModelWebRTCVideoSendStatsFlags(depth+1, videoSendStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebRTCSendStatsFlags(depth int, m *models.WebRTCSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, audioSendStatsAdded := retrieveWebRTCSendStatsAudioSendStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioSendStatsAdded

	err, videoSendStatsAdded := retrieveWebRTCSendStatsVideoSendStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoSendStatsAdded

	return nil, retAdded
}

func retrieveWebRTCSendStatsAudioSendStatsFlags(depth int, m *models.WebRTCSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioSendStatsFlagName := fmt.Sprintf("%v.audioSendStats", cmdPrefix)
	if cmd.Flags().Changed(audioSendStatsFlagName) {
		// info: complex object audioSendStats WebRTCAudioSendStats is retrieved outside this Changed() block
	}
	audioSendStatsFlagValue := m.AudioSendStats
	if swag.IsZero(audioSendStatsFlagValue) {
		audioSendStatsFlagValue = &models.WebRTCAudioSendStats{}
	}

	err, audioSendStatsAdded := retrieveModelWebRTCAudioSendStatsFlags(depth+1, audioSendStatsFlagValue, audioSendStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioSendStatsAdded
	if audioSendStatsAdded {
		m.AudioSendStats = audioSendStatsFlagValue
	}

	return nil, retAdded
}

func retrieveWebRTCSendStatsVideoSendStatsFlags(depth int, m *models.WebRTCSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoSendStatsFlagName := fmt.Sprintf("%v.videoSendStats", cmdPrefix)
	if cmd.Flags().Changed(videoSendStatsFlagName) {
		// info: complex object videoSendStats WebRTCVideoSendStats is retrieved outside this Changed() block
	}
	videoSendStatsFlagValue := m.VideoSendStats
	if swag.IsZero(videoSendStatsFlagValue) {
		videoSendStatsFlagValue = &models.WebRTCVideoSendStats{}
	}

	err, videoSendStatsAdded := retrieveModelWebRTCVideoSendStatsFlags(depth+1, videoSendStatsFlagValue, videoSendStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoSendStatsAdded
	if videoSendStatsAdded {
		m.VideoSendStats = videoSendStatsFlagValue
	}

	return nil, retAdded
}
