// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for ApplicationInfo

// register flags to command
func registerModelApplicationInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerApplicationInfoLiveStreamCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerApplicationInfoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerApplicationInfoStorage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerApplicationInfoVodCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerApplicationInfoLiveStreamCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	liveStreamCountDescription := ``

	var liveStreamCountFlagName string
	if cmdPrefix == "" {
		liveStreamCountFlagName = "liveStreamCount"
	} else {
		liveStreamCountFlagName = fmt.Sprintf("%v.liveStreamCount", cmdPrefix)
	}

	var liveStreamCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(liveStreamCountFlagName, liveStreamCountFlagDefault, liveStreamCountDescription)

	return nil
}

func registerApplicationInfoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerApplicationInfoStorage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storageDescription := ``

	var storageFlagName string
	if cmdPrefix == "" {
		storageFlagName = "storage"
	} else {
		storageFlagName = fmt.Sprintf("%v.storage", cmdPrefix)
	}

	var storageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(storageFlagName, storageFlagDefault, storageDescription)

	return nil
}

func registerApplicationInfoVodCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vodCountDescription := ``

	var vodCountFlagName string
	if cmdPrefix == "" {
		vodCountFlagName = "vodCount"
	} else {
		vodCountFlagName = fmt.Sprintf("%v.vodCount", cmdPrefix)
	}

	var vodCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(vodCountFlagName, vodCountFlagDefault, vodCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelApplicationInfoFlags(depth int, m *models.ApplicationInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, liveStreamCountAdded := retrieveApplicationInfoLiveStreamCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || liveStreamCountAdded

	err, nameAdded := retrieveApplicationInfoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, storageAdded := retrieveApplicationInfoStorageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageAdded

	err, vodCountAdded := retrieveApplicationInfoVodCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vodCountAdded

	return nil, retAdded
}

func retrieveApplicationInfoLiveStreamCountFlags(depth int, m *models.ApplicationInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	liveStreamCountFlagName := fmt.Sprintf("%v.liveStreamCount", cmdPrefix)
	if cmd.Flags().Changed(liveStreamCountFlagName) {

		var liveStreamCountFlagName string
		if cmdPrefix == "" {
			liveStreamCountFlagName = "liveStreamCount"
		} else {
			liveStreamCountFlagName = fmt.Sprintf("%v.liveStreamCount", cmdPrefix)
		}

		liveStreamCountFlagValue, err := cmd.Flags().GetInt32(liveStreamCountFlagName)
		if err != nil {
			return err, false
		}
		m.LiveStreamCount = liveStreamCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveApplicationInfoNameFlags(depth int, m *models.ApplicationInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveApplicationInfoStorageFlags(depth int, m *models.ApplicationInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageFlagName := fmt.Sprintf("%v.storage", cmdPrefix)
	if cmd.Flags().Changed(storageFlagName) {

		var storageFlagName string
		if cmdPrefix == "" {
			storageFlagName = "storage"
		} else {
			storageFlagName = fmt.Sprintf("%v.storage", cmdPrefix)
		}

		storageFlagValue, err := cmd.Flags().GetInt64(storageFlagName)
		if err != nil {
			return err, false
		}
		m.Storage = storageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveApplicationInfoVodCountFlags(depth int, m *models.ApplicationInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vodCountFlagName := fmt.Sprintf("%v.vodCount", cmdPrefix)
	if cmd.Flags().Changed(vodCountFlagName) {

		var vodCountFlagName string
		if cmdPrefix == "" {
			vodCountFlagName = "vodCount"
		} else {
			vodCountFlagName = fmt.Sprintf("%v.vodCount", cmdPrefix)
		}

		vodCountFlagValue, err := cmd.Flags().GetInt32(vodCountFlagName)
		if err != nil {
			return err, false
		}
		m.VodCount = vodCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
