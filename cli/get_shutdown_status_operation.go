// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/operations"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationOperationsGetShutdownStatusCmd returns a cmd to handle operation getShutdownStatus
func makeOperationOperationsGetShutdownStatusCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getShutdownStatus",
		Short: ``,
		RunE:  runOperationOperationsGetShutdownStatus,
	}

	if err := registerOperationOperationsGetShutdownStatusParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationOperationsGetShutdownStatus uses cmd flags to call endpoint api
func runOperationOperationsGetShutdownStatus(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := operations.NewGetShutdownStatusParams()
	if err, _ := retrieveOperationOperationsGetShutdownStatusAppNamesFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationOperationsGetShutdownStatusResult(appCli.Operations.GetShutdownStatus(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationOperationsGetShutdownStatusParamFlags registers all flags needed to fill params
func registerOperationOperationsGetShutdownStatusParamFlags(cmd *cobra.Command) error {
	if err := registerOperationOperationsGetShutdownStatusAppNamesParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationOperationsGetShutdownStatusAppNamesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	appNamesDescription := ``

	var appNamesFlagName string
	if cmdPrefix == "" {
		appNamesFlagName = "appNames"
	} else {
		appNamesFlagName = fmt.Sprintf("%v.appNames", cmdPrefix)
	}

	var appNamesFlagDefault string

	_ = cmd.PersistentFlags().String(appNamesFlagName, appNamesFlagDefault, appNamesDescription)

	return nil
}

func retrieveOperationOperationsGetShutdownStatusAppNamesFlag(m *operations.GetShutdownStatusParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("appNames") {

		var appNamesFlagName string
		if cmdPrefix == "" {
			appNamesFlagName = "appNames"
		} else {
			appNamesFlagName = fmt.Sprintf("%v.appNames", cmdPrefix)
		}

		appNamesFlagValue, err := cmd.Flags().GetString(appNamesFlagName)
		if err != nil {
			return err, false
		}
		m.AppNames = &appNamesFlagValue

	}
	return nil, retAdded
}

// parseOperationOperationsGetShutdownStatusResult parses request result and return the string content
func parseOperationOperationsGetShutdownStatusResult(resp0 *operations.GetShutdownStatusOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*operations.GetShutdownStatusOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
