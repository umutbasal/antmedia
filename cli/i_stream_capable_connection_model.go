// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for IStreamCapableConnection

// register flags to command
func registerModelIStreamCapableConnectionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIStreamCapableConnectionAttributeNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionBasicScopes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionClientBytesRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionConnectParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionConnected(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionDroppedMessages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionEncoding(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionLastPingTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionPendingMessages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionReadBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionReadMessages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionRemoteAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionRemoteAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionRemotePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionSessionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionStreamsMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionWrittenBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCapableConnectionWrittenMessages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIStreamCapableConnectionAttributeNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributeNames []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributes map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionBasicScopes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: basicScopes IteratorIBasicScope map type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var clientFlagName string
	if cmdPrefix == "" {
		clientFlagName = "client"
	} else {
		clientFlagName = fmt.Sprintf("%v.client", cmdPrefix)
	}

	if err := registerModelIClientFlags(depth+1, clientFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIStreamCapableConnectionClientBytesRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientBytesReadDescription := ``

	var clientBytesReadFlagName string
	if cmdPrefix == "" {
		clientBytesReadFlagName = "clientBytesRead"
	} else {
		clientBytesReadFlagName = fmt.Sprintf("%v.clientBytesRead", cmdPrefix)
	}

	var clientBytesReadFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientBytesReadFlagName, clientBytesReadFlagDefault, clientBytesReadDescription)

	return nil
}

func registerIStreamCapableConnectionConnectParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: connectParams map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionConnected(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectedDescription := ``

	var connectedFlagName string
	if cmdPrefix == "" {
		connectedFlagName = "connected"
	} else {
		connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
	}

	var connectedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(connectedFlagName, connectedFlagDefault, connectedDescription)

	return nil
}

func registerIStreamCapableConnectionDroppedMessages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	droppedMessagesDescription := ``

	var droppedMessagesFlagName string
	if cmdPrefix == "" {
		droppedMessagesFlagName = "droppedMessages"
	} else {
		droppedMessagesFlagName = fmt.Sprintf("%v.droppedMessages", cmdPrefix)
	}

	var droppedMessagesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(droppedMessagesFlagName, droppedMessagesFlagDefault, droppedMessagesDescription)

	return nil
}

func registerIStreamCapableConnectionEncoding(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encodingDescription := `Enum: ["AMF0","AMF3","WEBSOCKET","SOCKETIO","RTP","SRTP","RAW"]. `

	var encodingFlagName string
	if cmdPrefix == "" {
		encodingFlagName = "encoding"
	} else {
		encodingFlagName = fmt.Sprintf("%v.encoding", cmdPrefix)
	}

	var encodingFlagDefault string

	_ = cmd.PersistentFlags().String(encodingFlagName, encodingFlagDefault, encodingDescription)

	if err := cmd.RegisterFlagCompletionFunc(encodingFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["AMF0","AMF3","WEBSOCKET","SOCKETIO","RTP","SRTP","RAW"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerIStreamCapableConnectionHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostDescription := ``

	var hostFlagName string
	if cmdPrefix == "" {
		hostFlagName = "host"
	} else {
		hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
	}

	var hostFlagDefault string

	_ = cmd.PersistentFlags().String(hostFlagName, hostFlagDefault, hostDescription)

	return nil
}

func registerIStreamCapableConnectionLastPingTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastPingTimeDescription := ``

	var lastPingTimeFlagName string
	if cmdPrefix == "" {
		lastPingTimeFlagName = "lastPingTime"
	} else {
		lastPingTimeFlagName = fmt.Sprintf("%v.lastPingTime", cmdPrefix)
	}

	var lastPingTimeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(lastPingTimeFlagName, lastPingTimeFlagDefault, lastPingTimeDescription)

	return nil
}

func registerIStreamCapableConnectionPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := ``

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerIStreamCapableConnectionPendingMessages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pendingMessagesDescription := ``

	var pendingMessagesFlagName string
	if cmdPrefix == "" {
		pendingMessagesFlagName = "pendingMessages"
	} else {
		pendingMessagesFlagName = fmt.Sprintf("%v.pendingMessages", cmdPrefix)
	}

	var pendingMessagesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pendingMessagesFlagName, pendingMessagesFlagDefault, pendingMessagesDescription)

	return nil
}

func registerIStreamCapableConnectionProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := ``

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var protocolFlagDefault string

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	return nil
}

func registerIStreamCapableConnectionReadBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readBytesDescription := ``

	var readBytesFlagName string
	if cmdPrefix == "" {
		readBytesFlagName = "readBytes"
	} else {
		readBytesFlagName = fmt.Sprintf("%v.readBytes", cmdPrefix)
	}

	var readBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(readBytesFlagName, readBytesFlagDefault, readBytesDescription)

	return nil
}

func registerIStreamCapableConnectionReadMessages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readMessagesDescription := ``

	var readMessagesFlagName string
	if cmdPrefix == "" {
		readMessagesFlagName = "readMessages"
	} else {
		readMessagesFlagName = fmt.Sprintf("%v.readMessages", cmdPrefix)
	}

	var readMessagesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(readMessagesFlagName, readMessagesFlagDefault, readMessagesDescription)

	return nil
}

func registerIStreamCapableConnectionRemoteAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteAddressDescription := ``

	var remoteAddressFlagName string
	if cmdPrefix == "" {
		remoteAddressFlagName = "remoteAddress"
	} else {
		remoteAddressFlagName = fmt.Sprintf("%v.remoteAddress", cmdPrefix)
	}

	var remoteAddressFlagDefault string

	_ = cmd.PersistentFlags().String(remoteAddressFlagName, remoteAddressFlagDefault, remoteAddressDescription)

	return nil
}

func registerIStreamCapableConnectionRemoteAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: remoteAddresses []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionRemotePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remotePortDescription := ``

	var remotePortFlagName string
	if cmdPrefix == "" {
		remotePortFlagName = "remotePort"
	} else {
		remotePortFlagName = fmt.Sprintf("%v.remotePort", cmdPrefix)
	}

	var remotePortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(remotePortFlagName, remotePortFlagDefault, remotePortDescription)

	return nil
}

func registerIStreamCapableConnectionScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scopeFlagName string
	if cmdPrefix == "" {
		scopeFlagName = "scope"
	} else {
		scopeFlagName = fmt.Sprintf("%v.scope", cmdPrefix)
	}

	if err := registerModelIScopeFlags(depth+1, scopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIStreamCapableConnectionSessionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessionIdDescription := ``

	var sessionIdFlagName string
	if cmdPrefix == "" {
		sessionIdFlagName = "sessionId"
	} else {
		sessionIdFlagName = fmt.Sprintf("%v.sessionId", cmdPrefix)
	}

	var sessionIdFlagDefault string

	_ = cmd.PersistentFlags().String(sessionIdFlagName, sessionIdFlagDefault, sessionIdDescription)

	return nil
}

func registerIStreamCapableConnectionStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamId Number map type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionStreamsMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamsMap map[string]IClientStream map type is not supported by go-swagger cli yet

	return nil
}

func registerIStreamCapableConnectionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerIStreamCapableConnectionWrittenBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	writtenBytesDescription := ``

	var writtenBytesFlagName string
	if cmdPrefix == "" {
		writtenBytesFlagName = "writtenBytes"
	} else {
		writtenBytesFlagName = fmt.Sprintf("%v.writtenBytes", cmdPrefix)
	}

	var writtenBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(writtenBytesFlagName, writtenBytesFlagDefault, writtenBytesDescription)

	return nil
}

func registerIStreamCapableConnectionWrittenMessages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	writtenMessagesDescription := ``

	var writtenMessagesFlagName string
	if cmdPrefix == "" {
		writtenMessagesFlagName = "writtenMessages"
	} else {
		writtenMessagesFlagName = fmt.Sprintf("%v.writtenMessages", cmdPrefix)
	}

	var writtenMessagesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(writtenMessagesFlagName, writtenMessagesFlagDefault, writtenMessagesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIStreamCapableConnectionFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributeNamesAdded := retrieveIStreamCapableConnectionAttributeNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributeNamesAdded

	err, attributesAdded := retrieveIStreamCapableConnectionAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, basicScopesAdded := retrieveIStreamCapableConnectionBasicScopesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || basicScopesAdded

	err, clientAdded := retrieveIStreamCapableConnectionClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientAdded

	err, clientBytesReadAdded := retrieveIStreamCapableConnectionClientBytesReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientBytesReadAdded

	err, connectParamsAdded := retrieveIStreamCapableConnectionConnectParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectParamsAdded

	err, connectedAdded := retrieveIStreamCapableConnectionConnectedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectedAdded

	err, droppedMessagesAdded := retrieveIStreamCapableConnectionDroppedMessagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || droppedMessagesAdded

	err, encodingAdded := retrieveIStreamCapableConnectionEncodingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encodingAdded

	err, hostAdded := retrieveIStreamCapableConnectionHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostAdded

	err, lastPingTimeAdded := retrieveIStreamCapableConnectionLastPingTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastPingTimeAdded

	err, pathAdded := retrieveIStreamCapableConnectionPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, pendingMessagesAdded := retrieveIStreamCapableConnectionPendingMessagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pendingMessagesAdded

	err, protocolAdded := retrieveIStreamCapableConnectionProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	err, readBytesAdded := retrieveIStreamCapableConnectionReadBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readBytesAdded

	err, readMessagesAdded := retrieveIStreamCapableConnectionReadMessagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readMessagesAdded

	err, remoteAddressAdded := retrieveIStreamCapableConnectionRemoteAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteAddressAdded

	err, remoteAddressesAdded := retrieveIStreamCapableConnectionRemoteAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteAddressesAdded

	err, remotePortAdded := retrieveIStreamCapableConnectionRemotePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remotePortAdded

	err, scopeAdded := retrieveIStreamCapableConnectionScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, sessionIdAdded := retrieveIStreamCapableConnectionSessionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessionIdAdded

	err, streamIdAdded := retrieveIStreamCapableConnectionStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, streamsMapAdded := retrieveIStreamCapableConnectionStreamsMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamsMapAdded

	err, typeAdded := retrieveIStreamCapableConnectionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, writtenBytesAdded := retrieveIStreamCapableConnectionWrittenBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || writtenBytesAdded

	err, writtenMessagesAdded := retrieveIStreamCapableConnectionWrittenMessagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || writtenMessagesAdded

	return nil, retAdded
}

func retrieveIStreamCapableConnectionAttributeNamesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributeNamesFlagName := fmt.Sprintf("%v.attributeNames", cmdPrefix)
	if cmd.Flags().Changed(attributeNamesFlagName) {
		// warning: attributeNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionAttributesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// warning: attributes map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionBasicScopesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	basicScopesFlagName := fmt.Sprintf("%v.basicScopes", cmdPrefix)
	if cmd.Flags().Changed(basicScopesFlagName) {
		// warning: basicScopes map type IteratorIBasicScope is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionClientFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientFlagName := fmt.Sprintf("%v.client", cmdPrefix)
	if cmd.Flags().Changed(clientFlagName) {
		// info: complex object client IClient is retrieved outside this Changed() block
	}
	clientFlagValue := m.Client
	if swag.IsZero(clientFlagValue) {
		clientFlagValue = &models.IClient{}
	}

	err, clientAdded := retrieveModelIClientFlags(depth+1, clientFlagValue, clientFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientAdded
	if clientAdded {
		m.Client = clientFlagValue
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionClientBytesReadFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientBytesReadFlagName := fmt.Sprintf("%v.clientBytesRead", cmdPrefix)
	if cmd.Flags().Changed(clientBytesReadFlagName) {

		var clientBytesReadFlagName string
		if cmdPrefix == "" {
			clientBytesReadFlagName = "clientBytesRead"
		} else {
			clientBytesReadFlagName = fmt.Sprintf("%v.clientBytesRead", cmdPrefix)
		}

		clientBytesReadFlagValue, err := cmd.Flags().GetInt64(clientBytesReadFlagName)
		if err != nil {
			return err, false
		}
		m.ClientBytesRead = clientBytesReadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionConnectParamsFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectParamsFlagName := fmt.Sprintf("%v.connectParams", cmdPrefix)
	if cmd.Flags().Changed(connectParamsFlagName) {
		// warning: connectParams map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionConnectedFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectedFlagName := fmt.Sprintf("%v.connected", cmdPrefix)
	if cmd.Flags().Changed(connectedFlagName) {

		var connectedFlagName string
		if cmdPrefix == "" {
			connectedFlagName = "connected"
		} else {
			connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
		}

		connectedFlagValue, err := cmd.Flags().GetBool(connectedFlagName)
		if err != nil {
			return err, false
		}
		m.Connected = connectedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionDroppedMessagesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	droppedMessagesFlagName := fmt.Sprintf("%v.droppedMessages", cmdPrefix)
	if cmd.Flags().Changed(droppedMessagesFlagName) {

		var droppedMessagesFlagName string
		if cmdPrefix == "" {
			droppedMessagesFlagName = "droppedMessages"
		} else {
			droppedMessagesFlagName = fmt.Sprintf("%v.droppedMessages", cmdPrefix)
		}

		droppedMessagesFlagValue, err := cmd.Flags().GetInt64(droppedMessagesFlagName)
		if err != nil {
			return err, false
		}
		m.DroppedMessages = droppedMessagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionEncodingFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encodingFlagName := fmt.Sprintf("%v.encoding", cmdPrefix)
	if cmd.Flags().Changed(encodingFlagName) {

		var encodingFlagName string
		if cmdPrefix == "" {
			encodingFlagName = "encoding"
		} else {
			encodingFlagName = fmt.Sprintf("%v.encoding", cmdPrefix)
		}

		encodingFlagValue, err := cmd.Flags().GetString(encodingFlagName)
		if err != nil {
			return err, false
		}
		m.Encoding = encodingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionHostFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostFlagName := fmt.Sprintf("%v.host", cmdPrefix)
	if cmd.Flags().Changed(hostFlagName) {

		var hostFlagName string
		if cmdPrefix == "" {
			hostFlagName = "host"
		} else {
			hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
		}

		hostFlagValue, err := cmd.Flags().GetString(hostFlagName)
		if err != nil {
			return err, false
		}
		m.Host = hostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionLastPingTimeFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastPingTimeFlagName := fmt.Sprintf("%v.lastPingTime", cmdPrefix)
	if cmd.Flags().Changed(lastPingTimeFlagName) {

		var lastPingTimeFlagName string
		if cmdPrefix == "" {
			lastPingTimeFlagName = "lastPingTime"
		} else {
			lastPingTimeFlagName = fmt.Sprintf("%v.lastPingTime", cmdPrefix)
		}

		lastPingTimeFlagValue, err := cmd.Flags().GetInt32(lastPingTimeFlagName)
		if err != nil {
			return err, false
		}
		m.LastPingTime = lastPingTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionPathFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFlagName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionPendingMessagesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pendingMessagesFlagName := fmt.Sprintf("%v.pendingMessages", cmdPrefix)
	if cmd.Flags().Changed(pendingMessagesFlagName) {

		var pendingMessagesFlagName string
		if cmdPrefix == "" {
			pendingMessagesFlagName = "pendingMessages"
		} else {
			pendingMessagesFlagName = fmt.Sprintf("%v.pendingMessages", cmdPrefix)
		}

		pendingMessagesFlagValue, err := cmd.Flags().GetInt64(pendingMessagesFlagName)
		if err != nil {
			return err, false
		}
		m.PendingMessages = pendingMessagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionProtocolFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protocolFlagName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = protocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionReadBytesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readBytesFlagName := fmt.Sprintf("%v.readBytes", cmdPrefix)
	if cmd.Flags().Changed(readBytesFlagName) {

		var readBytesFlagName string
		if cmdPrefix == "" {
			readBytesFlagName = "readBytes"
		} else {
			readBytesFlagName = fmt.Sprintf("%v.readBytes", cmdPrefix)
		}

		readBytesFlagValue, err := cmd.Flags().GetInt64(readBytesFlagName)
		if err != nil {
			return err, false
		}
		m.ReadBytes = readBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionReadMessagesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readMessagesFlagName := fmt.Sprintf("%v.readMessages", cmdPrefix)
	if cmd.Flags().Changed(readMessagesFlagName) {

		var readMessagesFlagName string
		if cmdPrefix == "" {
			readMessagesFlagName = "readMessages"
		} else {
			readMessagesFlagName = fmt.Sprintf("%v.readMessages", cmdPrefix)
		}

		readMessagesFlagValue, err := cmd.Flags().GetInt64(readMessagesFlagName)
		if err != nil {
			return err, false
		}
		m.ReadMessages = readMessagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionRemoteAddressFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteAddressFlagName := fmt.Sprintf("%v.remoteAddress", cmdPrefix)
	if cmd.Flags().Changed(remoteAddressFlagName) {

		var remoteAddressFlagName string
		if cmdPrefix == "" {
			remoteAddressFlagName = "remoteAddress"
		} else {
			remoteAddressFlagName = fmt.Sprintf("%v.remoteAddress", cmdPrefix)
		}

		remoteAddressFlagValue, err := cmd.Flags().GetString(remoteAddressFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteAddress = remoteAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionRemoteAddressesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteAddressesFlagName := fmt.Sprintf("%v.remoteAddresses", cmdPrefix)
	if cmd.Flags().Changed(remoteAddressesFlagName) {
		// warning: remoteAddresses array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionRemotePortFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remotePortFlagName := fmt.Sprintf("%v.remotePort", cmdPrefix)
	if cmd.Flags().Changed(remotePortFlagName) {

		var remotePortFlagName string
		if cmdPrefix == "" {
			remotePortFlagName = "remotePort"
		} else {
			remotePortFlagName = fmt.Sprintf("%v.remotePort", cmdPrefix)
		}

		remotePortFlagValue, err := cmd.Flags().GetInt32(remotePortFlagName)
		if err != nil {
			return err, false
		}
		m.RemotePort = remotePortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionScopeFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeFlagName := fmt.Sprintf("%v.scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {
		// info: complex object scope IScope is retrieved outside this Changed() block
	}
	scopeFlagValue := m.Scope
	if swag.IsZero(scopeFlagValue) {
		scopeFlagValue = &models.IScope{}
	}

	err, scopeAdded := retrieveModelIScopeFlags(depth+1, scopeFlagValue, scopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded
	if scopeAdded {
		m.Scope = scopeFlagValue
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionSessionIDFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessionIdFlagName := fmt.Sprintf("%v.sessionId", cmdPrefix)
	if cmd.Flags().Changed(sessionIdFlagName) {

		var sessionIdFlagName string
		if cmdPrefix == "" {
			sessionIdFlagName = "sessionId"
		} else {
			sessionIdFlagName = fmt.Sprintf("%v.sessionId", cmdPrefix)
		}

		sessionIdFlagValue, err := cmd.Flags().GetString(sessionIdFlagName)
		if err != nil {
			return err, false
		}
		m.SessionID = sessionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionStreamIDFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {
		// warning: streamId map type Number is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionStreamsMapFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamsMapFlagName := fmt.Sprintf("%v.streamsMap", cmdPrefix)
	if cmd.Flags().Changed(streamsMapFlagName) {
		// warning: streamsMap map type map[string]IClientStream is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionTypeFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionWrittenBytesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	writtenBytesFlagName := fmt.Sprintf("%v.writtenBytes", cmdPrefix)
	if cmd.Flags().Changed(writtenBytesFlagName) {

		var writtenBytesFlagName string
		if cmdPrefix == "" {
			writtenBytesFlagName = "writtenBytes"
		} else {
			writtenBytesFlagName = fmt.Sprintf("%v.writtenBytes", cmdPrefix)
		}

		writtenBytesFlagValue, err := cmd.Flags().GetInt64(writtenBytesFlagName)
		if err != nil {
			return err, false
		}
		m.WrittenBytes = writtenBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCapableConnectionWrittenMessagesFlags(depth int, m *models.IStreamCapableConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	writtenMessagesFlagName := fmt.Sprintf("%v.writtenMessages", cmdPrefix)
	if cmd.Flags().Changed(writtenMessagesFlagName) {

		var writtenMessagesFlagName string
		if cmdPrefix == "" {
			writtenMessagesFlagName = "writtenMessages"
		} else {
			writtenMessagesFlagName = fmt.Sprintf("%v.writtenMessages", cmdPrefix)
		}

		writtenMessagesFlagValue, err := cmd.Flags().GetInt64(writtenMessagesFlagName)
		if err != nil {
			return err, false
		}
		m.WrittenMessages = writtenMessagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
