// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Context

// register flags to command
func registerModelContextFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContextEventLoopContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContextInstanceCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContextWorkerContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContextEventLoopContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eventLoopContextDescription := ``

	var eventLoopContextFlagName string
	if cmdPrefix == "" {
		eventLoopContextFlagName = "eventLoopContext"
	} else {
		eventLoopContextFlagName = fmt.Sprintf("%v.eventLoopContext", cmdPrefix)
	}

	var eventLoopContextFlagDefault bool

	_ = cmd.PersistentFlags().Bool(eventLoopContextFlagName, eventLoopContextFlagDefault, eventLoopContextDescription)

	return nil
}

func registerContextInstanceCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instanceCountDescription := ``

	var instanceCountFlagName string
	if cmdPrefix == "" {
		instanceCountFlagName = "instanceCount"
	} else {
		instanceCountFlagName = fmt.Sprintf("%v.instanceCount", cmdPrefix)
	}

	var instanceCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(instanceCountFlagName, instanceCountFlagDefault, instanceCountDescription)

	return nil
}

func registerContextWorkerContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workerContextDescription := ``

	var workerContextFlagName string
	if cmdPrefix == "" {
		workerContextFlagName = "workerContext"
	} else {
		workerContextFlagName = fmt.Sprintf("%v.workerContext", cmdPrefix)
	}

	var workerContextFlagDefault bool

	_ = cmd.PersistentFlags().Bool(workerContextFlagName, workerContextFlagDefault, workerContextDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContextFlags(depth int, m *models.Context, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, eventLoopContextAdded := retrieveContextEventLoopContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eventLoopContextAdded

	err, instanceCountAdded := retrieveContextInstanceCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceCountAdded

	err, workerContextAdded := retrieveContextWorkerContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workerContextAdded

	return nil, retAdded
}

func retrieveContextEventLoopContextFlags(depth int, m *models.Context, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eventLoopContextFlagName := fmt.Sprintf("%v.eventLoopContext", cmdPrefix)
	if cmd.Flags().Changed(eventLoopContextFlagName) {

		var eventLoopContextFlagName string
		if cmdPrefix == "" {
			eventLoopContextFlagName = "eventLoopContext"
		} else {
			eventLoopContextFlagName = fmt.Sprintf("%v.eventLoopContext", cmdPrefix)
		}

		eventLoopContextFlagValue, err := cmd.Flags().GetBool(eventLoopContextFlagName)
		if err != nil {
			return err, false
		}
		m.EventLoopContext = eventLoopContextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContextInstanceCountFlags(depth int, m *models.Context, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceCountFlagName := fmt.Sprintf("%v.instanceCount", cmdPrefix)
	if cmd.Flags().Changed(instanceCountFlagName) {

		var instanceCountFlagName string
		if cmdPrefix == "" {
			instanceCountFlagName = "instanceCount"
		} else {
			instanceCountFlagName = fmt.Sprintf("%v.instanceCount", cmdPrefix)
		}

		instanceCountFlagValue, err := cmd.Flags().GetInt32(instanceCountFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceCount = instanceCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContextWorkerContextFlags(depth int, m *models.Context, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workerContextFlagName := fmt.Sprintf("%v.workerContext", cmdPrefix)
	if cmd.Flags().Changed(workerContextFlagName) {

		var workerContextFlagName string
		if cmdPrefix == "" {
			workerContextFlagName = "workerContext"
		} else {
			workerContextFlagName = fmt.Sprintf("%v.workerContext", cmdPrefix)
		}

		workerContextFlagValue, err := cmd.Flags().GetBool(workerContextFlagName)
		if err != nil {
			return err, false
		}
		m.WorkerContext = workerContextFlagValue

		retAdded = true
	}

	return nil, retAdded
}
