// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for WebRTCAudioSendStats

// register flags to command
func registerModelWebRTCAudioSendStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebRTCAudioSendStatsAudioBytesSent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCAudioSendStatsAudioBytesSentPerSecond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCAudioSendStatsAudioPacketsPerSecond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCAudioSendStatsAudioPacketsSent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCAudioSendStatsTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebRTCAudioSendStatsAudioBytesSent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioBytesSentDescription := ``

	var audioBytesSentFlagName string
	if cmdPrefix == "" {
		audioBytesSentFlagName = "audioBytesSent"
	} else {
		audioBytesSentFlagName = fmt.Sprintf("%v.audioBytesSent", cmdPrefix)
	}

	var audioBytesSentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(audioBytesSentFlagName, audioBytesSentFlagDefault, audioBytesSentDescription)

	return nil
}

func registerWebRTCAudioSendStatsAudioBytesSentPerSecond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioBytesSentPerSecondDescription := ``

	var audioBytesSentPerSecondFlagName string
	if cmdPrefix == "" {
		audioBytesSentPerSecondFlagName = "audioBytesSentPerSecond"
	} else {
		audioBytesSentPerSecondFlagName = fmt.Sprintf("%v.audioBytesSentPerSecond", cmdPrefix)
	}

	var audioBytesSentPerSecondFlagDefault int64

	_ = cmd.PersistentFlags().Int64(audioBytesSentPerSecondFlagName, audioBytesSentPerSecondFlagDefault, audioBytesSentPerSecondDescription)

	return nil
}

func registerWebRTCAudioSendStatsAudioPacketsPerSecond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioPacketsPerSecondDescription := ``

	var audioPacketsPerSecondFlagName string
	if cmdPrefix == "" {
		audioPacketsPerSecondFlagName = "audioPacketsPerSecond"
	} else {
		audioPacketsPerSecondFlagName = fmt.Sprintf("%v.audioPacketsPerSecond", cmdPrefix)
	}

	var audioPacketsPerSecondFlagDefault int64

	_ = cmd.PersistentFlags().Int64(audioPacketsPerSecondFlagName, audioPacketsPerSecondFlagDefault, audioPacketsPerSecondDescription)

	return nil
}

func registerWebRTCAudioSendStatsAudioPacketsSent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioPacketsSentDescription := ``

	var audioPacketsSentFlagName string
	if cmdPrefix == "" {
		audioPacketsSentFlagName = "audioPacketsSent"
	} else {
		audioPacketsSentFlagName = fmt.Sprintf("%v.audioPacketsSent", cmdPrefix)
	}

	var audioPacketsSentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(audioPacketsSentFlagName, audioPacketsSentFlagDefault, audioPacketsSentDescription)

	return nil
}

func registerWebRTCAudioSendStatsTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeMsDescription := ``

	var timeMsFlagName string
	if cmdPrefix == "" {
		timeMsFlagName = "timeMs"
	} else {
		timeMsFlagName = fmt.Sprintf("%v.timeMs", cmdPrefix)
	}

	var timeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeMsFlagName, timeMsFlagDefault, timeMsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebRTCAudioSendStatsFlags(depth int, m *models.WebRTCAudioSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, audioBytesSentAdded := retrieveWebRTCAudioSendStatsAudioBytesSentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioBytesSentAdded

	err, audioBytesSentPerSecondAdded := retrieveWebRTCAudioSendStatsAudioBytesSentPerSecondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioBytesSentPerSecondAdded

	err, audioPacketsPerSecondAdded := retrieveWebRTCAudioSendStatsAudioPacketsPerSecondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioPacketsPerSecondAdded

	err, audioPacketsSentAdded := retrieveWebRTCAudioSendStatsAudioPacketsSentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioPacketsSentAdded

	err, timeMsAdded := retrieveWebRTCAudioSendStatsTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeMsAdded

	return nil, retAdded
}

func retrieveWebRTCAudioSendStatsAudioBytesSentFlags(depth int, m *models.WebRTCAudioSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioBytesSentFlagName := fmt.Sprintf("%v.audioBytesSent", cmdPrefix)
	if cmd.Flags().Changed(audioBytesSentFlagName) {

		var audioBytesSentFlagName string
		if cmdPrefix == "" {
			audioBytesSentFlagName = "audioBytesSent"
		} else {
			audioBytesSentFlagName = fmt.Sprintf("%v.audioBytesSent", cmdPrefix)
		}

		audioBytesSentFlagValue, err := cmd.Flags().GetInt64(audioBytesSentFlagName)
		if err != nil {
			return err, false
		}
		m.AudioBytesSent = audioBytesSentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCAudioSendStatsAudioBytesSentPerSecondFlags(depth int, m *models.WebRTCAudioSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioBytesSentPerSecondFlagName := fmt.Sprintf("%v.audioBytesSentPerSecond", cmdPrefix)
	if cmd.Flags().Changed(audioBytesSentPerSecondFlagName) {

		var audioBytesSentPerSecondFlagName string
		if cmdPrefix == "" {
			audioBytesSentPerSecondFlagName = "audioBytesSentPerSecond"
		} else {
			audioBytesSentPerSecondFlagName = fmt.Sprintf("%v.audioBytesSentPerSecond", cmdPrefix)
		}

		audioBytesSentPerSecondFlagValue, err := cmd.Flags().GetInt64(audioBytesSentPerSecondFlagName)
		if err != nil {
			return err, false
		}
		m.AudioBytesSentPerSecond = audioBytesSentPerSecondFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCAudioSendStatsAudioPacketsPerSecondFlags(depth int, m *models.WebRTCAudioSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioPacketsPerSecondFlagName := fmt.Sprintf("%v.audioPacketsPerSecond", cmdPrefix)
	if cmd.Flags().Changed(audioPacketsPerSecondFlagName) {

		var audioPacketsPerSecondFlagName string
		if cmdPrefix == "" {
			audioPacketsPerSecondFlagName = "audioPacketsPerSecond"
		} else {
			audioPacketsPerSecondFlagName = fmt.Sprintf("%v.audioPacketsPerSecond", cmdPrefix)
		}

		audioPacketsPerSecondFlagValue, err := cmd.Flags().GetInt64(audioPacketsPerSecondFlagName)
		if err != nil {
			return err, false
		}
		m.AudioPacketsPerSecond = audioPacketsPerSecondFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCAudioSendStatsAudioPacketsSentFlags(depth int, m *models.WebRTCAudioSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioPacketsSentFlagName := fmt.Sprintf("%v.audioPacketsSent", cmdPrefix)
	if cmd.Flags().Changed(audioPacketsSentFlagName) {

		var audioPacketsSentFlagName string
		if cmdPrefix == "" {
			audioPacketsSentFlagName = "audioPacketsSent"
		} else {
			audioPacketsSentFlagName = fmt.Sprintf("%v.audioPacketsSent", cmdPrefix)
		}

		audioPacketsSentFlagValue, err := cmd.Flags().GetInt64(audioPacketsSentFlagName)
		if err != nil {
			return err, false
		}
		m.AudioPacketsSent = audioPacketsSentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCAudioSendStatsTimeMsFlags(depth int, m *models.WebRTCAudioSendStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeMsFlagName := fmt.Sprintf("%v.timeMs", cmdPrefix)
	if cmd.Flags().Changed(timeMsFlagName) {

		var timeMsFlagName string
		if cmdPrefix == "" {
			timeMsFlagName = "timeMs"
		} else {
			timeMsFlagName = fmt.Sprintf("%v.timeMs", cmdPrefix)
		}

		timeMsFlagValue, err := cmd.Flags().GetInt64(timeMsFlagName)
		if err != nil {
			return err, false
		}
		m.TimeMs = timeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
