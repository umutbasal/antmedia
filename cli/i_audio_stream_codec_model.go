// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for IAudioStreamCodec

// register flags to command
func registerModelIAudioStreamCodecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIAudioStreamCodecDecoderConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIAudioStreamCodecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIAudioStreamCodecDecoderConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var decoderConfigurationFlagName string
	if cmdPrefix == "" {
		decoderConfigurationFlagName = "decoderConfiguration"
	} else {
		decoderConfigurationFlagName = fmt.Sprintf("%v.decoderConfiguration", cmdPrefix)
	}

	if err := registerModelIoBufferFlags(depth+1, decoderConfigurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIAudioStreamCodecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIAudioStreamCodecFlags(depth int, m *models.IAudioStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, decoderConfigurationAdded := retrieveIAudioStreamCodecDecoderConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || decoderConfigurationAdded

	err, nameAdded := retrieveIAudioStreamCodecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveIAudioStreamCodecDecoderConfigurationFlags(depth int, m *models.IAudioStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	decoderConfigurationFlagName := fmt.Sprintf("%v.decoderConfiguration", cmdPrefix)
	if cmd.Flags().Changed(decoderConfigurationFlagName) {
		// info: complex object decoderConfiguration IoBuffer is retrieved outside this Changed() block
	}
	decoderConfigurationFlagValue := m.DecoderConfiguration
	if swag.IsZero(decoderConfigurationFlagValue) {
		decoderConfigurationFlagValue = &models.IoBuffer{}
	}

	err, decoderConfigurationAdded := retrieveModelIoBufferFlags(depth+1, decoderConfigurationFlagValue, decoderConfigurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || decoderConfigurationAdded
	if decoderConfigurationAdded {
		m.DecoderConfiguration = decoderConfigurationFlagValue
	}

	return nil, retAdded
}

func retrieveIAudioStreamCodecNameFlags(depth int, m *models.IAudioStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
