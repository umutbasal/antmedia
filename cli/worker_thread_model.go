// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for WorkerThread

// register flags to command
func registerModelWorkerThreadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWorkerThreadAlive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadBufferedDurationMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadContextClassLoader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadDaemon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadInterrupted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadPriority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadStackTrace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadThreadGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkerThreadUncaughtExceptionHandler(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkerThreadAlive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aliveDescription := ``

	var aliveFlagName string
	if cmdPrefix == "" {
		aliveFlagName = "alive"
	} else {
		aliveFlagName = fmt.Sprintf("%v.alive", cmdPrefix)
	}

	var aliveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(aliveFlagName, aliveFlagDefault, aliveDescription)

	return nil
}

func registerWorkerThreadBufferedDurationMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bufferedDurationMsDescription := ``

	var bufferedDurationMsFlagName string
	if cmdPrefix == "" {
		bufferedDurationMsFlagName = "bufferedDurationMs"
	} else {
		bufferedDurationMsFlagName = fmt.Sprintf("%v.bufferedDurationMs", cmdPrefix)
	}

	var bufferedDurationMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bufferedDurationMsFlagName, bufferedDurationMsFlagDefault, bufferedDurationMsDescription)

	return nil
}

func registerWorkerThreadContextClassLoader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var contextClassLoaderFlagName string
	if cmdPrefix == "" {
		contextClassLoaderFlagName = "contextClassLoader"
	} else {
		contextClassLoaderFlagName = fmt.Sprintf("%v.contextClassLoader", cmdPrefix)
	}

	if err := registerModelClassLoaderFlags(depth+1, contextClassLoaderFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkerThreadDaemon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	daemonDescription := ``

	var daemonFlagName string
	if cmdPrefix == "" {
		daemonFlagName = "daemon"
	} else {
		daemonFlagName = fmt.Sprintf("%v.daemon", cmdPrefix)
	}

	var daemonFlagDefault bool

	_ = cmd.PersistentFlags().Bool(daemonFlagName, daemonFlagDefault, daemonDescription)

	return nil
}

func registerWorkerThreadID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerWorkerThreadInterrupted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interruptedDescription := ``

	var interruptedFlagName string
	if cmdPrefix == "" {
		interruptedFlagName = "interrupted"
	} else {
		interruptedFlagName = fmt.Sprintf("%v.interrupted", cmdPrefix)
	}

	var interruptedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(interruptedFlagName, interruptedFlagDefault, interruptedDescription)

	return nil
}

func registerWorkerThreadName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerWorkerThreadPriority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priorityDescription := ``

	var priorityFlagName string
	if cmdPrefix == "" {
		priorityFlagName = "priority"
	} else {
		priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
	}

	var priorityFlagDefault int32

	_ = cmd.PersistentFlags().Int32(priorityFlagName, priorityFlagDefault, priorityDescription)

	return nil
}

func registerWorkerThreadStackTrace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: stackTrace []*StackTraceElement array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkerThreadState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := `Enum: ["NEW","RUNNABLE","BLOCKED","WAITING","TIMED_WAITING","TERMINATED"]. `

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	if err := cmd.RegisterFlagCompletionFunc(stateFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NEW","RUNNABLE","BLOCKED","WAITING","TIMED_WAITING","TERMINATED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWorkerThreadThreadGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var threadGroupFlagName string
	if cmdPrefix == "" {
		threadGroupFlagName = "threadGroup"
	} else {
		threadGroupFlagName = fmt.Sprintf("%v.threadGroup", cmdPrefix)
	}

	if err := registerModelThreadGroupFlags(depth+1, threadGroupFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkerThreadUncaughtExceptionHandler(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: uncaughtExceptionHandler UncaughtExceptionHandler map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWorkerThreadFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aliveAdded := retrieveWorkerThreadAliveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aliveAdded

	err, bufferedDurationMsAdded := retrieveWorkerThreadBufferedDurationMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufferedDurationMsAdded

	err, contextClassLoaderAdded := retrieveWorkerThreadContextClassLoaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextClassLoaderAdded

	err, daemonAdded := retrieveWorkerThreadDaemonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || daemonAdded

	err, idAdded := retrieveWorkerThreadIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, interruptedAdded := retrieveWorkerThreadInterruptedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interruptedAdded

	err, nameAdded := retrieveWorkerThreadNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, priorityAdded := retrieveWorkerThreadPriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priorityAdded

	err, stackTraceAdded := retrieveWorkerThreadStackTraceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stackTraceAdded

	err, stateAdded := retrieveWorkerThreadStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	err, threadGroupAdded := retrieveWorkerThreadThreadGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadGroupAdded

	err, uncaughtExceptionHandlerAdded := retrieveWorkerThreadUncaughtExceptionHandlerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uncaughtExceptionHandlerAdded

	return nil, retAdded
}

func retrieveWorkerThreadAliveFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aliveFlagName := fmt.Sprintf("%v.alive", cmdPrefix)
	if cmd.Flags().Changed(aliveFlagName) {

		var aliveFlagName string
		if cmdPrefix == "" {
			aliveFlagName = "alive"
		} else {
			aliveFlagName = fmt.Sprintf("%v.alive", cmdPrefix)
		}

		aliveFlagValue, err := cmd.Flags().GetBool(aliveFlagName)
		if err != nil {
			return err, false
		}
		m.Alive = aliveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadBufferedDurationMsFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufferedDurationMsFlagName := fmt.Sprintf("%v.bufferedDurationMs", cmdPrefix)
	if cmd.Flags().Changed(bufferedDurationMsFlagName) {

		var bufferedDurationMsFlagName string
		if cmdPrefix == "" {
			bufferedDurationMsFlagName = "bufferedDurationMs"
		} else {
			bufferedDurationMsFlagName = fmt.Sprintf("%v.bufferedDurationMs", cmdPrefix)
		}

		bufferedDurationMsFlagValue, err := cmd.Flags().GetInt64(bufferedDurationMsFlagName)
		if err != nil {
			return err, false
		}
		m.BufferedDurationMs = bufferedDurationMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadContextClassLoaderFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextClassLoaderFlagName := fmt.Sprintf("%v.contextClassLoader", cmdPrefix)
	if cmd.Flags().Changed(contextClassLoaderFlagName) {
		// info: complex object contextClassLoader ClassLoader is retrieved outside this Changed() block
	}
	contextClassLoaderFlagValue := m.ContextClassLoader
	if swag.IsZero(contextClassLoaderFlagValue) {
		contextClassLoaderFlagValue = &models.ClassLoader{}
	}

	err, contextClassLoaderAdded := retrieveModelClassLoaderFlags(depth+1, contextClassLoaderFlagValue, contextClassLoaderFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextClassLoaderAdded
	if contextClassLoaderAdded {
		m.ContextClassLoader = contextClassLoaderFlagValue
	}

	return nil, retAdded
}

func retrieveWorkerThreadDaemonFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	daemonFlagName := fmt.Sprintf("%v.daemon", cmdPrefix)
	if cmd.Flags().Changed(daemonFlagName) {

		var daemonFlagName string
		if cmdPrefix == "" {
			daemonFlagName = "daemon"
		} else {
			daemonFlagName = fmt.Sprintf("%v.daemon", cmdPrefix)
		}

		daemonFlagValue, err := cmd.Flags().GetBool(daemonFlagName)
		if err != nil {
			return err, false
		}
		m.Daemon = daemonFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadIDFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadInterruptedFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interruptedFlagName := fmt.Sprintf("%v.interrupted", cmdPrefix)
	if cmd.Flags().Changed(interruptedFlagName) {

		var interruptedFlagName string
		if cmdPrefix == "" {
			interruptedFlagName = "interrupted"
		} else {
			interruptedFlagName = fmt.Sprintf("%v.interrupted", cmdPrefix)
		}

		interruptedFlagValue, err := cmd.Flags().GetBool(interruptedFlagName)
		if err != nil {
			return err, false
		}
		m.Interrupted = interruptedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadNameFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadPriorityFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priorityFlagName := fmt.Sprintf("%v.priority", cmdPrefix)
	if cmd.Flags().Changed(priorityFlagName) {

		var priorityFlagName string
		if cmdPrefix == "" {
			priorityFlagName = "priority"
		} else {
			priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
		}

		priorityFlagValue, err := cmd.Flags().GetInt32(priorityFlagName)
		if err != nil {
			return err, false
		}
		m.Priority = priorityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadStackTraceFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stackTraceFlagName := fmt.Sprintf("%v.stackTrace", cmdPrefix)
	if cmd.Flags().Changed(stackTraceFlagName) {
		// warning: stackTrace array type []*StackTraceElement is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkerThreadStateFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkerThreadThreadGroupFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	threadGroupFlagName := fmt.Sprintf("%v.threadGroup", cmdPrefix)
	if cmd.Flags().Changed(threadGroupFlagName) {
		// info: complex object threadGroup ThreadGroup is retrieved outside this Changed() block
	}
	threadGroupFlagValue := m.ThreadGroup
	if swag.IsZero(threadGroupFlagValue) {
		threadGroupFlagValue = &models.ThreadGroup{}
	}

	err, threadGroupAdded := retrieveModelThreadGroupFlags(depth+1, threadGroupFlagValue, threadGroupFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || threadGroupAdded
	if threadGroupAdded {
		m.ThreadGroup = threadGroupFlagValue
	}

	return nil, retAdded
}

func retrieveWorkerThreadUncaughtExceptionHandlerFlags(depth int, m *models.WorkerThread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uncaughtExceptionHandlerFlagName := fmt.Sprintf("%v.uncaughtExceptionHandler", cmdPrefix)
	if cmd.Flags().Changed(uncaughtExceptionHandlerFlagName) {
		// warning: uncaughtExceptionHandler map type UncaughtExceptionHandler is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
