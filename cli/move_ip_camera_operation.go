// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/broadcast_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBroadcastRestServiceMoveIPCameraCmd returns a cmd to handle operation moveIpCamera
func makeOperationBroadcastRestServiceMoveIPCameraCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "moveIPCamera",
		Short: ``,
		RunE:  runOperationBroadcastRestServiceMoveIPCamera,
	}

	if err := registerOperationBroadcastRestServiceMoveIPCameraParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBroadcastRestServiceMoveIPCamera uses cmd flags to call endpoint api
func runOperationBroadcastRestServiceMoveIPCamera(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broadcast_rest_service.NewMoveIPCameraParams()
	if err, _ := retrieveOperationBroadcastRestServiceMoveIPCameraIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceMoveIPCameraMovementFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceMoveIPCameraValueXFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceMoveIPCameraValueYFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceMoveIPCameraValueZFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBroadcastRestServiceMoveIPCameraResult(appCli.BroadcastRestService.MoveIPCamera(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBroadcastRestServiceMoveIPCameraParamFlags registers all flags needed to fill params
func registerOperationBroadcastRestServiceMoveIPCameraParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBroadcastRestServiceMoveIPCameraIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceMoveIPCameraMovementParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceMoveIPCameraValueXParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceMoveIPCameraValueYParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceMoveIPCameraValueZParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBroadcastRestServiceMoveIPCameraIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. The id of the IP Camera`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationBroadcastRestServiceMoveIPCameraMovementParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	movementDescription := `Movement type. It can be absolute, relative or continuous. If not specified, it's relative`

	var movementFlagName string
	if cmdPrefix == "" {
		movementFlagName = "movement"
	} else {
		movementFlagName = fmt.Sprintf("%v.movement", cmdPrefix)
	}

	var movementFlagDefault string

	_ = cmd.PersistentFlags().String(movementFlagName, movementFlagDefault, movementDescription)

	return nil
}
func registerOperationBroadcastRestServiceMoveIPCameraValueXParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	valueXDescription := `Movement in X direction. If not specified, it's assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements `

	var valueXFlagName string
	if cmdPrefix == "" {
		valueXFlagName = "valueX"
	} else {
		valueXFlagName = fmt.Sprintf("%v.valueX", cmdPrefix)
	}

	var valueXFlagDefault float32

	_ = cmd.PersistentFlags().Float32(valueXFlagName, valueXFlagDefault, valueXDescription)

	return nil
}
func registerOperationBroadcastRestServiceMoveIPCameraValueYParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	valueYDescription := `Movement in Y direction. If not specified, it's assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements `

	var valueYFlagName string
	if cmdPrefix == "" {
		valueYFlagName = "valueY"
	} else {
		valueYFlagName = fmt.Sprintf("%v.valueY", cmdPrefix)
	}

	var valueYFlagDefault float32

	_ = cmd.PersistentFlags().Float32(valueYFlagName, valueYFlagDefault, valueYDescription)

	return nil
}
func registerOperationBroadcastRestServiceMoveIPCameraValueZParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	valueZDescription := `Movement in Zoom. If not specified, it's assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f `

	var valueZFlagName string
	if cmdPrefix == "" {
		valueZFlagName = "valueZ"
	} else {
		valueZFlagName = fmt.Sprintf("%v.valueZ", cmdPrefix)
	}

	var valueZFlagDefault float32

	_ = cmd.PersistentFlags().Float32(valueZFlagName, valueZFlagDefault, valueZDescription)

	return nil
}

func retrieveOperationBroadcastRestServiceMoveIPCameraIDFlag(m *broadcast_rest_service.MoveIPCameraParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceMoveIPCameraMovementFlag(m *broadcast_rest_service.MoveIPCameraParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement") {

		var movementFlagName string
		if cmdPrefix == "" {
			movementFlagName = "movement"
		} else {
			movementFlagName = fmt.Sprintf("%v.movement", cmdPrefix)
		}

		movementFlagValue, err := cmd.Flags().GetString(movementFlagName)
		if err != nil {
			return err, false
		}
		m.Movement = &movementFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceMoveIPCameraValueXFlag(m *broadcast_rest_service.MoveIPCameraParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("valueX") {

		var valueXFlagName string
		if cmdPrefix == "" {
			valueXFlagName = "valueX"
		} else {
			valueXFlagName = fmt.Sprintf("%v.valueX", cmdPrefix)
		}

		valueXFlagValue, err := cmd.Flags().GetFloat32(valueXFlagName)
		if err != nil {
			return err, false
		}
		m.ValueX = &valueXFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceMoveIPCameraValueYFlag(m *broadcast_rest_service.MoveIPCameraParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("valueY") {

		var valueYFlagName string
		if cmdPrefix == "" {
			valueYFlagName = "valueY"
		} else {
			valueYFlagName = fmt.Sprintf("%v.valueY", cmdPrefix)
		}

		valueYFlagValue, err := cmd.Flags().GetFloat32(valueYFlagName)
		if err != nil {
			return err, false
		}
		m.ValueY = &valueYFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceMoveIPCameraValueZFlag(m *broadcast_rest_service.MoveIPCameraParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("valueZ") {

		var valueZFlagName string
		if cmdPrefix == "" {
			valueZFlagName = "valueZ"
		} else {
			valueZFlagName = fmt.Sprintf("%v.valueZ", cmdPrefix)
		}

		valueZFlagValue, err := cmd.Flags().GetFloat32(valueZFlagName)
		if err != nil {
			return err, false
		}
		m.ValueZ = &valueZFlagValue

	}
	return nil, retAdded
}

// parseOperationBroadcastRestServiceMoveIPCameraResult parses request result and return the string content
func parseOperationBroadcastRestServiceMoveIPCameraResult(resp0 *broadcast_rest_service.MoveIPCameraOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broadcast_rest_service.MoveIPCameraOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
