// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/umutbasal/antmedia/client/operations"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationOperationsGetNodeListCmd returns a cmd to handle operation getNodeList
func makeOperationOperationsGetNodeListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getNodeList",
		Short: ``,
		RunE:  runOperationOperationsGetNodeList,
	}

	if err := registerOperationOperationsGetNodeListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationOperationsGetNodeList uses cmd flags to call endpoint api
func runOperationOperationsGetNodeList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := operations.NewGetNodeListParams()
	if err, _ := retrieveOperationOperationsGetNodeListOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOperationsGetNodeListSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationOperationsGetNodeListResult(appCli.Operations.GetNodeList(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationOperationsGetNodeListParamFlags registers all flags needed to fill params
func registerOperationOperationsGetNodeListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationOperationsGetNodeListOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOperationsGetNodeListSizeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationOperationsGetNodeListOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `Required. `

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}
func registerOperationOperationsGetNodeListSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sizeDescription := `Required. `

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func retrieveOperationOperationsGetNodeListOffsetFlag(m *operations.GetNodeListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = offsetFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOperationsGetNodeListSizeFlag(m *operations.GetNodeListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt32(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

	}
	return nil, retAdded
}

// parseOperationOperationsGetNodeListResult parses request result and return the string content
func parseOperationOperationsGetNodeListResult(resp0 *operations.GetNodeListOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*operations.GetNodeListOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
