// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for BasicStreamInfo

// register flags to command
func registerModelBasicStreamInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBasicStreamInfoAudioBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBasicStreamInfoVideoBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBasicStreamInfoVideoCodec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBasicStreamInfoVideoHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBasicStreamInfoVideoWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBasicStreamInfoAudioBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioBitrateDescription := ``

	var audioBitrateFlagName string
	if cmdPrefix == "" {
		audioBitrateFlagName = "audioBitrate"
	} else {
		audioBitrateFlagName = fmt.Sprintf("%v.audioBitrate", cmdPrefix)
	}

	var audioBitrateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(audioBitrateFlagName, audioBitrateFlagDefault, audioBitrateDescription)

	return nil
}

func registerBasicStreamInfoVideoBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoBitrateDescription := ``

	var videoBitrateFlagName string
	if cmdPrefix == "" {
		videoBitrateFlagName = "videoBitrate"
	} else {
		videoBitrateFlagName = fmt.Sprintf("%v.videoBitrate", cmdPrefix)
	}

	var videoBitrateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoBitrateFlagName, videoBitrateFlagDefault, videoBitrateDescription)

	return nil
}

func registerBasicStreamInfoVideoCodec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoCodecDescription := `Enum: ["NOVIDEO","VP8","H264","PNG","H265"]. `

	var videoCodecFlagName string
	if cmdPrefix == "" {
		videoCodecFlagName = "videoCodec"
	} else {
		videoCodecFlagName = fmt.Sprintf("%v.videoCodec", cmdPrefix)
	}

	var videoCodecFlagDefault string

	_ = cmd.PersistentFlags().String(videoCodecFlagName, videoCodecFlagDefault, videoCodecDescription)

	if err := cmd.RegisterFlagCompletionFunc(videoCodecFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NOVIDEO","VP8","H264","PNG","H265"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBasicStreamInfoVideoHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoHeightDescription := ``

	var videoHeightFlagName string
	if cmdPrefix == "" {
		videoHeightFlagName = "videoHeight"
	} else {
		videoHeightFlagName = fmt.Sprintf("%v.videoHeight", cmdPrefix)
	}

	var videoHeightFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoHeightFlagName, videoHeightFlagDefault, videoHeightDescription)

	return nil
}

func registerBasicStreamInfoVideoWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoWidthDescription := ``

	var videoWidthFlagName string
	if cmdPrefix == "" {
		videoWidthFlagName = "videoWidth"
	} else {
		videoWidthFlagName = fmt.Sprintf("%v.videoWidth", cmdPrefix)
	}

	var videoWidthFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoWidthFlagName, videoWidthFlagDefault, videoWidthDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBasicStreamInfoFlags(depth int, m *models.BasicStreamInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, audioBitrateAdded := retrieveBasicStreamInfoAudioBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioBitrateAdded

	err, videoBitrateAdded := retrieveBasicStreamInfoVideoBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoBitrateAdded

	err, videoCodecAdded := retrieveBasicStreamInfoVideoCodecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoCodecAdded

	err, videoHeightAdded := retrieveBasicStreamInfoVideoHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoHeightAdded

	err, videoWidthAdded := retrieveBasicStreamInfoVideoWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoWidthAdded

	return nil, retAdded
}

func retrieveBasicStreamInfoAudioBitrateFlags(depth int, m *models.BasicStreamInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioBitrateFlagName := fmt.Sprintf("%v.audioBitrate", cmdPrefix)
	if cmd.Flags().Changed(audioBitrateFlagName) {

		var audioBitrateFlagName string
		if cmdPrefix == "" {
			audioBitrateFlagName = "audioBitrate"
		} else {
			audioBitrateFlagName = fmt.Sprintf("%v.audioBitrate", cmdPrefix)
		}

		audioBitrateFlagValue, err := cmd.Flags().GetInt32(audioBitrateFlagName)
		if err != nil {
			return err, false
		}
		m.AudioBitrate = audioBitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBasicStreamInfoVideoBitrateFlags(depth int, m *models.BasicStreamInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoBitrateFlagName := fmt.Sprintf("%v.videoBitrate", cmdPrefix)
	if cmd.Flags().Changed(videoBitrateFlagName) {

		var videoBitrateFlagName string
		if cmdPrefix == "" {
			videoBitrateFlagName = "videoBitrate"
		} else {
			videoBitrateFlagName = fmt.Sprintf("%v.videoBitrate", cmdPrefix)
		}

		videoBitrateFlagValue, err := cmd.Flags().GetInt32(videoBitrateFlagName)
		if err != nil {
			return err, false
		}
		m.VideoBitrate = videoBitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBasicStreamInfoVideoCodecFlags(depth int, m *models.BasicStreamInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoCodecFlagName := fmt.Sprintf("%v.videoCodec", cmdPrefix)
	if cmd.Flags().Changed(videoCodecFlagName) {

		var videoCodecFlagName string
		if cmdPrefix == "" {
			videoCodecFlagName = "videoCodec"
		} else {
			videoCodecFlagName = fmt.Sprintf("%v.videoCodec", cmdPrefix)
		}

		videoCodecFlagValue, err := cmd.Flags().GetString(videoCodecFlagName)
		if err != nil {
			return err, false
		}
		m.VideoCodec = videoCodecFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBasicStreamInfoVideoHeightFlags(depth int, m *models.BasicStreamInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoHeightFlagName := fmt.Sprintf("%v.videoHeight", cmdPrefix)
	if cmd.Flags().Changed(videoHeightFlagName) {

		var videoHeightFlagName string
		if cmdPrefix == "" {
			videoHeightFlagName = "videoHeight"
		} else {
			videoHeightFlagName = fmt.Sprintf("%v.videoHeight", cmdPrefix)
		}

		videoHeightFlagValue, err := cmd.Flags().GetInt32(videoHeightFlagName)
		if err != nil {
			return err, false
		}
		m.VideoHeight = videoHeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBasicStreamInfoVideoWidthFlags(depth int, m *models.BasicStreamInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoWidthFlagName := fmt.Sprintf("%v.videoWidth", cmdPrefix)
	if cmd.Flags().Changed(videoWidthFlagName) {

		var videoWidthFlagName string
		if cmdPrefix == "" {
			videoWidthFlagName = "videoWidth"
		} else {
			videoWidthFlagName = fmt.Sprintf("%v.videoWidth", cmdPrefix)
		}

		videoWidthFlagValue, err := cmd.Flags().GetInt32(videoWidthFlagName)
		if err != nil {
			return err, false
		}
		m.VideoWidth = videoWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}
