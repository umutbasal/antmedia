// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for IClient

// register flags to command
func registerModelIClientFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIClientAttributeNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientBandwidthChecked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientConnections(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientScopes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIClientAttributeNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributeNames []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIClientAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributes map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIClientBandwidthChecked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bandwidthCheckedDescription := ``

	var bandwidthCheckedFlagName string
	if cmdPrefix == "" {
		bandwidthCheckedFlagName = "bandwidthChecked"
	} else {
		bandwidthCheckedFlagName = fmt.Sprintf("%v.bandwidthChecked", cmdPrefix)
	}

	var bandwidthCheckedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bandwidthCheckedFlagName, bandwidthCheckedFlagDefault, bandwidthCheckedDescription)

	return nil
}

func registerIClientConnections(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: connections []*IConnection array type is not supported by go-swagger cli yet

	return nil
}

func registerIClientCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := ``

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creationTime"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creationTime", cmdPrefix)
	}

	var creationTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(creationTimeFlagName, creationTimeFlagDefault, creationTimeDescription)

	return nil
}

func registerIClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerIClientScopes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: scopes []*IScope array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIClientFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributeNamesAdded := retrieveIClientAttributeNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributeNamesAdded

	err, attributesAdded := retrieveIClientAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, bandwidthCheckedAdded := retrieveIClientBandwidthCheckedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bandwidthCheckedAdded

	err, connectionsAdded := retrieveIClientConnectionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionsAdded

	err, creationTimeAdded := retrieveIClientCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, idAdded := retrieveIClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, scopesAdded := retrieveIClientScopesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopesAdded

	return nil, retAdded
}

func retrieveIClientAttributeNamesFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributeNamesFlagName := fmt.Sprintf("%v.attributeNames", cmdPrefix)
	if cmd.Flags().Changed(attributeNamesFlagName) {
		// warning: attributeNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIClientAttributesFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// warning: attributes map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIClientBandwidthCheckedFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bandwidthCheckedFlagName := fmt.Sprintf("%v.bandwidthChecked", cmdPrefix)
	if cmd.Flags().Changed(bandwidthCheckedFlagName) {

		var bandwidthCheckedFlagName string
		if cmdPrefix == "" {
			bandwidthCheckedFlagName = "bandwidthChecked"
		} else {
			bandwidthCheckedFlagName = fmt.Sprintf("%v.bandwidthChecked", cmdPrefix)
		}

		bandwidthCheckedFlagValue, err := cmd.Flags().GetBool(bandwidthCheckedFlagName)
		if err != nil {
			return err, false
		}
		m.BandwidthChecked = bandwidthCheckedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientConnectionsFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionsFlagName := fmt.Sprintf("%v.connections", cmdPrefix)
	if cmd.Flags().Changed(connectionsFlagName) {
		// warning: connections array type []*IConnection is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIClientCreationTimeFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creationTime", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creationTime"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creationTime", cmdPrefix)
		}

		creationTimeFlagValue, err := cmd.Flags().GetInt64(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientIDFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientScopesFlags(depth int, m *models.IClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopesFlagName := fmt.Sprintf("%v.scopes", cmdPrefix)
	if cmd.Flags().Changed(scopesFlagName) {
		// warning: scopes array type []*IScope is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
