// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/umutbasal/antmedia/client/broadcast_rest_service"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBroadcastRestServiceGetRoomInfoCmd returns a cmd to handle operation getRoomInfo
func makeOperationBroadcastRestServiceGetRoomInfoCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getRoomInfo",
		Short: ``,
		RunE:  runOperationBroadcastRestServiceGetRoomInfo,
	}

	if err := registerOperationBroadcastRestServiceGetRoomInfoParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBroadcastRestServiceGetRoomInfo uses cmd flags to call endpoint api
func runOperationBroadcastRestServiceGetRoomInfo(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broadcast_rest_service.NewGetRoomInfoParams()
	if err, _ := retrieveOperationBroadcastRestServiceGetRoomInfoRoomIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceGetRoomInfoStreamIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBroadcastRestServiceGetRoomInfoResult(appCli.BroadcastRestService.GetRoomInfo(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBroadcastRestServiceGetRoomInfoParamFlags registers all flags needed to fill params
func registerOperationBroadcastRestServiceGetRoomInfoParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBroadcastRestServiceGetRoomInfoRoomIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceGetRoomInfoStreamIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBroadcastRestServiceGetRoomInfoRoomIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	roomIdDescription := `Required. Room id`

	var roomIdFlagName string
	if cmdPrefix == "" {
		roomIdFlagName = "room_id"
	} else {
		roomIdFlagName = fmt.Sprintf("%v.room_id", cmdPrefix)
	}

	var roomIdFlagDefault string

	_ = cmd.PersistentFlags().String(roomIdFlagName, roomIdFlagDefault, roomIdDescription)

	return nil
}
func registerOperationBroadcastRestServiceGetRoomInfoStreamIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	streamIdDescription := `If Stream Id is entered, that stream id will be isolated from the result`

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func retrieveOperationBroadcastRestServiceGetRoomInfoRoomIDFlag(m *broadcast_rest_service.GetRoomInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("room_id") {

		var roomIdFlagName string
		if cmdPrefix == "" {
			roomIdFlagName = "room_id"
		} else {
			roomIdFlagName = fmt.Sprintf("%v.room_id", cmdPrefix)
		}

		roomIdFlagValue, err := cmd.Flags().GetString(roomIdFlagName)
		if err != nil {
			return err, false
		}
		m.RoomID = roomIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceGetRoomInfoStreamIDFlag(m *broadcast_rest_service.GetRoomInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("streamId") {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = &streamIdFlagValue

	}
	return nil, retAdded
}

// parseOperationBroadcastRestServiceGetRoomInfoResult parses request result and return the string content
func parseOperationBroadcastRestServiceGetRoomInfoResult(resp0 *broadcast_rest_service.GetRoomInfoOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broadcast_rest_service.GetRoomInfoOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
