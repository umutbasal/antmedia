// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for ModuleDescriptor

// register flags to command
func registerModelModuleDescriptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModuleDescriptorAutomatic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModuleDescriptorOpen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModuleDescriptorAutomatic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	automaticDescription := ``

	var automaticFlagName string
	if cmdPrefix == "" {
		automaticFlagName = "automatic"
	} else {
		automaticFlagName = fmt.Sprintf("%v.automatic", cmdPrefix)
	}

	var automaticFlagDefault bool

	_ = cmd.PersistentFlags().Bool(automaticFlagName, automaticFlagDefault, automaticDescription)

	return nil
}

func registerModuleDescriptorOpen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	openDescription := ``

	var openFlagName string
	if cmdPrefix == "" {
		openFlagName = "open"
	} else {
		openFlagName = fmt.Sprintf("%v.open", cmdPrefix)
	}

	var openFlagDefault bool

	_ = cmd.PersistentFlags().Bool(openFlagName, openFlagDefault, openDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModuleDescriptorFlags(depth int, m *models.ModuleDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, automaticAdded := retrieveModuleDescriptorAutomaticFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || automaticAdded

	err, openAdded := retrieveModuleDescriptorOpenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || openAdded

	return nil, retAdded
}

func retrieveModuleDescriptorAutomaticFlags(depth int, m *models.ModuleDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	automaticFlagName := fmt.Sprintf("%v.automatic", cmdPrefix)
	if cmd.Flags().Changed(automaticFlagName) {

		var automaticFlagName string
		if cmdPrefix == "" {
			automaticFlagName = "automatic"
		} else {
			automaticFlagName = fmt.Sprintf("%v.automatic", cmdPrefix)
		}

		automaticFlagValue, err := cmd.Flags().GetBool(automaticFlagName)
		if err != nil {
			return err, false
		}
		m.Automatic = automaticFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModuleDescriptorOpenFlags(depth int, m *models.ModuleDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	openFlagName := fmt.Sprintf("%v.open", cmdPrefix)
	if cmd.Flags().Changed(openFlagName) {

		var openFlagName string
		if cmdPrefix == "" {
			openFlagName = "open"
		} else {
			openFlagName = fmt.Sprintf("%v.open", cmdPrefix)
		}

		openFlagValue, err := cmd.Flags().GetBool(openFlagName)
		if err != nil {
			return err, false
		}
		m.Open = openFlagValue

		retAdded = true
	}

	return nil, retAdded
}
