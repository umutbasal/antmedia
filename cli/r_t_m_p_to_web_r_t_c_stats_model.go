// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for RTMPToWebRTCStats

// register flags to command
func registerModelRTMPToWebRTCStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRTMPToWebRTCStatsAbsoluteTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsAbsoluteTotalIngestTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsAbsouteTotalLatencyUntilRTPPacketizingTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsCaptureTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsEncoderCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsFrameID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalDecodedVideoFrameCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalDeliveredVideoPacketCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalEncodedVideoPacketCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalIngestedVideoPacketCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalVideoDecodeTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalVideoDeliveryTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalVideoEncodeQueueTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalVideoEncodeTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRTMPToWebRTCStatsTotalVideoIngestTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRTMPToWebRTCStatsAbsoluteTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	absoluteTimeMsDescription := ``

	var absoluteTimeMsFlagName string
	if cmdPrefix == "" {
		absoluteTimeMsFlagName = "absoluteTimeMs"
	} else {
		absoluteTimeMsFlagName = fmt.Sprintf("%v.absoluteTimeMs", cmdPrefix)
	}

	var absoluteTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(absoluteTimeMsFlagName, absoluteTimeMsFlagDefault, absoluteTimeMsDescription)

	return nil
}

func registerRTMPToWebRTCStatsAbsoluteTotalIngestTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	absoluteTotalIngestTimeDescription := ``

	var absoluteTotalIngestTimeFlagName string
	if cmdPrefix == "" {
		absoluteTotalIngestTimeFlagName = "absoluteTotalIngestTime"
	} else {
		absoluteTotalIngestTimeFlagName = fmt.Sprintf("%v.absoluteTotalIngestTime", cmdPrefix)
	}

	var absoluteTotalIngestTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(absoluteTotalIngestTimeFlagName, absoluteTotalIngestTimeFlagDefault, absoluteTotalIngestTimeDescription)

	return nil
}

func registerRTMPToWebRTCStatsAbsouteTotalLatencyUntilRTPPacketizingTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	absouteTotalLatencyUntilRTPPacketizingTimeMsDescription := ``

	var absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName string
	if cmdPrefix == "" {
		absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName = "absouteTotalLatencyUntilRTPPacketizingTimeMs"
	} else {
		absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName = fmt.Sprintf("%v.absouteTotalLatencyUntilRTPPacketizingTimeMs", cmdPrefix)
	}

	var absouteTotalLatencyUntilRTPPacketizingTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName, absouteTotalLatencyUntilRTPPacketizingTimeMsFlagDefault, absouteTotalLatencyUntilRTPPacketizingTimeMsDescription)

	return nil
}

func registerRTMPToWebRTCStatsCaptureTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	captureTimeMsDescription := ``

	var captureTimeMsFlagName string
	if cmdPrefix == "" {
		captureTimeMsFlagName = "captureTimeMs"
	} else {
		captureTimeMsFlagName = fmt.Sprintf("%v.captureTimeMs", cmdPrefix)
	}

	var captureTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(captureTimeMsFlagName, captureTimeMsFlagDefault, captureTimeMsDescription)

	return nil
}

func registerRTMPToWebRTCStatsEncoderCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encoderCountDescription := ``

	var encoderCountFlagName string
	if cmdPrefix == "" {
		encoderCountFlagName = "encoderCount"
	} else {
		encoderCountFlagName = fmt.Sprintf("%v.encoderCount", cmdPrefix)
	}

	var encoderCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(encoderCountFlagName, encoderCountFlagDefault, encoderCountDescription)

	return nil
}

func registerRTMPToWebRTCStatsFrameID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frameIdDescription := ``

	var frameIdFlagName string
	if cmdPrefix == "" {
		frameIdFlagName = "frameId"
	} else {
		frameIdFlagName = fmt.Sprintf("%v.frameId", cmdPrefix)
	}

	var frameIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(frameIdFlagName, frameIdFlagDefault, frameIdDescription)

	return nil
}

func registerRTMPToWebRTCStatsStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamIdDescription := ``

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalDecodedVideoFrameCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDecodedVideoFrameCountDescription := ``

	var totalDecodedVideoFrameCountFlagName string
	if cmdPrefix == "" {
		totalDecodedVideoFrameCountFlagName = "totalDecodedVideoFrameCount"
	} else {
		totalDecodedVideoFrameCountFlagName = fmt.Sprintf("%v.totalDecodedVideoFrameCount", cmdPrefix)
	}

	var totalDecodedVideoFrameCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalDecodedVideoFrameCountFlagName, totalDecodedVideoFrameCountFlagDefault, totalDecodedVideoFrameCountDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalDeliveredVideoPacketCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDeliveredVideoPacketCountDescription := ``

	var totalDeliveredVideoPacketCountFlagName string
	if cmdPrefix == "" {
		totalDeliveredVideoPacketCountFlagName = "totalDeliveredVideoPacketCount"
	} else {
		totalDeliveredVideoPacketCountFlagName = fmt.Sprintf("%v.totalDeliveredVideoPacketCount", cmdPrefix)
	}

	var totalDeliveredVideoPacketCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalDeliveredVideoPacketCountFlagName, totalDeliveredVideoPacketCountFlagDefault, totalDeliveredVideoPacketCountDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalEncodedVideoPacketCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalEncodedVideoPacketCountDescription := ``

	var totalEncodedVideoPacketCountFlagName string
	if cmdPrefix == "" {
		totalEncodedVideoPacketCountFlagName = "totalEncodedVideoPacketCount"
	} else {
		totalEncodedVideoPacketCountFlagName = fmt.Sprintf("%v.totalEncodedVideoPacketCount", cmdPrefix)
	}

	var totalEncodedVideoPacketCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalEncodedVideoPacketCountFlagName, totalEncodedVideoPacketCountFlagDefault, totalEncodedVideoPacketCountDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalIngestedVideoPacketCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalIngestedVideoPacketCountDescription := ``

	var totalIngestedVideoPacketCountFlagName string
	if cmdPrefix == "" {
		totalIngestedVideoPacketCountFlagName = "totalIngestedVideoPacketCount"
	} else {
		totalIngestedVideoPacketCountFlagName = fmt.Sprintf("%v.totalIngestedVideoPacketCount", cmdPrefix)
	}

	var totalIngestedVideoPacketCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalIngestedVideoPacketCountFlagName, totalIngestedVideoPacketCountFlagDefault, totalIngestedVideoPacketCountDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalVideoDecodeTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalVideoDecodeTimeDescription := ``

	var totalVideoDecodeTimeFlagName string
	if cmdPrefix == "" {
		totalVideoDecodeTimeFlagName = "totalVideoDecodeTime"
	} else {
		totalVideoDecodeTimeFlagName = fmt.Sprintf("%v.totalVideoDecodeTime", cmdPrefix)
	}

	var totalVideoDecodeTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalVideoDecodeTimeFlagName, totalVideoDecodeTimeFlagDefault, totalVideoDecodeTimeDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalVideoDeliveryTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalVideoDeliveryTimeDescription := ``

	var totalVideoDeliveryTimeFlagName string
	if cmdPrefix == "" {
		totalVideoDeliveryTimeFlagName = "totalVideoDeliveryTime"
	} else {
		totalVideoDeliveryTimeFlagName = fmt.Sprintf("%v.totalVideoDeliveryTime", cmdPrefix)
	}

	var totalVideoDeliveryTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalVideoDeliveryTimeFlagName, totalVideoDeliveryTimeFlagDefault, totalVideoDeliveryTimeDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalVideoEncodeQueueTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalVideoEncodeQueueTimeDescription := ``

	var totalVideoEncodeQueueTimeFlagName string
	if cmdPrefix == "" {
		totalVideoEncodeQueueTimeFlagName = "totalVideoEncodeQueueTime"
	} else {
		totalVideoEncodeQueueTimeFlagName = fmt.Sprintf("%v.totalVideoEncodeQueueTime", cmdPrefix)
	}

	var totalVideoEncodeQueueTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalVideoEncodeQueueTimeFlagName, totalVideoEncodeQueueTimeFlagDefault, totalVideoEncodeQueueTimeDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalVideoEncodeTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalVideoEncodeTimeDescription := ``

	var totalVideoEncodeTimeFlagName string
	if cmdPrefix == "" {
		totalVideoEncodeTimeFlagName = "totalVideoEncodeTime"
	} else {
		totalVideoEncodeTimeFlagName = fmt.Sprintf("%v.totalVideoEncodeTime", cmdPrefix)
	}

	var totalVideoEncodeTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalVideoEncodeTimeFlagName, totalVideoEncodeTimeFlagDefault, totalVideoEncodeTimeDescription)

	return nil
}

func registerRTMPToWebRTCStatsTotalVideoIngestTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalVideoIngestTimeDescription := ``

	var totalVideoIngestTimeFlagName string
	if cmdPrefix == "" {
		totalVideoIngestTimeFlagName = "totalVideoIngestTime"
	} else {
		totalVideoIngestTimeFlagName = fmt.Sprintf("%v.totalVideoIngestTime", cmdPrefix)
	}

	var totalVideoIngestTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalVideoIngestTimeFlagName, totalVideoIngestTimeFlagDefault, totalVideoIngestTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRTMPToWebRTCStatsFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, absoluteTimeMsAdded := retrieveRTMPToWebRTCStatsAbsoluteTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || absoluteTimeMsAdded

	err, absoluteTotalIngestTimeAdded := retrieveRTMPToWebRTCStatsAbsoluteTotalIngestTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || absoluteTotalIngestTimeAdded

	err, absouteTotalLatencyUntilRTPPacketizingTimeMsAdded := retrieveRTMPToWebRTCStatsAbsouteTotalLatencyUntilRTPPacketizingTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || absouteTotalLatencyUntilRTPPacketizingTimeMsAdded

	err, captureTimeMsAdded := retrieveRTMPToWebRTCStatsCaptureTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || captureTimeMsAdded

	err, encoderCountAdded := retrieveRTMPToWebRTCStatsEncoderCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderCountAdded

	err, frameIdAdded := retrieveRTMPToWebRTCStatsFrameIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frameIdAdded

	err, streamIdAdded := retrieveRTMPToWebRTCStatsStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, totalDecodedVideoFrameCountAdded := retrieveRTMPToWebRTCStatsTotalDecodedVideoFrameCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalDecodedVideoFrameCountAdded

	err, totalDeliveredVideoPacketCountAdded := retrieveRTMPToWebRTCStatsTotalDeliveredVideoPacketCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalDeliveredVideoPacketCountAdded

	err, totalEncodedVideoPacketCountAdded := retrieveRTMPToWebRTCStatsTotalEncodedVideoPacketCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalEncodedVideoPacketCountAdded

	err, totalIngestedVideoPacketCountAdded := retrieveRTMPToWebRTCStatsTotalIngestedVideoPacketCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalIngestedVideoPacketCountAdded

	err, totalVideoDecodeTimeAdded := retrieveRTMPToWebRTCStatsTotalVideoDecodeTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalVideoDecodeTimeAdded

	err, totalVideoDeliveryTimeAdded := retrieveRTMPToWebRTCStatsTotalVideoDeliveryTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalVideoDeliveryTimeAdded

	err, totalVideoEncodeQueueTimeAdded := retrieveRTMPToWebRTCStatsTotalVideoEncodeQueueTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalVideoEncodeQueueTimeAdded

	err, totalVideoEncodeTimeAdded := retrieveRTMPToWebRTCStatsTotalVideoEncodeTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalVideoEncodeTimeAdded

	err, totalVideoIngestTimeAdded := retrieveRTMPToWebRTCStatsTotalVideoIngestTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalVideoIngestTimeAdded

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsAbsoluteTimeMsFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	absoluteTimeMsFlagName := fmt.Sprintf("%v.absoluteTimeMs", cmdPrefix)
	if cmd.Flags().Changed(absoluteTimeMsFlagName) {

		var absoluteTimeMsFlagName string
		if cmdPrefix == "" {
			absoluteTimeMsFlagName = "absoluteTimeMs"
		} else {
			absoluteTimeMsFlagName = fmt.Sprintf("%v.absoluteTimeMs", cmdPrefix)
		}

		absoluteTimeMsFlagValue, err := cmd.Flags().GetInt64(absoluteTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.AbsoluteTimeMs = absoluteTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsAbsoluteTotalIngestTimeFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	absoluteTotalIngestTimeFlagName := fmt.Sprintf("%v.absoluteTotalIngestTime", cmdPrefix)
	if cmd.Flags().Changed(absoluteTotalIngestTimeFlagName) {

		var absoluteTotalIngestTimeFlagName string
		if cmdPrefix == "" {
			absoluteTotalIngestTimeFlagName = "absoluteTotalIngestTime"
		} else {
			absoluteTotalIngestTimeFlagName = fmt.Sprintf("%v.absoluteTotalIngestTime", cmdPrefix)
		}

		absoluteTotalIngestTimeFlagValue, err := cmd.Flags().GetInt64(absoluteTotalIngestTimeFlagName)
		if err != nil {
			return err, false
		}
		m.AbsoluteTotalIngestTime = absoluteTotalIngestTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsAbsouteTotalLatencyUntilRTPPacketizingTimeMsFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName := fmt.Sprintf("%v.absouteTotalLatencyUntilRTPPacketizingTimeMs", cmdPrefix)
	if cmd.Flags().Changed(absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName) {

		var absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName string
		if cmdPrefix == "" {
			absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName = "absouteTotalLatencyUntilRTPPacketizingTimeMs"
		} else {
			absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName = fmt.Sprintf("%v.absouteTotalLatencyUntilRTPPacketizingTimeMs", cmdPrefix)
		}

		absouteTotalLatencyUntilRTPPacketizingTimeMsFlagValue, err := cmd.Flags().GetInt64(absouteTotalLatencyUntilRTPPacketizingTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.AbsouteTotalLatencyUntilRTPPacketizingTimeMs = absouteTotalLatencyUntilRTPPacketizingTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsCaptureTimeMsFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	captureTimeMsFlagName := fmt.Sprintf("%v.captureTimeMs", cmdPrefix)
	if cmd.Flags().Changed(captureTimeMsFlagName) {

		var captureTimeMsFlagName string
		if cmdPrefix == "" {
			captureTimeMsFlagName = "captureTimeMs"
		} else {
			captureTimeMsFlagName = fmt.Sprintf("%v.captureTimeMs", cmdPrefix)
		}

		captureTimeMsFlagValue, err := cmd.Flags().GetInt64(captureTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.CaptureTimeMs = captureTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsEncoderCountFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderCountFlagName := fmt.Sprintf("%v.encoderCount", cmdPrefix)
	if cmd.Flags().Changed(encoderCountFlagName) {

		var encoderCountFlagName string
		if cmdPrefix == "" {
			encoderCountFlagName = "encoderCount"
		} else {
			encoderCountFlagName = fmt.Sprintf("%v.encoderCount", cmdPrefix)
		}

		encoderCountFlagValue, err := cmd.Flags().GetInt32(encoderCountFlagName)
		if err != nil {
			return err, false
		}
		m.EncoderCount = encoderCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsFrameIDFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frameIdFlagName := fmt.Sprintf("%v.frameId", cmdPrefix)
	if cmd.Flags().Changed(frameIdFlagName) {

		var frameIdFlagName string
		if cmdPrefix == "" {
			frameIdFlagName = "frameId"
		} else {
			frameIdFlagName = fmt.Sprintf("%v.frameId", cmdPrefix)
		}

		frameIdFlagValue, err := cmd.Flags().GetInt64(frameIdFlagName)
		if err != nil {
			return err, false
		}
		m.FrameID = frameIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsStreamIDFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalDecodedVideoFrameCountFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalDecodedVideoFrameCountFlagName := fmt.Sprintf("%v.totalDecodedVideoFrameCount", cmdPrefix)
	if cmd.Flags().Changed(totalDecodedVideoFrameCountFlagName) {

		var totalDecodedVideoFrameCountFlagName string
		if cmdPrefix == "" {
			totalDecodedVideoFrameCountFlagName = "totalDecodedVideoFrameCount"
		} else {
			totalDecodedVideoFrameCountFlagName = fmt.Sprintf("%v.totalDecodedVideoFrameCount", cmdPrefix)
		}

		totalDecodedVideoFrameCountFlagValue, err := cmd.Flags().GetInt64(totalDecodedVideoFrameCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalDecodedVideoFrameCount = totalDecodedVideoFrameCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalDeliveredVideoPacketCountFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalDeliveredVideoPacketCountFlagName := fmt.Sprintf("%v.totalDeliveredVideoPacketCount", cmdPrefix)
	if cmd.Flags().Changed(totalDeliveredVideoPacketCountFlagName) {

		var totalDeliveredVideoPacketCountFlagName string
		if cmdPrefix == "" {
			totalDeliveredVideoPacketCountFlagName = "totalDeliveredVideoPacketCount"
		} else {
			totalDeliveredVideoPacketCountFlagName = fmt.Sprintf("%v.totalDeliveredVideoPacketCount", cmdPrefix)
		}

		totalDeliveredVideoPacketCountFlagValue, err := cmd.Flags().GetInt64(totalDeliveredVideoPacketCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalDeliveredVideoPacketCount = totalDeliveredVideoPacketCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalEncodedVideoPacketCountFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalEncodedVideoPacketCountFlagName := fmt.Sprintf("%v.totalEncodedVideoPacketCount", cmdPrefix)
	if cmd.Flags().Changed(totalEncodedVideoPacketCountFlagName) {

		var totalEncodedVideoPacketCountFlagName string
		if cmdPrefix == "" {
			totalEncodedVideoPacketCountFlagName = "totalEncodedVideoPacketCount"
		} else {
			totalEncodedVideoPacketCountFlagName = fmt.Sprintf("%v.totalEncodedVideoPacketCount", cmdPrefix)
		}

		totalEncodedVideoPacketCountFlagValue, err := cmd.Flags().GetInt64(totalEncodedVideoPacketCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalEncodedVideoPacketCount = totalEncodedVideoPacketCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalIngestedVideoPacketCountFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalIngestedVideoPacketCountFlagName := fmt.Sprintf("%v.totalIngestedVideoPacketCount", cmdPrefix)
	if cmd.Flags().Changed(totalIngestedVideoPacketCountFlagName) {

		var totalIngestedVideoPacketCountFlagName string
		if cmdPrefix == "" {
			totalIngestedVideoPacketCountFlagName = "totalIngestedVideoPacketCount"
		} else {
			totalIngestedVideoPacketCountFlagName = fmt.Sprintf("%v.totalIngestedVideoPacketCount", cmdPrefix)
		}

		totalIngestedVideoPacketCountFlagValue, err := cmd.Flags().GetInt64(totalIngestedVideoPacketCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalIngestedVideoPacketCount = totalIngestedVideoPacketCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalVideoDecodeTimeFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalVideoDecodeTimeFlagName := fmt.Sprintf("%v.totalVideoDecodeTime", cmdPrefix)
	if cmd.Flags().Changed(totalVideoDecodeTimeFlagName) {

		var totalVideoDecodeTimeFlagName string
		if cmdPrefix == "" {
			totalVideoDecodeTimeFlagName = "totalVideoDecodeTime"
		} else {
			totalVideoDecodeTimeFlagName = fmt.Sprintf("%v.totalVideoDecodeTime", cmdPrefix)
		}

		totalVideoDecodeTimeFlagValue, err := cmd.Flags().GetInt64(totalVideoDecodeTimeFlagName)
		if err != nil {
			return err, false
		}
		m.TotalVideoDecodeTime = totalVideoDecodeTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalVideoDeliveryTimeFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalVideoDeliveryTimeFlagName := fmt.Sprintf("%v.totalVideoDeliveryTime", cmdPrefix)
	if cmd.Flags().Changed(totalVideoDeliveryTimeFlagName) {

		var totalVideoDeliveryTimeFlagName string
		if cmdPrefix == "" {
			totalVideoDeliveryTimeFlagName = "totalVideoDeliveryTime"
		} else {
			totalVideoDeliveryTimeFlagName = fmt.Sprintf("%v.totalVideoDeliveryTime", cmdPrefix)
		}

		totalVideoDeliveryTimeFlagValue, err := cmd.Flags().GetInt64(totalVideoDeliveryTimeFlagName)
		if err != nil {
			return err, false
		}
		m.TotalVideoDeliveryTime = totalVideoDeliveryTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalVideoEncodeQueueTimeFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalVideoEncodeQueueTimeFlagName := fmt.Sprintf("%v.totalVideoEncodeQueueTime", cmdPrefix)
	if cmd.Flags().Changed(totalVideoEncodeQueueTimeFlagName) {

		var totalVideoEncodeQueueTimeFlagName string
		if cmdPrefix == "" {
			totalVideoEncodeQueueTimeFlagName = "totalVideoEncodeQueueTime"
		} else {
			totalVideoEncodeQueueTimeFlagName = fmt.Sprintf("%v.totalVideoEncodeQueueTime", cmdPrefix)
		}

		totalVideoEncodeQueueTimeFlagValue, err := cmd.Flags().GetInt64(totalVideoEncodeQueueTimeFlagName)
		if err != nil {
			return err, false
		}
		m.TotalVideoEncodeQueueTime = totalVideoEncodeQueueTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalVideoEncodeTimeFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalVideoEncodeTimeFlagName := fmt.Sprintf("%v.totalVideoEncodeTime", cmdPrefix)
	if cmd.Flags().Changed(totalVideoEncodeTimeFlagName) {

		var totalVideoEncodeTimeFlagName string
		if cmdPrefix == "" {
			totalVideoEncodeTimeFlagName = "totalVideoEncodeTime"
		} else {
			totalVideoEncodeTimeFlagName = fmt.Sprintf("%v.totalVideoEncodeTime", cmdPrefix)
		}

		totalVideoEncodeTimeFlagValue, err := cmd.Flags().GetInt64(totalVideoEncodeTimeFlagName)
		if err != nil {
			return err, false
		}
		m.TotalVideoEncodeTime = totalVideoEncodeTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRTMPToWebRTCStatsTotalVideoIngestTimeFlags(depth int, m *models.RTMPToWebRTCStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalVideoIngestTimeFlagName := fmt.Sprintf("%v.totalVideoIngestTime", cmdPrefix)
	if cmd.Flags().Changed(totalVideoIngestTimeFlagName) {

		var totalVideoIngestTimeFlagName string
		if cmdPrefix == "" {
			totalVideoIngestTimeFlagName = "totalVideoIngestTime"
		} else {
			totalVideoIngestTimeFlagName = fmt.Sprintf("%v.totalVideoIngestTime", cmdPrefix)
		}

		totalVideoIngestTimeFlagValue, err := cmd.Flags().GetInt64(totalVideoIngestTimeFlagName)
		if err != nil {
			return err, false
		}
		m.TotalVideoIngestTime = totalVideoIngestTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
