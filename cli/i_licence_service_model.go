// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for ILicenceService

// register flags to command
func registerModelILicenceServiceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerILicenceServiceLastLicenseStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerILicenceServiceLicenceSuspended(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerILicenceServiceLastLicenseStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lastLicenseStatusFlagName string
	if cmdPrefix == "" {
		lastLicenseStatusFlagName = "lastLicenseStatus"
	} else {
		lastLicenseStatusFlagName = fmt.Sprintf("%v.lastLicenseStatus", cmdPrefix)
	}

	if err := registerModelLicenceFlags(depth+1, lastLicenseStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerILicenceServiceLicenceSuspended(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	licenceSuspendedDescription := ``

	var licenceSuspendedFlagName string
	if cmdPrefix == "" {
		licenceSuspendedFlagName = "licenceSuspended"
	} else {
		licenceSuspendedFlagName = fmt.Sprintf("%v.licenceSuspended", cmdPrefix)
	}

	var licenceSuspendedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(licenceSuspendedFlagName, licenceSuspendedFlagDefault, licenceSuspendedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelILicenceServiceFlags(depth int, m *models.ILicenceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lastLicenseStatusAdded := retrieveILicenceServiceLastLicenseStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastLicenseStatusAdded

	err, licenceSuspendedAdded := retrieveILicenceServiceLicenceSuspendedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || licenceSuspendedAdded

	return nil, retAdded
}

func retrieveILicenceServiceLastLicenseStatusFlags(depth int, m *models.ILicenceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastLicenseStatusFlagName := fmt.Sprintf("%v.lastLicenseStatus", cmdPrefix)
	if cmd.Flags().Changed(lastLicenseStatusFlagName) {
		// info: complex object lastLicenseStatus Licence is retrieved outside this Changed() block
	}
	lastLicenseStatusFlagValue := m.LastLicenseStatus
	if swag.IsZero(lastLicenseStatusFlagValue) {
		lastLicenseStatusFlagValue = &models.Licence{}
	}

	err, lastLicenseStatusAdded := retrieveModelLicenceFlags(depth+1, lastLicenseStatusFlagValue, lastLicenseStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastLicenseStatusAdded
	if lastLicenseStatusAdded {
		m.LastLicenseStatus = lastLicenseStatusFlagValue
	}

	return nil, retAdded
}

func retrieveILicenceServiceLicenceSuspendedFlags(depth int, m *models.ILicenceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	licenceSuspendedFlagName := fmt.Sprintf("%v.licenceSuspended", cmdPrefix)
	if cmd.Flags().Changed(licenceSuspendedFlagName) {

		var licenceSuspendedFlagName string
		if cmdPrefix == "" {
			licenceSuspendedFlagName = "licenceSuspended"
		} else {
			licenceSuspendedFlagName = fmt.Sprintf("%v.licenceSuspended", cmdPrefix)
		}

		licenceSuspendedFlagValue, err := cmd.Flags().GetBool(licenceSuspendedFlagName)
		if err != nil {
			return err, false
		}
		m.LicenceSuspended = licenceSuspendedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
