// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for IPersistable

// register flags to command
func registerModelIPersistableFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPersistableLastModified(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPersistableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPersistablePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPersistablePersistent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPersistableStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPersistableType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPersistableLastModified(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastModifiedDescription := ``

	var lastModifiedFlagName string
	if cmdPrefix == "" {
		lastModifiedFlagName = "lastModified"
	} else {
		lastModifiedFlagName = fmt.Sprintf("%v.lastModified", cmdPrefix)
	}

	var lastModifiedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastModifiedFlagName, lastModifiedFlagDefault, lastModifiedDescription)

	return nil
}

func registerIPersistableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerIPersistablePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := ``

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerIPersistablePersistent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	persistentDescription := ``

	var persistentFlagName string
	if cmdPrefix == "" {
		persistentFlagName = "persistent"
	} else {
		persistentFlagName = fmt.Sprintf("%v.persistent", cmdPrefix)
	}

	var persistentFlagDefault bool

	_ = cmd.PersistentFlags().Bool(persistentFlagName, persistentFlagDefault, persistentDescription)

	return nil
}

func registerIPersistableStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var storeFlagName string
	if cmdPrefix == "" {
		storeFlagName = "store"
	} else {
		storeFlagName = fmt.Sprintf("%v.store", cmdPrefix)
	}

	if err := registerModelIPersistenceStoreFlags(depth+1, storeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPersistableType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPersistableFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lastModifiedAdded := retrieveIPersistableLastModifiedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastModifiedAdded

	err, nameAdded := retrieveIPersistableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pathAdded := retrieveIPersistablePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, persistentAdded := retrieveIPersistablePersistentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || persistentAdded

	err, storeAdded := retrieveIPersistableStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storeAdded

	err, typeAdded := retrieveIPersistableTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveIPersistableLastModifiedFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastModifiedFlagName := fmt.Sprintf("%v.lastModified", cmdPrefix)
	if cmd.Flags().Changed(lastModifiedFlagName) {

		var lastModifiedFlagName string
		if cmdPrefix == "" {
			lastModifiedFlagName = "lastModified"
		} else {
			lastModifiedFlagName = fmt.Sprintf("%v.lastModified", cmdPrefix)
		}

		lastModifiedFlagValue, err := cmd.Flags().GetInt64(lastModifiedFlagName)
		if err != nil {
			return err, false
		}
		m.LastModified = lastModifiedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPersistableNameFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPersistablePathFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFlagName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPersistablePersistentFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	persistentFlagName := fmt.Sprintf("%v.persistent", cmdPrefix)
	if cmd.Flags().Changed(persistentFlagName) {

		var persistentFlagName string
		if cmdPrefix == "" {
			persistentFlagName = "persistent"
		} else {
			persistentFlagName = fmt.Sprintf("%v.persistent", cmdPrefix)
		}

		persistentFlagValue, err := cmd.Flags().GetBool(persistentFlagName)
		if err != nil {
			return err, false
		}
		m.Persistent = persistentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPersistableStoreFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storeFlagName := fmt.Sprintf("%v.store", cmdPrefix)
	if cmd.Flags().Changed(storeFlagName) {
		// info: complex object store IPersistenceStore is retrieved outside this Changed() block
	}
	storeFlagValue := m.Store
	if swag.IsZero(storeFlagValue) {
		storeFlagValue = &models.IPersistenceStore{}
	}

	err, storeAdded := retrieveModelIPersistenceStoreFlags(depth+1, storeFlagValue, storeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storeAdded
	if storeAdded {
		m.Store = storeFlagValue
	}

	return nil, retAdded
}

func retrieveIPersistableTypeFlags(depth int, m *models.IPersistable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
