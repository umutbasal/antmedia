// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for IVideoStreamCodec

// register flags to command
func registerModelIVideoStreamCodecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIVideoStreamCodecDecoderConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIVideoStreamCodecKeyframe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIVideoStreamCodecKeyframes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIVideoStreamCodecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIVideoStreamCodecNumInterframes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIVideoStreamCodecDecoderConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var decoderConfigurationFlagName string
	if cmdPrefix == "" {
		decoderConfigurationFlagName = "decoderConfiguration"
	} else {
		decoderConfigurationFlagName = fmt.Sprintf("%v.decoderConfiguration", cmdPrefix)
	}

	if err := registerModelIoBufferFlags(depth+1, decoderConfigurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIVideoStreamCodecKeyframe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var keyframeFlagName string
	if cmdPrefix == "" {
		keyframeFlagName = "keyframe"
	} else {
		keyframeFlagName = fmt.Sprintf("%v.keyframe", cmdPrefix)
	}

	if err := registerModelIoBufferFlags(depth+1, keyframeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIVideoStreamCodecKeyframes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: keyframes []*FrameData array type is not supported by go-swagger cli yet

	return nil
}

func registerIVideoStreamCodecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerIVideoStreamCodecNumInterframes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numInterframesDescription := ``

	var numInterframesFlagName string
	if cmdPrefix == "" {
		numInterframesFlagName = "numInterframes"
	} else {
		numInterframesFlagName = fmt.Sprintf("%v.numInterframes", cmdPrefix)
	}

	var numInterframesFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numInterframesFlagName, numInterframesFlagDefault, numInterframesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIVideoStreamCodecFlags(depth int, m *models.IVideoStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, decoderConfigurationAdded := retrieveIVideoStreamCodecDecoderConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || decoderConfigurationAdded

	err, keyframeAdded := retrieveIVideoStreamCodecKeyframeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyframeAdded

	err, keyframesAdded := retrieveIVideoStreamCodecKeyframesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyframesAdded

	err, nameAdded := retrieveIVideoStreamCodecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, numInterframesAdded := retrieveIVideoStreamCodecNumInterframesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numInterframesAdded

	return nil, retAdded
}

func retrieveIVideoStreamCodecDecoderConfigurationFlags(depth int, m *models.IVideoStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	decoderConfigurationFlagName := fmt.Sprintf("%v.decoderConfiguration", cmdPrefix)
	if cmd.Flags().Changed(decoderConfigurationFlagName) {
		// info: complex object decoderConfiguration IoBuffer is retrieved outside this Changed() block
	}
	decoderConfigurationFlagValue := m.DecoderConfiguration
	if swag.IsZero(decoderConfigurationFlagValue) {
		decoderConfigurationFlagValue = &models.IoBuffer{}
	}

	err, decoderConfigurationAdded := retrieveModelIoBufferFlags(depth+1, decoderConfigurationFlagValue, decoderConfigurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || decoderConfigurationAdded
	if decoderConfigurationAdded {
		m.DecoderConfiguration = decoderConfigurationFlagValue
	}

	return nil, retAdded
}

func retrieveIVideoStreamCodecKeyframeFlags(depth int, m *models.IVideoStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyframeFlagName := fmt.Sprintf("%v.keyframe", cmdPrefix)
	if cmd.Flags().Changed(keyframeFlagName) {
		// info: complex object keyframe IoBuffer is retrieved outside this Changed() block
	}
	keyframeFlagValue := m.Keyframe
	if swag.IsZero(keyframeFlagValue) {
		keyframeFlagValue = &models.IoBuffer{}
	}

	err, keyframeAdded := retrieveModelIoBufferFlags(depth+1, keyframeFlagValue, keyframeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyframeAdded
	if keyframeAdded {
		m.Keyframe = keyframeFlagValue
	}

	return nil, retAdded
}

func retrieveIVideoStreamCodecKeyframesFlags(depth int, m *models.IVideoStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyframesFlagName := fmt.Sprintf("%v.keyframes", cmdPrefix)
	if cmd.Flags().Changed(keyframesFlagName) {
		// warning: keyframes array type []*FrameData is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIVideoStreamCodecNameFlags(depth int, m *models.IVideoStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIVideoStreamCodecNumInterframesFlags(depth int, m *models.IVideoStreamCodec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numInterframesFlagName := fmt.Sprintf("%v.numInterframes", cmdPrefix)
	if cmd.Flags().Changed(numInterframesFlagName) {

		var numInterframesFlagName string
		if cmdPrefix == "" {
			numInterframesFlagName = "numInterframes"
		} else {
			numInterframesFlagName = fmt.Sprintf("%v.numInterframes", cmdPrefix)
		}

		numInterframesFlagValue, err := cmd.Flags().GetInt32(numInterframesFlagName)
		if err != nil {
			return err, false
		}
		m.NumInterframes = numInterframesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
