// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/management_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationManagementRestServiceResetBroadcastCmd returns a cmd to handle operation resetBroadcast
func makeOperationManagementRestServiceResetBroadcastCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "resetBroadcast",
		Short: ``,
		RunE:  runOperationManagementRestServiceResetBroadcast,
	}

	if err := registerOperationManagementRestServiceResetBroadcastParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationManagementRestServiceResetBroadcast uses cmd flags to call endpoint api
func runOperationManagementRestServiceResetBroadcast(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := management_rest_service.NewResetBroadcastParams()
	if err, _ := retrieveOperationManagementRestServiceResetBroadcastAppnameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationManagementRestServiceResetBroadcastResult(appCli.ManagementRestService.ResetBroadcast(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationManagementRestServiceResetBroadcastParamFlags registers all flags needed to fill params
func registerOperationManagementRestServiceResetBroadcastParamFlags(cmd *cobra.Command) error {
	if err := registerOperationManagementRestServiceResetBroadcastAppnameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationManagementRestServiceResetBroadcastAppnameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	appnameDescription := `Required. Application name`

	var appnameFlagName string
	if cmdPrefix == "" {
		appnameFlagName = "appname"
	} else {
		appnameFlagName = fmt.Sprintf("%v.appname", cmdPrefix)
	}

	var appnameFlagDefault string

	_ = cmd.PersistentFlags().String(appnameFlagName, appnameFlagDefault, appnameDescription)

	return nil
}

func retrieveOperationManagementRestServiceResetBroadcastAppnameFlag(m *management_rest_service.ResetBroadcastParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("appname") {

		var appnameFlagName string
		if cmdPrefix == "" {
			appnameFlagName = "appname"
		} else {
			appnameFlagName = fmt.Sprintf("%v.appname", cmdPrefix)
		}

		appnameFlagValue, err := cmd.Flags().GetString(appnameFlagName)
		if err != nil {
			return err, false
		}
		m.Appname = appnameFlagValue

	}
	return nil, retAdded
}

// parseOperationManagementRestServiceResetBroadcastResult parses request result and return the string content
func parseOperationManagementRestServiceResetBroadcastResult(resp0 *management_rest_service.ResetBroadcastOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*management_rest_service.ResetBroadcastOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
