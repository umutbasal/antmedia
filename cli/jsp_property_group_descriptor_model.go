// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for JspPropertyGroupDescriptor

// register flags to command
func registerModelJspPropertyGroupDescriptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerJspPropertyGroupDescriptorBuffer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorDefaultContentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorDeferredSyntaxAllowedAsLiteral(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorElIgnored(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorErrorOnUndeclaredNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorIncludeCodas(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorIncludePreludes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorIsXML(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorPageEncoding(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorScriptingInvalid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorTrimDirectiveWhitespaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJspPropertyGroupDescriptorURLPatterns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerJspPropertyGroupDescriptorBuffer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bufferDescription := ``

	var bufferFlagName string
	if cmdPrefix == "" {
		bufferFlagName = "buffer"
	} else {
		bufferFlagName = fmt.Sprintf("%v.buffer", cmdPrefix)
	}

	var bufferFlagDefault string

	_ = cmd.PersistentFlags().String(bufferFlagName, bufferFlagDefault, bufferDescription)

	return nil
}

func registerJspPropertyGroupDescriptorDefaultContentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultContentTypeDescription := ``

	var defaultContentTypeFlagName string
	if cmdPrefix == "" {
		defaultContentTypeFlagName = "defaultContentType"
	} else {
		defaultContentTypeFlagName = fmt.Sprintf("%v.defaultContentType", cmdPrefix)
	}

	var defaultContentTypeFlagDefault string

	_ = cmd.PersistentFlags().String(defaultContentTypeFlagName, defaultContentTypeFlagDefault, defaultContentTypeDescription)

	return nil
}

func registerJspPropertyGroupDescriptorDeferredSyntaxAllowedAsLiteral(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deferredSyntaxAllowedAsLiteralDescription := ``

	var deferredSyntaxAllowedAsLiteralFlagName string
	if cmdPrefix == "" {
		deferredSyntaxAllowedAsLiteralFlagName = "deferredSyntaxAllowedAsLiteral"
	} else {
		deferredSyntaxAllowedAsLiteralFlagName = fmt.Sprintf("%v.deferredSyntaxAllowedAsLiteral", cmdPrefix)
	}

	var deferredSyntaxAllowedAsLiteralFlagDefault string

	_ = cmd.PersistentFlags().String(deferredSyntaxAllowedAsLiteralFlagName, deferredSyntaxAllowedAsLiteralFlagDefault, deferredSyntaxAllowedAsLiteralDescription)

	return nil
}

func registerJspPropertyGroupDescriptorElIgnored(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	elIgnoredDescription := ``

	var elIgnoredFlagName string
	if cmdPrefix == "" {
		elIgnoredFlagName = "elIgnored"
	} else {
		elIgnoredFlagName = fmt.Sprintf("%v.elIgnored", cmdPrefix)
	}

	var elIgnoredFlagDefault string

	_ = cmd.PersistentFlags().String(elIgnoredFlagName, elIgnoredFlagDefault, elIgnoredDescription)

	return nil
}

func registerJspPropertyGroupDescriptorErrorOnUndeclaredNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorOnUndeclaredNamespaceDescription := ``

	var errorOnUndeclaredNamespaceFlagName string
	if cmdPrefix == "" {
		errorOnUndeclaredNamespaceFlagName = "errorOnUndeclaredNamespace"
	} else {
		errorOnUndeclaredNamespaceFlagName = fmt.Sprintf("%v.errorOnUndeclaredNamespace", cmdPrefix)
	}

	var errorOnUndeclaredNamespaceFlagDefault string

	_ = cmd.PersistentFlags().String(errorOnUndeclaredNamespaceFlagName, errorOnUndeclaredNamespaceFlagDefault, errorOnUndeclaredNamespaceDescription)

	return nil
}

func registerJspPropertyGroupDescriptorIncludeCodas(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: includeCodas []string array type is not supported by go-swagger cli yet

	return nil
}

func registerJspPropertyGroupDescriptorIncludePreludes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: includePreludes []string array type is not supported by go-swagger cli yet

	return nil
}

func registerJspPropertyGroupDescriptorIsXML(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isXmlDescription := ``

	var isXmlFlagName string
	if cmdPrefix == "" {
		isXmlFlagName = "isXml"
	} else {
		isXmlFlagName = fmt.Sprintf("%v.isXml", cmdPrefix)
	}

	var isXmlFlagDefault string

	_ = cmd.PersistentFlags().String(isXmlFlagName, isXmlFlagDefault, isXmlDescription)

	return nil
}

func registerJspPropertyGroupDescriptorPageEncoding(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pageEncodingDescription := ``

	var pageEncodingFlagName string
	if cmdPrefix == "" {
		pageEncodingFlagName = "pageEncoding"
	} else {
		pageEncodingFlagName = fmt.Sprintf("%v.pageEncoding", cmdPrefix)
	}

	var pageEncodingFlagDefault string

	_ = cmd.PersistentFlags().String(pageEncodingFlagName, pageEncodingFlagDefault, pageEncodingDescription)

	return nil
}

func registerJspPropertyGroupDescriptorScriptingInvalid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scriptingInvalidDescription := ``

	var scriptingInvalidFlagName string
	if cmdPrefix == "" {
		scriptingInvalidFlagName = "scriptingInvalid"
	} else {
		scriptingInvalidFlagName = fmt.Sprintf("%v.scriptingInvalid", cmdPrefix)
	}

	var scriptingInvalidFlagDefault string

	_ = cmd.PersistentFlags().String(scriptingInvalidFlagName, scriptingInvalidFlagDefault, scriptingInvalidDescription)

	return nil
}

func registerJspPropertyGroupDescriptorTrimDirectiveWhitespaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trimDirectiveWhitespacesDescription := ``

	var trimDirectiveWhitespacesFlagName string
	if cmdPrefix == "" {
		trimDirectiveWhitespacesFlagName = "trimDirectiveWhitespaces"
	} else {
		trimDirectiveWhitespacesFlagName = fmt.Sprintf("%v.trimDirectiveWhitespaces", cmdPrefix)
	}

	var trimDirectiveWhitespacesFlagDefault string

	_ = cmd.PersistentFlags().String(trimDirectiveWhitespacesFlagName, trimDirectiveWhitespacesFlagDefault, trimDirectiveWhitespacesDescription)

	return nil
}

func registerJspPropertyGroupDescriptorURLPatterns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: urlPatterns []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelJspPropertyGroupDescriptorFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bufferAdded := retrieveJspPropertyGroupDescriptorBufferFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufferAdded

	err, defaultContentTypeAdded := retrieveJspPropertyGroupDescriptorDefaultContentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultContentTypeAdded

	err, deferredSyntaxAllowedAsLiteralAdded := retrieveJspPropertyGroupDescriptorDeferredSyntaxAllowedAsLiteralFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deferredSyntaxAllowedAsLiteralAdded

	err, elIgnoredAdded := retrieveJspPropertyGroupDescriptorElIgnoredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || elIgnoredAdded

	err, errorOnUndeclaredNamespaceAdded := retrieveJspPropertyGroupDescriptorErrorOnUndeclaredNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorOnUndeclaredNamespaceAdded

	err, includeCodasAdded := retrieveJspPropertyGroupDescriptorIncludeCodasFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || includeCodasAdded

	err, includePreludesAdded := retrieveJspPropertyGroupDescriptorIncludePreludesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || includePreludesAdded

	err, isXmlAdded := retrieveJspPropertyGroupDescriptorIsXMLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isXmlAdded

	err, pageEncodingAdded := retrieveJspPropertyGroupDescriptorPageEncodingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pageEncodingAdded

	err, scriptingInvalidAdded := retrieveJspPropertyGroupDescriptorScriptingInvalidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scriptingInvalidAdded

	err, trimDirectiveWhitespacesAdded := retrieveJspPropertyGroupDescriptorTrimDirectiveWhitespacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trimDirectiveWhitespacesAdded

	err, urlPatternsAdded := retrieveJspPropertyGroupDescriptorURLPatternsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlPatternsAdded

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorBufferFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufferFlagName := fmt.Sprintf("%v.buffer", cmdPrefix)
	if cmd.Flags().Changed(bufferFlagName) {

		var bufferFlagName string
		if cmdPrefix == "" {
			bufferFlagName = "buffer"
		} else {
			bufferFlagName = fmt.Sprintf("%v.buffer", cmdPrefix)
		}

		bufferFlagValue, err := cmd.Flags().GetString(bufferFlagName)
		if err != nil {
			return err, false
		}
		m.Buffer = bufferFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorDefaultContentTypeFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultContentTypeFlagName := fmt.Sprintf("%v.defaultContentType", cmdPrefix)
	if cmd.Flags().Changed(defaultContentTypeFlagName) {

		var defaultContentTypeFlagName string
		if cmdPrefix == "" {
			defaultContentTypeFlagName = "defaultContentType"
		} else {
			defaultContentTypeFlagName = fmt.Sprintf("%v.defaultContentType", cmdPrefix)
		}

		defaultContentTypeFlagValue, err := cmd.Flags().GetString(defaultContentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultContentType = defaultContentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorDeferredSyntaxAllowedAsLiteralFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deferredSyntaxAllowedAsLiteralFlagName := fmt.Sprintf("%v.deferredSyntaxAllowedAsLiteral", cmdPrefix)
	if cmd.Flags().Changed(deferredSyntaxAllowedAsLiteralFlagName) {

		var deferredSyntaxAllowedAsLiteralFlagName string
		if cmdPrefix == "" {
			deferredSyntaxAllowedAsLiteralFlagName = "deferredSyntaxAllowedAsLiteral"
		} else {
			deferredSyntaxAllowedAsLiteralFlagName = fmt.Sprintf("%v.deferredSyntaxAllowedAsLiteral", cmdPrefix)
		}

		deferredSyntaxAllowedAsLiteralFlagValue, err := cmd.Flags().GetString(deferredSyntaxAllowedAsLiteralFlagName)
		if err != nil {
			return err, false
		}
		m.DeferredSyntaxAllowedAsLiteral = deferredSyntaxAllowedAsLiteralFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorElIgnoredFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	elIgnoredFlagName := fmt.Sprintf("%v.elIgnored", cmdPrefix)
	if cmd.Flags().Changed(elIgnoredFlagName) {

		var elIgnoredFlagName string
		if cmdPrefix == "" {
			elIgnoredFlagName = "elIgnored"
		} else {
			elIgnoredFlagName = fmt.Sprintf("%v.elIgnored", cmdPrefix)
		}

		elIgnoredFlagValue, err := cmd.Flags().GetString(elIgnoredFlagName)
		if err != nil {
			return err, false
		}
		m.ElIgnored = elIgnoredFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorErrorOnUndeclaredNamespaceFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorOnUndeclaredNamespaceFlagName := fmt.Sprintf("%v.errorOnUndeclaredNamespace", cmdPrefix)
	if cmd.Flags().Changed(errorOnUndeclaredNamespaceFlagName) {

		var errorOnUndeclaredNamespaceFlagName string
		if cmdPrefix == "" {
			errorOnUndeclaredNamespaceFlagName = "errorOnUndeclaredNamespace"
		} else {
			errorOnUndeclaredNamespaceFlagName = fmt.Sprintf("%v.errorOnUndeclaredNamespace", cmdPrefix)
		}

		errorOnUndeclaredNamespaceFlagValue, err := cmd.Flags().GetString(errorOnUndeclaredNamespaceFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorOnUndeclaredNamespace = errorOnUndeclaredNamespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorIncludeCodasFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	includeCodasFlagName := fmt.Sprintf("%v.includeCodas", cmdPrefix)
	if cmd.Flags().Changed(includeCodasFlagName) {
		// warning: includeCodas array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorIncludePreludesFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	includePreludesFlagName := fmt.Sprintf("%v.includePreludes", cmdPrefix)
	if cmd.Flags().Changed(includePreludesFlagName) {
		// warning: includePreludes array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorIsXMLFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isXmlFlagName := fmt.Sprintf("%v.isXml", cmdPrefix)
	if cmd.Flags().Changed(isXmlFlagName) {

		var isXmlFlagName string
		if cmdPrefix == "" {
			isXmlFlagName = "isXml"
		} else {
			isXmlFlagName = fmt.Sprintf("%v.isXml", cmdPrefix)
		}

		isXmlFlagValue, err := cmd.Flags().GetString(isXmlFlagName)
		if err != nil {
			return err, false
		}
		m.IsXML = isXmlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorPageEncodingFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pageEncodingFlagName := fmt.Sprintf("%v.pageEncoding", cmdPrefix)
	if cmd.Flags().Changed(pageEncodingFlagName) {

		var pageEncodingFlagName string
		if cmdPrefix == "" {
			pageEncodingFlagName = "pageEncoding"
		} else {
			pageEncodingFlagName = fmt.Sprintf("%v.pageEncoding", cmdPrefix)
		}

		pageEncodingFlagValue, err := cmd.Flags().GetString(pageEncodingFlagName)
		if err != nil {
			return err, false
		}
		m.PageEncoding = pageEncodingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorScriptingInvalidFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scriptingInvalidFlagName := fmt.Sprintf("%v.scriptingInvalid", cmdPrefix)
	if cmd.Flags().Changed(scriptingInvalidFlagName) {

		var scriptingInvalidFlagName string
		if cmdPrefix == "" {
			scriptingInvalidFlagName = "scriptingInvalid"
		} else {
			scriptingInvalidFlagName = fmt.Sprintf("%v.scriptingInvalid", cmdPrefix)
		}

		scriptingInvalidFlagValue, err := cmd.Flags().GetString(scriptingInvalidFlagName)
		if err != nil {
			return err, false
		}
		m.ScriptingInvalid = scriptingInvalidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorTrimDirectiveWhitespacesFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trimDirectiveWhitespacesFlagName := fmt.Sprintf("%v.trimDirectiveWhitespaces", cmdPrefix)
	if cmd.Flags().Changed(trimDirectiveWhitespacesFlagName) {

		var trimDirectiveWhitespacesFlagName string
		if cmdPrefix == "" {
			trimDirectiveWhitespacesFlagName = "trimDirectiveWhitespaces"
		} else {
			trimDirectiveWhitespacesFlagName = fmt.Sprintf("%v.trimDirectiveWhitespaces", cmdPrefix)
		}

		trimDirectiveWhitespacesFlagValue, err := cmd.Flags().GetString(trimDirectiveWhitespacesFlagName)
		if err != nil {
			return err, false
		}
		m.TrimDirectiveWhitespaces = trimDirectiveWhitespacesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJspPropertyGroupDescriptorURLPatternsFlags(depth int, m *models.JspPropertyGroupDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlPatternsFlagName := fmt.Sprintf("%v.urlPatterns", cmdPrefix)
	if cmd.Flags().Changed(urlPatternsFlagName) {
		// warning: urlPatterns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
