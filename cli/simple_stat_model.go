// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for SimpleStat

// register flags to command
func registerModelSimpleStatFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSimpleStatNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSimpleStatNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberDescription := `the stat value`

	var numberFlagName string
	if cmdPrefix == "" {
		numberFlagName = "number"
	} else {
		numberFlagName = fmt.Sprintf("%v.number", cmdPrefix)
	}

	var numberFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numberFlagName, numberFlagDefault, numberDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSimpleStatFlags(depth int, m *models.SimpleStat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, numberAdded := retrieveSimpleStatNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberAdded

	return nil, retAdded
}

func retrieveSimpleStatNumberFlags(depth int, m *models.SimpleStat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberFlagName := fmt.Sprintf("%v.number", cmdPrefix)
	if cmd.Flags().Changed(numberFlagName) {

		var numberFlagName string
		if cmdPrefix == "" {
			numberFlagName = "number"
		} else {
			numberFlagName = fmt.Sprintf("%v.number", cmdPrefix)
		}

		numberFlagValue, err := cmd.Flags().GetInt64(numberFlagName)
		if err != nil {
			return err, false
		}
		m.Number = numberFlagValue

		retAdded = true
	}

	return nil, retAdded
}
