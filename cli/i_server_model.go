// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for IServer

// register flags to command
func registerModelIServerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIServerGlobalNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServerGlobalScopes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServerMappingTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIServerGlobalNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: globalNames IteratorString map type is not supported by go-swagger cli yet

	return nil
}

func registerIServerGlobalScopes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: globalScopes IteratorIGlobalScope map type is not supported by go-swagger cli yet

	return nil
}

func registerIServerMappingTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: mappingTable map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIServerFlags(depth int, m *models.IServer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, globalNamesAdded := retrieveIServerGlobalNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalNamesAdded

	err, globalScopesAdded := retrieveIServerGlobalScopesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalScopesAdded

	err, mappingTableAdded := retrieveIServerMappingTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mappingTableAdded

	return nil, retAdded
}

func retrieveIServerGlobalNamesFlags(depth int, m *models.IServer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalNamesFlagName := fmt.Sprintf("%v.globalNames", cmdPrefix)
	if cmd.Flags().Changed(globalNamesFlagName) {
		// warning: globalNames map type IteratorString is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIServerGlobalScopesFlags(depth int, m *models.IServer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	globalScopesFlagName := fmt.Sprintf("%v.globalScopes", cmdPrefix)
	if cmd.Flags().Changed(globalScopesFlagName) {
		// warning: globalScopes map type IteratorIGlobalScope is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIServerMappingTableFlags(depth int, m *models.IServer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mappingTableFlagName := fmt.Sprintf("%v.mappingTable", cmdPrefix)
	if cmd.Flags().Changed(mappingTableFlagName) {
		// warning: mappingTable map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
