// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Muxer

// register flags to command
func registerModelMuxerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMuxerAddDateTimeToSourceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerBitStreamFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerInputTimeBaseMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerIsRunning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerOutputFormatContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerOutputURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerRegisteredStreamIndexList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerTmpPacket(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerVideoHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxerVideoWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxerAddDateTimeToSourceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addDateTimeToSourceNameDescription := ``

	var addDateTimeToSourceNameFlagName string
	if cmdPrefix == "" {
		addDateTimeToSourceNameFlagName = "addDateTimeToSourceName"
	} else {
		addDateTimeToSourceNameFlagName = fmt.Sprintf("%v.addDateTimeToSourceName", cmdPrefix)
	}

	var addDateTimeToSourceNameFlagDefault bool

	_ = cmd.PersistentFlags().Bool(addDateTimeToSourceNameFlagName, addDateTimeToSourceNameFlagDefault, addDateTimeToSourceNameDescription)

	return nil
}

func registerMuxerBitStreamFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bitStreamFilterDescription := ``

	var bitStreamFilterFlagName string
	if cmdPrefix == "" {
		bitStreamFilterFlagName = "bitStreamFilter"
	} else {
		bitStreamFilterFlagName = fmt.Sprintf("%v.bitStreamFilter", cmdPrefix)
	}

	var bitStreamFilterFlagDefault string

	_ = cmd.PersistentFlags().String(bitStreamFilterFlagName, bitStreamFilterFlagDefault, bitStreamFilterDescription)

	return nil
}

func registerMuxerFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	return nil
}

func registerMuxerFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileNameDescription := ``

	var fileNameFlagName string
	if cmdPrefix == "" {
		fileNameFlagName = "fileName"
	} else {
		fileNameFlagName = fmt.Sprintf("%v.fileName", cmdPrefix)
	}

	var fileNameFlagDefault string

	_ = cmd.PersistentFlags().String(fileNameFlagName, fileNameFlagDefault, fileNameDescription)

	return nil
}

func registerMuxerFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	formatDescription := ``

	var formatFlagName string
	if cmdPrefix == "" {
		formatFlagName = "format"
	} else {
		formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
	}

	var formatFlagDefault string

	_ = cmd.PersistentFlags().String(formatFlagName, formatFlagDefault, formatDescription)

	return nil
}

func registerMuxerInputTimeBaseMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: inputTimeBaseMap map[string]AVRational map type is not supported by go-swagger cli yet

	return nil
}

func registerMuxerIsRunning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var isRunningFlagName string
	if cmdPrefix == "" {
		isRunningFlagName = "isRunning"
	} else {
		isRunningFlagName = fmt.Sprintf("%v.isRunning", cmdPrefix)
	}

	if err := registerModelAtomicBooleanFlags(depth+1, isRunningFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxerOutputFormatContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var outputFormatContextFlagName string
	if cmdPrefix == "" {
		outputFormatContextFlagName = "outputFormatContext"
	} else {
		outputFormatContextFlagName = fmt.Sprintf("%v.outputFormatContext", cmdPrefix)
	}

	if err := registerModelAVFormatContextFlags(depth+1, outputFormatContextFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxerOutputURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outputUrlDescription := ``

	var outputUrlFlagName string
	if cmdPrefix == "" {
		outputUrlFlagName = "outputURL"
	} else {
		outputUrlFlagName = fmt.Sprintf("%v.outputURL", cmdPrefix)
	}

	var outputUrlFlagDefault string

	_ = cmd.PersistentFlags().String(outputUrlFlagName, outputUrlFlagDefault, outputUrlDescription)

	return nil
}

func registerMuxerRegisteredStreamIndexList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: registeredStreamIndexList []int32 array type is not supported by go-swagger cli yet

	return nil
}

func registerMuxerTmpPacket(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tmpPacketFlagName string
	if cmdPrefix == "" {
		tmpPacketFlagName = "tmpPacket"
	} else {
		tmpPacketFlagName = fmt.Sprintf("%v.tmpPacket", cmdPrefix)
	}

	if err := registerModelAVPacketFlags(depth+1, tmpPacketFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxerVideoHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoHeightDescription := ``

	var videoHeightFlagName string
	if cmdPrefix == "" {
		videoHeightFlagName = "videoHeight"
	} else {
		videoHeightFlagName = fmt.Sprintf("%v.videoHeight", cmdPrefix)
	}

	var videoHeightFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoHeightFlagName, videoHeightFlagDefault, videoHeightDescription)

	return nil
}

func registerMuxerVideoWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoWidthDescription := ``

	var videoWidthFlagName string
	if cmdPrefix == "" {
		videoWidthFlagName = "videoWidth"
	} else {
		videoWidthFlagName = fmt.Sprintf("%v.videoWidth", cmdPrefix)
	}

	var videoWidthFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoWidthFlagName, videoWidthFlagDefault, videoWidthDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMuxerFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addDateTimeToSourceNameAdded := retrieveMuxerAddDateTimeToSourceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addDateTimeToSourceNameAdded

	err, bitStreamFilterAdded := retrieveMuxerBitStreamFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bitStreamFilterAdded

	err, fileAdded := retrieveMuxerFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileAdded

	err, fileNameAdded := retrieveMuxerFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileNameAdded

	err, formatAdded := retrieveMuxerFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || formatAdded

	err, inputTimeBaseMapAdded := retrieveMuxerInputTimeBaseMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputTimeBaseMapAdded

	err, isRunningAdded := retrieveMuxerIsRunningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isRunningAdded

	err, outputFormatContextAdded := retrieveMuxerOutputFormatContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outputFormatContextAdded

	err, outputUrlAdded := retrieveMuxerOutputURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outputUrlAdded

	err, registeredStreamIndexListAdded := retrieveMuxerRegisteredStreamIndexListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registeredStreamIndexListAdded

	err, tmpPacketAdded := retrieveMuxerTmpPacketFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tmpPacketAdded

	err, videoHeightAdded := retrieveMuxerVideoHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoHeightAdded

	err, videoWidthAdded := retrieveMuxerVideoWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoWidthAdded

	return nil, retAdded
}

func retrieveMuxerAddDateTimeToSourceNameFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addDateTimeToSourceNameFlagName := fmt.Sprintf("%v.addDateTimeToSourceName", cmdPrefix)
	if cmd.Flags().Changed(addDateTimeToSourceNameFlagName) {

		var addDateTimeToSourceNameFlagName string
		if cmdPrefix == "" {
			addDateTimeToSourceNameFlagName = "addDateTimeToSourceName"
		} else {
			addDateTimeToSourceNameFlagName = fmt.Sprintf("%v.addDateTimeToSourceName", cmdPrefix)
		}

		addDateTimeToSourceNameFlagValue, err := cmd.Flags().GetBool(addDateTimeToSourceNameFlagName)
		if err != nil {
			return err, false
		}
		m.AddDateTimeToSourceName = addDateTimeToSourceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerBitStreamFilterFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bitStreamFilterFlagName := fmt.Sprintf("%v.bitStreamFilter", cmdPrefix)
	if cmd.Flags().Changed(bitStreamFilterFlagName) {

		var bitStreamFilterFlagName string
		if cmdPrefix == "" {
			bitStreamFilterFlagName = "bitStreamFilter"
		} else {
			bitStreamFilterFlagName = fmt.Sprintf("%v.bitStreamFilter", cmdPrefix)
		}

		bitStreamFilterFlagValue, err := cmd.Flags().GetString(bitStreamFilterFlagName)
		if err != nil {
			return err, false
		}
		m.BitStreamFilter = bitStreamFilterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerFileFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileFlagName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(fileFlagName) {

		// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerFileNameFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileNameFlagName := fmt.Sprintf("%v.fileName", cmdPrefix)
	if cmd.Flags().Changed(fileNameFlagName) {

		var fileNameFlagName string
		if cmdPrefix == "" {
			fileNameFlagName = "fileName"
		} else {
			fileNameFlagName = fmt.Sprintf("%v.fileName", cmdPrefix)
		}

		fileNameFlagValue, err := cmd.Flags().GetString(fileNameFlagName)
		if err != nil {
			return err, false
		}
		m.FileName = fileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerFormatFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	formatFlagName := fmt.Sprintf("%v.format", cmdPrefix)
	if cmd.Flags().Changed(formatFlagName) {

		var formatFlagName string
		if cmdPrefix == "" {
			formatFlagName = "format"
		} else {
			formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
		}

		formatFlagValue, err := cmd.Flags().GetString(formatFlagName)
		if err != nil {
			return err, false
		}
		m.Format = formatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerInputTimeBaseMapFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputTimeBaseMapFlagName := fmt.Sprintf("%v.inputTimeBaseMap", cmdPrefix)
	if cmd.Flags().Changed(inputTimeBaseMapFlagName) {
		// warning: inputTimeBaseMap map type map[string]AVRational is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxerIsRunningFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isRunningFlagName := fmt.Sprintf("%v.isRunning", cmdPrefix)
	if cmd.Flags().Changed(isRunningFlagName) {
		// info: complex object isRunning AtomicBoolean is retrieved outside this Changed() block
	}
	isRunningFlagValue := m.IsRunning
	if swag.IsZero(isRunningFlagValue) {
		isRunningFlagValue = &models.AtomicBoolean{}
	}

	err, isRunningAdded := retrieveModelAtomicBooleanFlags(depth+1, isRunningFlagValue, isRunningFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isRunningAdded
	if isRunningAdded {
		m.IsRunning = isRunningFlagValue
	}

	return nil, retAdded
}

func retrieveMuxerOutputFormatContextFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outputFormatContextFlagName := fmt.Sprintf("%v.outputFormatContext", cmdPrefix)
	if cmd.Flags().Changed(outputFormatContextFlagName) {
		// info: complex object outputFormatContext AVFormatContext is retrieved outside this Changed() block
	}
	outputFormatContextFlagValue := m.OutputFormatContext
	if swag.IsZero(outputFormatContextFlagValue) {
		outputFormatContextFlagValue = &models.AVFormatContext{}
	}

	err, outputFormatContextAdded := retrieveModelAVFormatContextFlags(depth+1, outputFormatContextFlagValue, outputFormatContextFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outputFormatContextAdded
	if outputFormatContextAdded {
		m.OutputFormatContext = outputFormatContextFlagValue
	}

	return nil, retAdded
}

func retrieveMuxerOutputURLFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outputUrlFlagName := fmt.Sprintf("%v.outputURL", cmdPrefix)
	if cmd.Flags().Changed(outputUrlFlagName) {

		var outputUrlFlagName string
		if cmdPrefix == "" {
			outputUrlFlagName = "outputURL"
		} else {
			outputUrlFlagName = fmt.Sprintf("%v.outputURL", cmdPrefix)
		}

		outputUrlFlagValue, err := cmd.Flags().GetString(outputUrlFlagName)
		if err != nil {
			return err, false
		}
		m.OutputURL = outputUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerRegisteredStreamIndexListFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registeredStreamIndexListFlagName := fmt.Sprintf("%v.registeredStreamIndexList", cmdPrefix)
	if cmd.Flags().Changed(registeredStreamIndexListFlagName) {
		// warning: registeredStreamIndexList array type []int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxerTmpPacketFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tmpPacketFlagName := fmt.Sprintf("%v.tmpPacket", cmdPrefix)
	if cmd.Flags().Changed(tmpPacketFlagName) {
		// info: complex object tmpPacket AVPacket is retrieved outside this Changed() block
	}
	tmpPacketFlagValue := m.TmpPacket
	if swag.IsZero(tmpPacketFlagValue) {
		tmpPacketFlagValue = &models.AVPacket{}
	}

	err, tmpPacketAdded := retrieveModelAVPacketFlags(depth+1, tmpPacketFlagValue, tmpPacketFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tmpPacketAdded
	if tmpPacketAdded {
		m.TmpPacket = tmpPacketFlagValue
	}

	return nil, retAdded
}

func retrieveMuxerVideoHeightFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoHeightFlagName := fmt.Sprintf("%v.videoHeight", cmdPrefix)
	if cmd.Flags().Changed(videoHeightFlagName) {

		var videoHeightFlagName string
		if cmdPrefix == "" {
			videoHeightFlagName = "videoHeight"
		} else {
			videoHeightFlagName = fmt.Sprintf("%v.videoHeight", cmdPrefix)
		}

		videoHeightFlagValue, err := cmd.Flags().GetInt32(videoHeightFlagName)
		if err != nil {
			return err, false
		}
		m.VideoHeight = videoHeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxerVideoWidthFlags(depth int, m *models.Muxer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoWidthFlagName := fmt.Sprintf("%v.videoWidth", cmdPrefix)
	if cmd.Flags().Changed(videoWidthFlagName) {

		var videoWidthFlagName string
		if cmdPrefix == "" {
			videoWidthFlagName = "videoWidth"
		} else {
			videoWidthFlagName = fmt.Sprintf("%v.videoWidth", cmdPrefix)
		}

		videoWidthFlagValue, err := cmd.Flags().GetInt32(videoWidthFlagName)
		if err != nil {
			return err, false
		}
		m.VideoWidth = videoWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}
