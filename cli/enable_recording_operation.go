// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/broadcast_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBroadcastRestServiceEnableRecordingCmd returns a cmd to handle operation enableRecording
func makeOperationBroadcastRestServiceEnableRecordingCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "enableRecording",
		Short: ``,
		RunE:  runOperationBroadcastRestServiceEnableRecording,
	}

	if err := registerOperationBroadcastRestServiceEnableRecordingParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBroadcastRestServiceEnableRecording uses cmd flags to call endpoint api
func runOperationBroadcastRestServiceEnableRecording(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broadcast_rest_service.NewEnableRecordingParams()
	if err, _ := retrieveOperationBroadcastRestServiceEnableRecordingIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceEnableRecordingRecordTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationBroadcastRestServiceEnableRecordingRecordingStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBroadcastRestServiceEnableRecordingResult(appCli.BroadcastRestService.EnableRecording(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBroadcastRestServiceEnableRecordingParamFlags registers all flags needed to fill params
func registerOperationBroadcastRestServiceEnableRecordingParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBroadcastRestServiceEnableRecordingIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceEnableRecordingRecordTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationBroadcastRestServiceEnableRecordingRecordingStatusParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBroadcastRestServiceEnableRecordingIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. the id of the stream`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationBroadcastRestServiceEnableRecordingRecordTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	recordTypeDescription := `Record type: 'mp4' or 'webm'. It's optional parameter.`

	var recordTypeFlagName string
	if cmdPrefix == "" {
		recordTypeFlagName = "recordType"
	} else {
		recordTypeFlagName = fmt.Sprintf("%v.recordType", cmdPrefix)
	}

	var recordTypeFlagDefault string

	_ = cmd.PersistentFlags().String(recordTypeFlagName, recordTypeFlagDefault, recordTypeDescription)

	return nil
}
func registerOperationBroadcastRestServiceEnableRecordingRecordingStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	recordingStatusDescription := `Required. Change recording status. If true, starts recording. If false stop recording`

	var recordingStatusFlagName string
	if cmdPrefix == "" {
		recordingStatusFlagName = "recording-status"
	} else {
		recordingStatusFlagName = fmt.Sprintf("%v.recording-status", cmdPrefix)
	}

	var recordingStatusFlagDefault bool

	_ = cmd.PersistentFlags().Bool(recordingStatusFlagName, recordingStatusFlagDefault, recordingStatusDescription)

	return nil
}

func retrieveOperationBroadcastRestServiceEnableRecordingIDFlag(m *broadcast_rest_service.EnableRecordingParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceEnableRecordingRecordTypeFlag(m *broadcast_rest_service.EnableRecordingParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("recordType") {

		var recordTypeFlagName string
		if cmdPrefix == "" {
			recordTypeFlagName = "recordType"
		} else {
			recordTypeFlagName = fmt.Sprintf("%v.recordType", cmdPrefix)
		}

		recordTypeFlagValue, err := cmd.Flags().GetString(recordTypeFlagName)
		if err != nil {
			return err, false
		}
		m.RecordType = &recordTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationBroadcastRestServiceEnableRecordingRecordingStatusFlag(m *broadcast_rest_service.EnableRecordingParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("recording-status") {

		var recordingStatusFlagName string
		if cmdPrefix == "" {
			recordingStatusFlagName = "recording-status"
		} else {
			recordingStatusFlagName = fmt.Sprintf("%v.recording-status", cmdPrefix)
		}

		recordingStatusFlagValue, err := cmd.Flags().GetBool(recordingStatusFlagName)
		if err != nil {
			return err, false
		}
		m.RecordingStatus = recordingStatusFlagValue

	}
	return nil, retAdded
}

// parseOperationBroadcastRestServiceEnableRecordingResult parses request result and return the string content
func parseOperationBroadcastRestServiceEnableRecordingResult(resp0 *broadcast_rest_service.EnableRecordingOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broadcast_rest_service.EnableRecordingOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
