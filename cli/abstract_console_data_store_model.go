// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for AbstractConsoleDataStore

// register flags to command
func registerModelAbstractConsoleDataStoreFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAbstractConsoleDataStoreAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAbstractConsoleDataStoreInvalidLoginCountMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAbstractConsoleDataStoreIsBlockedMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAbstractConsoleDataStoreNumberOfUserRecords(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAbstractConsoleDataStoreUserList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAbstractConsoleDataStoreAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	availableDescription := ``

	var availableFlagName string
	if cmdPrefix == "" {
		availableFlagName = "available"
	} else {
		availableFlagName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var availableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(availableFlagName, availableFlagDefault, availableDescription)

	return nil
}

func registerAbstractConsoleDataStoreInvalidLoginCountMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: invalidLoginCountMap map[string]int32 map type is not supported by go-swagger cli yet

	return nil
}

func registerAbstractConsoleDataStoreIsBlockedMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: isBlockedMap map[string]bool map type is not supported by go-swagger cli yet

	return nil
}

func registerAbstractConsoleDataStoreNumberOfUserRecords(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfUserRecordsDescription := ``

	var numberOfUserRecordsFlagName string
	if cmdPrefix == "" {
		numberOfUserRecordsFlagName = "numberOfUserRecords"
	} else {
		numberOfUserRecordsFlagName = fmt.Sprintf("%v.numberOfUserRecords", cmdPrefix)
	}

	var numberOfUserRecordsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numberOfUserRecordsFlagName, numberOfUserRecordsFlagDefault, numberOfUserRecordsDescription)

	return nil
}

func registerAbstractConsoleDataStoreUserList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: userList []*User array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAbstractConsoleDataStoreFlags(depth int, m *models.AbstractConsoleDataStore, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, availableAdded := retrieveAbstractConsoleDataStoreAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availableAdded

	err, invalidLoginCountMapAdded := retrieveAbstractConsoleDataStoreInvalidLoginCountMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || invalidLoginCountMapAdded

	err, isBlockedMapAdded := retrieveAbstractConsoleDataStoreIsBlockedMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isBlockedMapAdded

	err, numberOfUserRecordsAdded := retrieveAbstractConsoleDataStoreNumberOfUserRecordsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfUserRecordsAdded

	err, userListAdded := retrieveAbstractConsoleDataStoreUserListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userListAdded

	return nil, retAdded
}

func retrieveAbstractConsoleDataStoreAvailableFlags(depth int, m *models.AbstractConsoleDataStore, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availableFlagName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(availableFlagName) {

		var availableFlagName string
		if cmdPrefix == "" {
			availableFlagName = "available"
		} else {
			availableFlagName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		availableFlagValue, err := cmd.Flags().GetBool(availableFlagName)
		if err != nil {
			return err, false
		}
		m.Available = availableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAbstractConsoleDataStoreInvalidLoginCountMapFlags(depth int, m *models.AbstractConsoleDataStore, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	invalidLoginCountMapFlagName := fmt.Sprintf("%v.invalidLoginCountMap", cmdPrefix)
	if cmd.Flags().Changed(invalidLoginCountMapFlagName) {
		// warning: invalidLoginCountMap map type map[string]int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAbstractConsoleDataStoreIsBlockedMapFlags(depth int, m *models.AbstractConsoleDataStore, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isBlockedMapFlagName := fmt.Sprintf("%v.isBlockedMap", cmdPrefix)
	if cmd.Flags().Changed(isBlockedMapFlagName) {
		// warning: isBlockedMap map type map[string]bool is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAbstractConsoleDataStoreNumberOfUserRecordsFlags(depth int, m *models.AbstractConsoleDataStore, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfUserRecordsFlagName := fmt.Sprintf("%v.numberOfUserRecords", cmdPrefix)
	if cmd.Flags().Changed(numberOfUserRecordsFlagName) {

		var numberOfUserRecordsFlagName string
		if cmdPrefix == "" {
			numberOfUserRecordsFlagName = "numberOfUserRecords"
		} else {
			numberOfUserRecordsFlagName = fmt.Sprintf("%v.numberOfUserRecords", cmdPrefix)
		}

		numberOfUserRecordsFlagValue, err := cmd.Flags().GetInt32(numberOfUserRecordsFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfUserRecords = numberOfUserRecordsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAbstractConsoleDataStoreUserListFlags(depth int, m *models.AbstractConsoleDataStore, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userListFlagName := fmt.Sprintf("%v.userList", cmdPrefix)
	if cmd.Flags().Changed(userListFlagName) {
		// warning: userList array type []*User is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
