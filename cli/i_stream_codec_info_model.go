// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for IStreamCodecInfo

// register flags to command
func registerModelIStreamCodecInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIStreamCodecInfoAudioCodec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCodecInfoAudioCodecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCodecInfoVideoCodec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIStreamCodecInfoVideoCodecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIStreamCodecInfoAudioCodec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var audioCodecFlagName string
	if cmdPrefix == "" {
		audioCodecFlagName = "audioCodec"
	} else {
		audioCodecFlagName = fmt.Sprintf("%v.audioCodec", cmdPrefix)
	}

	if err := registerModelIAudioStreamCodecFlags(depth+1, audioCodecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIStreamCodecInfoAudioCodecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioCodecNameDescription := ``

	var audioCodecNameFlagName string
	if cmdPrefix == "" {
		audioCodecNameFlagName = "audioCodecName"
	} else {
		audioCodecNameFlagName = fmt.Sprintf("%v.audioCodecName", cmdPrefix)
	}

	var audioCodecNameFlagDefault string

	_ = cmd.PersistentFlags().String(audioCodecNameFlagName, audioCodecNameFlagDefault, audioCodecNameDescription)

	return nil
}

func registerIStreamCodecInfoVideoCodec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var videoCodecFlagName string
	if cmdPrefix == "" {
		videoCodecFlagName = "videoCodec"
	} else {
		videoCodecFlagName = fmt.Sprintf("%v.videoCodec", cmdPrefix)
	}

	if err := registerModelIVideoStreamCodecFlags(depth+1, videoCodecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIStreamCodecInfoVideoCodecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoCodecNameDescription := ``

	var videoCodecNameFlagName string
	if cmdPrefix == "" {
		videoCodecNameFlagName = "videoCodecName"
	} else {
		videoCodecNameFlagName = fmt.Sprintf("%v.videoCodecName", cmdPrefix)
	}

	var videoCodecNameFlagDefault string

	_ = cmd.PersistentFlags().String(videoCodecNameFlagName, videoCodecNameFlagDefault, videoCodecNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIStreamCodecInfoFlags(depth int, m *models.IStreamCodecInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, audioCodecAdded := retrieveIStreamCodecInfoAudioCodecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioCodecAdded

	err, audioCodecNameAdded := retrieveIStreamCodecInfoAudioCodecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioCodecNameAdded

	err, videoCodecAdded := retrieveIStreamCodecInfoVideoCodecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoCodecAdded

	err, videoCodecNameAdded := retrieveIStreamCodecInfoVideoCodecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoCodecNameAdded

	return nil, retAdded
}

func retrieveIStreamCodecInfoAudioCodecFlags(depth int, m *models.IStreamCodecInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioCodecFlagName := fmt.Sprintf("%v.audioCodec", cmdPrefix)
	if cmd.Flags().Changed(audioCodecFlagName) {
		// info: complex object audioCodec IAudioStreamCodec is retrieved outside this Changed() block
	}
	audioCodecFlagValue := m.AudioCodec
	if swag.IsZero(audioCodecFlagValue) {
		audioCodecFlagValue = &models.IAudioStreamCodec{}
	}

	err, audioCodecAdded := retrieveModelIAudioStreamCodecFlags(depth+1, audioCodecFlagValue, audioCodecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioCodecAdded
	if audioCodecAdded {
		m.AudioCodec = audioCodecFlagValue
	}

	return nil, retAdded
}

func retrieveIStreamCodecInfoAudioCodecNameFlags(depth int, m *models.IStreamCodecInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioCodecNameFlagName := fmt.Sprintf("%v.audioCodecName", cmdPrefix)
	if cmd.Flags().Changed(audioCodecNameFlagName) {

		var audioCodecNameFlagName string
		if cmdPrefix == "" {
			audioCodecNameFlagName = "audioCodecName"
		} else {
			audioCodecNameFlagName = fmt.Sprintf("%v.audioCodecName", cmdPrefix)
		}

		audioCodecNameFlagValue, err := cmd.Flags().GetString(audioCodecNameFlagName)
		if err != nil {
			return err, false
		}
		m.AudioCodecName = audioCodecNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIStreamCodecInfoVideoCodecFlags(depth int, m *models.IStreamCodecInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoCodecFlagName := fmt.Sprintf("%v.videoCodec", cmdPrefix)
	if cmd.Flags().Changed(videoCodecFlagName) {
		// info: complex object videoCodec IVideoStreamCodec is retrieved outside this Changed() block
	}
	videoCodecFlagValue := m.VideoCodec
	if swag.IsZero(videoCodecFlagValue) {
		videoCodecFlagValue = &models.IVideoStreamCodec{}
	}

	err, videoCodecAdded := retrieveModelIVideoStreamCodecFlags(depth+1, videoCodecFlagValue, videoCodecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoCodecAdded
	if videoCodecAdded {
		m.VideoCodec = videoCodecFlagValue
	}

	return nil, retAdded
}

func retrieveIStreamCodecInfoVideoCodecNameFlags(depth int, m *models.IStreamCodecInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoCodecNameFlagName := fmt.Sprintf("%v.videoCodecName", cmdPrefix)
	if cmd.Flags().Changed(videoCodecNameFlagName) {

		var videoCodecNameFlagName string
		if cmdPrefix == "" {
			videoCodecNameFlagName = "videoCodecName"
		} else {
			videoCodecNameFlagName = fmt.Sprintf("%v.videoCodecName", cmdPrefix)
		}

		videoCodecNameFlagValue, err := cmd.Flags().GetString(videoCodecNameFlagName)
		if err != nil {
			return err, false
		}
		m.VideoCodecName = videoCodecNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
