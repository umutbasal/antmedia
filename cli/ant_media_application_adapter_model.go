// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for AntMediaApplicationAdapter

// register flags to command
func registerModelAntMediaApplicationAdapterFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntMediaApplicationAdapterAppSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterAttributeNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterChildScopeNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterClientTTL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterClients(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterConnections(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterDataChannelEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterDataChannelMessagingSupported(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterDataStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterDataStoreFactory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterDepth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterGhostConnsCleanupPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterHTTPClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterListeners(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterMuxAdaptors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterNumberOfEncoderNotOpenedErrors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterNumberOfEncodersBlocked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterNumberOfPublishTimeoutError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterParent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterPlugins(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterScheduledJobNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterServerSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterServerShuttingDown(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterShutdownProperly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterStorageClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterStreamAcceptFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterStreamFetcherManager(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterStreamPlaybackSecurity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterStreamPublishSecurity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterStreamPublishSecurityList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterVertx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterWebRTCAudioReceiveStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterWebRTCAudioSendStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterWebRTCVideoReceiveStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntMediaApplicationAdapterWebRTCVideoSendStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterAppSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var appSettingsFlagName string
	if cmdPrefix == "" {
		appSettingsFlagName = "appSettings"
	} else {
		appSettingsFlagName = fmt.Sprintf("%v.appSettings", cmdPrefix)
	}

	if err := registerModelAppSettingsFlags(depth+1, appSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterAttributeNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributeNames []string array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attributes map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterChildScopeNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: childScopeNames []string array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterClientTTL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientTtlDescription := ``

	var clientTtlFlagName string
	if cmdPrefix == "" {
		clientTtlFlagName = "clientTTL"
	} else {
		clientTtlFlagName = fmt.Sprintf("%v.clientTTL", cmdPrefix)
	}

	var clientTtlFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientTtlFlagName, clientTtlFlagDefault, clientTtlDescription)

	return nil
}

func registerAntMediaApplicationAdapterClients(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: clients []*IClient array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterConnections(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: connections [][]*IConnection array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var contextFlagName string
	if cmdPrefix == "" {
		contextFlagName = "context"
	} else {
		contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
	}

	if err := registerModelIContextFlags(depth+1, contextFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterDataChannelEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataChannelEnabledDescription := ``

	var dataChannelEnabledFlagName string
	if cmdPrefix == "" {
		dataChannelEnabledFlagName = "dataChannelEnabled"
	} else {
		dataChannelEnabledFlagName = fmt.Sprintf("%v.dataChannelEnabled", cmdPrefix)
	}

	var dataChannelEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dataChannelEnabledFlagName, dataChannelEnabledFlagDefault, dataChannelEnabledDescription)

	return nil
}

func registerAntMediaApplicationAdapterDataChannelMessagingSupported(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataChannelMessagingSupportedDescription := ``

	var dataChannelMessagingSupportedFlagName string
	if cmdPrefix == "" {
		dataChannelMessagingSupportedFlagName = "dataChannelMessagingSupported"
	} else {
		dataChannelMessagingSupportedFlagName = fmt.Sprintf("%v.dataChannelMessagingSupported", cmdPrefix)
	}

	var dataChannelMessagingSupportedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dataChannelMessagingSupportedFlagName, dataChannelMessagingSupportedFlagDefault, dataChannelMessagingSupportedDescription)

	return nil
}

func registerAntMediaApplicationAdapterDataStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataStoreFlagName string
	if cmdPrefix == "" {
		dataStoreFlagName = "dataStore"
	} else {
		dataStoreFlagName = fmt.Sprintf("%v.dataStore", cmdPrefix)
	}

	if err := registerModelDataStoreFlags(depth+1, dataStoreFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterDataStoreFactory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataStoreFactoryFlagName string
	if cmdPrefix == "" {
		dataStoreFactoryFlagName = "dataStoreFactory"
	} else {
		dataStoreFactoryFlagName = fmt.Sprintf("%v.dataStoreFactory", cmdPrefix)
	}

	if err := registerModelDataStoreFactoryFlags(depth+1, dataStoreFactoryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterDepth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	depthDescription := ``

	var depthFlagName string
	if cmdPrefix == "" {
		depthFlagName = "depth"
	} else {
		depthFlagName = fmt.Sprintf("%v.depth", cmdPrefix)
	}

	var depthFlagDefault int32

	_ = cmd.PersistentFlags().Int32(depthFlagName, depthFlagDefault, depthDescription)

	return nil
}

func registerAntMediaApplicationAdapterGhostConnsCleanupPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ghostConnsCleanupPeriodDescription := ``

	var ghostConnsCleanupPeriodFlagName string
	if cmdPrefix == "" {
		ghostConnsCleanupPeriodFlagName = "ghostConnsCleanupPeriod"
	} else {
		ghostConnsCleanupPeriodFlagName = fmt.Sprintf("%v.ghostConnsCleanupPeriod", cmdPrefix)
	}

	var ghostConnsCleanupPeriodFlagDefault int32

	_ = cmd.PersistentFlags().Int32(ghostConnsCleanupPeriodFlagName, ghostConnsCleanupPeriodFlagDefault, ghostConnsCleanupPeriodDescription)

	return nil
}

func registerAntMediaApplicationAdapterHTTPClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpClientFlagName string
	if cmdPrefix == "" {
		httpClientFlagName = "httpClient"
	} else {
		httpClientFlagName = fmt.Sprintf("%v.httpClient", cmdPrefix)
	}

	if err := registerModelCloseableHTTPClientFlags(depth+1, httpClientFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterListeners(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: listeners []IApplication array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterMuxAdaptors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: muxAdaptors []*MuxAdaptor array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerAntMediaApplicationAdapterNumberOfEncoderNotOpenedErrors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfEncoderNotOpenedErrorsDescription := ``

	var numberOfEncoderNotOpenedErrorsFlagName string
	if cmdPrefix == "" {
		numberOfEncoderNotOpenedErrorsFlagName = "numberOfEncoderNotOpenedErrors"
	} else {
		numberOfEncoderNotOpenedErrorsFlagName = fmt.Sprintf("%v.numberOfEncoderNotOpenedErrors", cmdPrefix)
	}

	var numberOfEncoderNotOpenedErrorsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numberOfEncoderNotOpenedErrorsFlagName, numberOfEncoderNotOpenedErrorsFlagDefault, numberOfEncoderNotOpenedErrorsDescription)

	return nil
}

func registerAntMediaApplicationAdapterNumberOfEncodersBlocked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfEncodersBlockedDescription := ``

	var numberOfEncodersBlockedFlagName string
	if cmdPrefix == "" {
		numberOfEncodersBlockedFlagName = "numberOfEncodersBlocked"
	} else {
		numberOfEncodersBlockedFlagName = fmt.Sprintf("%v.numberOfEncodersBlocked", cmdPrefix)
	}

	var numberOfEncodersBlockedFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numberOfEncodersBlockedFlagName, numberOfEncodersBlockedFlagDefault, numberOfEncodersBlockedDescription)

	return nil
}

func registerAntMediaApplicationAdapterNumberOfPublishTimeoutError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfPublishTimeoutErrorDescription := ``

	var numberOfPublishTimeoutErrorFlagName string
	if cmdPrefix == "" {
		numberOfPublishTimeoutErrorFlagName = "numberOfPublishTimeoutError"
	} else {
		numberOfPublishTimeoutErrorFlagName = fmt.Sprintf("%v.numberOfPublishTimeoutError", cmdPrefix)
	}

	var numberOfPublishTimeoutErrorFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numberOfPublishTimeoutErrorFlagName, numberOfPublishTimeoutErrorFlagDefault, numberOfPublishTimeoutErrorDescription)

	return nil
}

func registerAntMediaApplicationAdapterParent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var parentFlagName string
	if cmdPrefix == "" {
		parentFlagName = "parent"
	} else {
		parentFlagName = fmt.Sprintf("%v.parent", cmdPrefix)
	}

	if err := registerModelIScopeFlags(depth+1, parentFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := ``

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerAntMediaApplicationAdapterPlugins(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: plugins []*PluginDescriptor array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterScheduledJobNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: scheduledJobNames []string array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scopeFlagName string
	if cmdPrefix == "" {
		scopeFlagName = "scope"
	} else {
		scopeFlagName = fmt.Sprintf("%v.scope", cmdPrefix)
	}

	if err := registerModelIScopeFlags(depth+1, scopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterServerSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var serverSettingsFlagName string
	if cmdPrefix == "" {
		serverSettingsFlagName = "serverSettings"
	} else {
		serverSettingsFlagName = fmt.Sprintf("%v.serverSettings", cmdPrefix)
	}

	if err := registerModelServerSettingsFlags(depth+1, serverSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterServerShuttingDown(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverShuttingDownDescription := ``

	var serverShuttingDownFlagName string
	if cmdPrefix == "" {
		serverShuttingDownFlagName = "serverShuttingDown"
	} else {
		serverShuttingDownFlagName = fmt.Sprintf("%v.serverShuttingDown", cmdPrefix)
	}

	var serverShuttingDownFlagDefault bool

	_ = cmd.PersistentFlags().Bool(serverShuttingDownFlagName, serverShuttingDownFlagDefault, serverShuttingDownDescription)

	return nil
}

func registerAntMediaApplicationAdapterShutdownProperly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	shutdownProperlyDescription := ``

	var shutdownProperlyFlagName string
	if cmdPrefix == "" {
		shutdownProperlyFlagName = "shutdownProperly"
	} else {
		shutdownProperlyFlagName = fmt.Sprintf("%v.shutdownProperly", cmdPrefix)
	}

	var shutdownProperlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(shutdownProperlyFlagName, shutdownProperlyFlagDefault, shutdownProperlyDescription)

	return nil
}

func registerAntMediaApplicationAdapterStorageClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var storageClientFlagName string
	if cmdPrefix == "" {
		storageClientFlagName = "storageClient"
	} else {
		storageClientFlagName = fmt.Sprintf("%v.storageClient", cmdPrefix)
	}

	if err := registerModelStorageClientFlags(depth+1, storageClientFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterStreamAcceptFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var streamAcceptFilterFlagName string
	if cmdPrefix == "" {
		streamAcceptFilterFlagName = "streamAcceptFilter"
	} else {
		streamAcceptFilterFlagName = fmt.Sprintf("%v.streamAcceptFilter", cmdPrefix)
	}

	if err := registerModelStreamAcceptFilterFlags(depth+1, streamAcceptFilterFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterStreamFetcherManager(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var streamFetcherManagerFlagName string
	if cmdPrefix == "" {
		streamFetcherManagerFlagName = "streamFetcherManager"
	} else {
		streamFetcherManagerFlagName = fmt.Sprintf("%v.streamFetcherManager", cmdPrefix)
	}

	if err := registerModelStreamFetcherManagerFlags(depth+1, streamFetcherManagerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterStreamPlaybackSecurity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamPlaybackSecurity []IStreamPlaybackSecurity array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterStreamPublishSecurity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamPublishSecurity []IStreamPublishSecurity array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterStreamPublishSecurityList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamPublishSecurityList []IStreamPublishSecurity array type is not supported by go-swagger cli yet

	return nil
}

func registerAntMediaApplicationAdapterVertx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var vertxFlagName string
	if cmdPrefix == "" {
		vertxFlagName = "vertx"
	} else {
		vertxFlagName = fmt.Sprintf("%v.vertx", cmdPrefix)
	}

	if err := registerModelVertxFlags(depth+1, vertxFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterWebRTCAudioReceiveStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var webRTCAudioReceiveStatsFlagName string
	if cmdPrefix == "" {
		webRTCAudioReceiveStatsFlagName = "webRTCAudioReceiveStats"
	} else {
		webRTCAudioReceiveStatsFlagName = fmt.Sprintf("%v.webRTCAudioReceiveStats", cmdPrefix)
	}

	if err := registerModelWebRTCAudioReceiveStatsFlags(depth+1, webRTCAudioReceiveStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterWebRTCAudioSendStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var webRTCAudioSendStatsFlagName string
	if cmdPrefix == "" {
		webRTCAudioSendStatsFlagName = "webRTCAudioSendStats"
	} else {
		webRTCAudioSendStatsFlagName = fmt.Sprintf("%v.webRTCAudioSendStats", cmdPrefix)
	}

	if err := registerModelWebRTCAudioSendStatsFlags(depth+1, webRTCAudioSendStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterWebRTCVideoReceiveStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var webRTCVideoReceiveStatsFlagName string
	if cmdPrefix == "" {
		webRTCVideoReceiveStatsFlagName = "webRTCVideoReceiveStats"
	} else {
		webRTCVideoReceiveStatsFlagName = fmt.Sprintf("%v.webRTCVideoReceiveStats", cmdPrefix)
	}

	if err := registerModelWebRTCVideoReceiveStatsFlags(depth+1, webRTCVideoReceiveStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntMediaApplicationAdapterWebRTCVideoSendStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var webRTCVideoSendStatsFlagName string
	if cmdPrefix == "" {
		webRTCVideoSendStatsFlagName = "webRTCVideoSendStats"
	} else {
		webRTCVideoSendStatsFlagName = fmt.Sprintf("%v.webRTCVideoSendStats", cmdPrefix)
	}

	if err := registerModelWebRTCVideoSendStatsFlags(depth+1, webRTCVideoSendStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntMediaApplicationAdapterFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, appSettingsAdded := retrieveAntMediaApplicationAdapterAppSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appSettingsAdded

	err, attributeNamesAdded := retrieveAntMediaApplicationAdapterAttributeNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributeNamesAdded

	err, attributesAdded := retrieveAntMediaApplicationAdapterAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, childScopeNamesAdded := retrieveAntMediaApplicationAdapterChildScopeNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || childScopeNamesAdded

	err, clientTtlAdded := retrieveAntMediaApplicationAdapterClientTTLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientTtlAdded

	err, clientsAdded := retrieveAntMediaApplicationAdapterClientsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientsAdded

	err, connectionsAdded := retrieveAntMediaApplicationAdapterConnectionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionsAdded

	err, contextAdded := retrieveAntMediaApplicationAdapterContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextAdded

	err, dataChannelEnabledAdded := retrieveAntMediaApplicationAdapterDataChannelEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataChannelEnabledAdded

	err, dataChannelMessagingSupportedAdded := retrieveAntMediaApplicationAdapterDataChannelMessagingSupportedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataChannelMessagingSupportedAdded

	err, dataStoreAdded := retrieveAntMediaApplicationAdapterDataStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded

	err, dataStoreFactoryAdded := retrieveAntMediaApplicationAdapterDataStoreFactoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreFactoryAdded

	err, depthAdded := retrieveAntMediaApplicationAdapterDepthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || depthAdded

	err, ghostConnsCleanupPeriodAdded := retrieveAntMediaApplicationAdapterGhostConnsCleanupPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ghostConnsCleanupPeriodAdded

	err, httpClientAdded := retrieveAntMediaApplicationAdapterHTTPClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpClientAdded

	err, listenersAdded := retrieveAntMediaApplicationAdapterListenersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenersAdded

	err, muxAdaptorsAdded := retrieveAntMediaApplicationAdapterMuxAdaptorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || muxAdaptorsAdded

	err, nameAdded := retrieveAntMediaApplicationAdapterNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, numberOfEncoderNotOpenedErrorsAdded := retrieveAntMediaApplicationAdapterNumberOfEncoderNotOpenedErrorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfEncoderNotOpenedErrorsAdded

	err, numberOfEncodersBlockedAdded := retrieveAntMediaApplicationAdapterNumberOfEncodersBlockedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfEncodersBlockedAdded

	err, numberOfPublishTimeoutErrorAdded := retrieveAntMediaApplicationAdapterNumberOfPublishTimeoutErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfPublishTimeoutErrorAdded

	err, parentAdded := retrieveAntMediaApplicationAdapterParentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parentAdded

	err, pathAdded := retrieveAntMediaApplicationAdapterPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, pluginsAdded := retrieveAntMediaApplicationAdapterPluginsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginsAdded

	err, scheduledJobNamesAdded := retrieveAntMediaApplicationAdapterScheduledJobNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduledJobNamesAdded

	err, scopeAdded := retrieveAntMediaApplicationAdapterScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, serverSettingsAdded := retrieveAntMediaApplicationAdapterServerSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSettingsAdded

	err, serverShuttingDownAdded := retrieveAntMediaApplicationAdapterServerShuttingDownFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverShuttingDownAdded

	err, shutdownProperlyAdded := retrieveAntMediaApplicationAdapterShutdownProperlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || shutdownProperlyAdded

	err, storageClientAdded := retrieveAntMediaApplicationAdapterStorageClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageClientAdded

	err, streamAcceptFilterAdded := retrieveAntMediaApplicationAdapterStreamAcceptFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamAcceptFilterAdded

	err, streamFetcherManagerAdded := retrieveAntMediaApplicationAdapterStreamFetcherManagerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamFetcherManagerAdded

	err, streamPlaybackSecurityAdded := retrieveAntMediaApplicationAdapterStreamPlaybackSecurityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamPlaybackSecurityAdded

	err, streamPublishSecurityAdded := retrieveAntMediaApplicationAdapterStreamPublishSecurityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamPublishSecurityAdded

	err, streamPublishSecurityListAdded := retrieveAntMediaApplicationAdapterStreamPublishSecurityListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamPublishSecurityListAdded

	err, vertxAdded := retrieveAntMediaApplicationAdapterVertxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vertxAdded

	err, webRTCAudioReceiveStatsAdded := retrieveAntMediaApplicationAdapterWebRTCAudioReceiveStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCAudioReceiveStatsAdded

	err, webRTCAudioSendStatsAdded := retrieveAntMediaApplicationAdapterWebRTCAudioSendStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCAudioSendStatsAdded

	err, webRTCVideoReceiveStatsAdded := retrieveAntMediaApplicationAdapterWebRTCVideoReceiveStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCVideoReceiveStatsAdded

	err, webRTCVideoSendStatsAdded := retrieveAntMediaApplicationAdapterWebRTCVideoSendStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCVideoSendStatsAdded

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterAppSettingsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appSettingsFlagName := fmt.Sprintf("%v.appSettings", cmdPrefix)
	if cmd.Flags().Changed(appSettingsFlagName) {
		// info: complex object appSettings AppSettings is retrieved outside this Changed() block
	}
	appSettingsFlagValue := m.AppSettings
	if swag.IsZero(appSettingsFlagValue) {
		appSettingsFlagValue = &models.AppSettings{}
	}

	err, appSettingsAdded := retrieveModelAppSettingsFlags(depth+1, appSettingsFlagValue, appSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appSettingsAdded
	if appSettingsAdded {
		m.AppSettings = appSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterAttributeNamesFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributeNamesFlagName := fmt.Sprintf("%v.attributeNames", cmdPrefix)
	if cmd.Flags().Changed(attributeNamesFlagName) {
		// warning: attributeNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterAttributesFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// warning: attributes map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterChildScopeNamesFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	childScopeNamesFlagName := fmt.Sprintf("%v.childScopeNames", cmdPrefix)
	if cmd.Flags().Changed(childScopeNamesFlagName) {
		// warning: childScopeNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterClientTTLFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientTtlFlagName := fmt.Sprintf("%v.clientTTL", cmdPrefix)
	if cmd.Flags().Changed(clientTtlFlagName) {

		var clientTtlFlagName string
		if cmdPrefix == "" {
			clientTtlFlagName = "clientTTL"
		} else {
			clientTtlFlagName = fmt.Sprintf("%v.clientTTL", cmdPrefix)
		}

		clientTtlFlagValue, err := cmd.Flags().GetInt64(clientTtlFlagName)
		if err != nil {
			return err, false
		}
		m.ClientTTL = clientTtlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterClientsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientsFlagName := fmt.Sprintf("%v.clients", cmdPrefix)
	if cmd.Flags().Changed(clientsFlagName) {
		// warning: clients array type []*IClient is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterConnectionsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionsFlagName := fmt.Sprintf("%v.connections", cmdPrefix)
	if cmd.Flags().Changed(connectionsFlagName) {
		// warning: connections array type [][]*IConnection is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterContextFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextFlagName := fmt.Sprintf("%v.context", cmdPrefix)
	if cmd.Flags().Changed(contextFlagName) {
		// info: complex object context IContext is retrieved outside this Changed() block
	}
	contextFlagValue := m.Context
	if swag.IsZero(contextFlagValue) {
		contextFlagValue = &models.IContext{}
	}

	err, contextAdded := retrieveModelIContextFlags(depth+1, contextFlagValue, contextFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextAdded
	if contextAdded {
		m.Context = contextFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterDataChannelEnabledFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataChannelEnabledFlagName := fmt.Sprintf("%v.dataChannelEnabled", cmdPrefix)
	if cmd.Flags().Changed(dataChannelEnabledFlagName) {

		var dataChannelEnabledFlagName string
		if cmdPrefix == "" {
			dataChannelEnabledFlagName = "dataChannelEnabled"
		} else {
			dataChannelEnabledFlagName = fmt.Sprintf("%v.dataChannelEnabled", cmdPrefix)
		}

		dataChannelEnabledFlagValue, err := cmd.Flags().GetBool(dataChannelEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DataChannelEnabled = dataChannelEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterDataChannelMessagingSupportedFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataChannelMessagingSupportedFlagName := fmt.Sprintf("%v.dataChannelMessagingSupported", cmdPrefix)
	if cmd.Flags().Changed(dataChannelMessagingSupportedFlagName) {

		var dataChannelMessagingSupportedFlagName string
		if cmdPrefix == "" {
			dataChannelMessagingSupportedFlagName = "dataChannelMessagingSupported"
		} else {
			dataChannelMessagingSupportedFlagName = fmt.Sprintf("%v.dataChannelMessagingSupported", cmdPrefix)
		}

		dataChannelMessagingSupportedFlagValue, err := cmd.Flags().GetBool(dataChannelMessagingSupportedFlagName)
		if err != nil {
			return err, false
		}
		m.DataChannelMessagingSupported = dataChannelMessagingSupportedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterDataStoreFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataStoreFlagName := fmt.Sprintf("%v.dataStore", cmdPrefix)
	if cmd.Flags().Changed(dataStoreFlagName) {
		// info: complex object dataStore DataStore is retrieved outside this Changed() block
	}
	dataStoreFlagValue := m.DataStore
	if swag.IsZero(dataStoreFlagValue) {
		dataStoreFlagValue = &models.DataStore{}
	}

	err, dataStoreAdded := retrieveModelDataStoreFlags(depth+1, dataStoreFlagValue, dataStoreFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded
	if dataStoreAdded {
		m.DataStore = dataStoreFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterDataStoreFactoryFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataStoreFactoryFlagName := fmt.Sprintf("%v.dataStoreFactory", cmdPrefix)
	if cmd.Flags().Changed(dataStoreFactoryFlagName) {
		// info: complex object dataStoreFactory DataStoreFactory is retrieved outside this Changed() block
	}
	dataStoreFactoryFlagValue := m.DataStoreFactory
	if swag.IsZero(dataStoreFactoryFlagValue) {
		dataStoreFactoryFlagValue = &models.DataStoreFactory{}
	}

	err, dataStoreFactoryAdded := retrieveModelDataStoreFactoryFlags(depth+1, dataStoreFactoryFlagValue, dataStoreFactoryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreFactoryAdded
	if dataStoreFactoryAdded {
		m.DataStoreFactory = dataStoreFactoryFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterDepthFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	depthFlagName := fmt.Sprintf("%v.depth", cmdPrefix)
	if cmd.Flags().Changed(depthFlagName) {

		var depthFlagName string
		if cmdPrefix == "" {
			depthFlagName = "depth"
		} else {
			depthFlagName = fmt.Sprintf("%v.depth", cmdPrefix)
		}

		depthFlagValue, err := cmd.Flags().GetInt32(depthFlagName)
		if err != nil {
			return err, false
		}
		m.Depth = depthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterGhostConnsCleanupPeriodFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ghostConnsCleanupPeriodFlagName := fmt.Sprintf("%v.ghostConnsCleanupPeriod", cmdPrefix)
	if cmd.Flags().Changed(ghostConnsCleanupPeriodFlagName) {

		var ghostConnsCleanupPeriodFlagName string
		if cmdPrefix == "" {
			ghostConnsCleanupPeriodFlagName = "ghostConnsCleanupPeriod"
		} else {
			ghostConnsCleanupPeriodFlagName = fmt.Sprintf("%v.ghostConnsCleanupPeriod", cmdPrefix)
		}

		ghostConnsCleanupPeriodFlagValue, err := cmd.Flags().GetInt32(ghostConnsCleanupPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.GhostConnsCleanupPeriod = ghostConnsCleanupPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterHTTPClientFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpClientFlagName := fmt.Sprintf("%v.httpClient", cmdPrefix)
	if cmd.Flags().Changed(httpClientFlagName) {
		// info: complex object httpClient CloseableHTTPClient is retrieved outside this Changed() block
	}
	httpClientFlagValue := m.HTTPClient
	if swag.IsZero(httpClientFlagValue) {
		httpClientFlagValue = &models.CloseableHTTPClient{}
	}

	err, httpClientAdded := retrieveModelCloseableHTTPClientFlags(depth+1, httpClientFlagValue, httpClientFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpClientAdded
	if httpClientAdded {
		m.HTTPClient = httpClientFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterListenersFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	listenersFlagName := fmt.Sprintf("%v.listeners", cmdPrefix)
	if cmd.Flags().Changed(listenersFlagName) {
		// warning: listeners array type []IApplication is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterMuxAdaptorsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	muxAdaptorsFlagName := fmt.Sprintf("%v.muxAdaptors", cmdPrefix)
	if cmd.Flags().Changed(muxAdaptorsFlagName) {
		// warning: muxAdaptors array type []*MuxAdaptor is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterNameFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterNumberOfEncoderNotOpenedErrorsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfEncoderNotOpenedErrorsFlagName := fmt.Sprintf("%v.numberOfEncoderNotOpenedErrors", cmdPrefix)
	if cmd.Flags().Changed(numberOfEncoderNotOpenedErrorsFlagName) {

		var numberOfEncoderNotOpenedErrorsFlagName string
		if cmdPrefix == "" {
			numberOfEncoderNotOpenedErrorsFlagName = "numberOfEncoderNotOpenedErrors"
		} else {
			numberOfEncoderNotOpenedErrorsFlagName = fmt.Sprintf("%v.numberOfEncoderNotOpenedErrors", cmdPrefix)
		}

		numberOfEncoderNotOpenedErrorsFlagValue, err := cmd.Flags().GetInt32(numberOfEncoderNotOpenedErrorsFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfEncoderNotOpenedErrors = numberOfEncoderNotOpenedErrorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterNumberOfEncodersBlockedFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfEncodersBlockedFlagName := fmt.Sprintf("%v.numberOfEncodersBlocked", cmdPrefix)
	if cmd.Flags().Changed(numberOfEncodersBlockedFlagName) {

		var numberOfEncodersBlockedFlagName string
		if cmdPrefix == "" {
			numberOfEncodersBlockedFlagName = "numberOfEncodersBlocked"
		} else {
			numberOfEncodersBlockedFlagName = fmt.Sprintf("%v.numberOfEncodersBlocked", cmdPrefix)
		}

		numberOfEncodersBlockedFlagValue, err := cmd.Flags().GetInt32(numberOfEncodersBlockedFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfEncodersBlocked = numberOfEncodersBlockedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterNumberOfPublishTimeoutErrorFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfPublishTimeoutErrorFlagName := fmt.Sprintf("%v.numberOfPublishTimeoutError", cmdPrefix)
	if cmd.Flags().Changed(numberOfPublishTimeoutErrorFlagName) {

		var numberOfPublishTimeoutErrorFlagName string
		if cmdPrefix == "" {
			numberOfPublishTimeoutErrorFlagName = "numberOfPublishTimeoutError"
		} else {
			numberOfPublishTimeoutErrorFlagName = fmt.Sprintf("%v.numberOfPublishTimeoutError", cmdPrefix)
		}

		numberOfPublishTimeoutErrorFlagValue, err := cmd.Flags().GetInt32(numberOfPublishTimeoutErrorFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfPublishTimeoutError = numberOfPublishTimeoutErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterParentFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parentFlagName := fmt.Sprintf("%v.parent", cmdPrefix)
	if cmd.Flags().Changed(parentFlagName) {
		// info: complex object parent IScope is retrieved outside this Changed() block
	}
	parentFlagValue := m.Parent
	if swag.IsZero(parentFlagValue) {
		parentFlagValue = &models.IScope{}
	}

	err, parentAdded := retrieveModelIScopeFlags(depth+1, parentFlagValue, parentFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parentAdded
	if parentAdded {
		m.Parent = parentFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterPathFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pathFlagName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterPluginsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pluginsFlagName := fmt.Sprintf("%v.plugins", cmdPrefix)
	if cmd.Flags().Changed(pluginsFlagName) {
		// warning: plugins array type []*PluginDescriptor is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterScheduledJobNamesFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduledJobNamesFlagName := fmt.Sprintf("%v.scheduledJobNames", cmdPrefix)
	if cmd.Flags().Changed(scheduledJobNamesFlagName) {
		// warning: scheduledJobNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterScopeFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeFlagName := fmt.Sprintf("%v.scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {
		// info: complex object scope IScope is retrieved outside this Changed() block
	}
	scopeFlagValue := m.Scope
	if swag.IsZero(scopeFlagValue) {
		scopeFlagValue = &models.IScope{}
	}

	err, scopeAdded := retrieveModelIScopeFlags(depth+1, scopeFlagValue, scopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded
	if scopeAdded {
		m.Scope = scopeFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterServerSettingsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverSettingsFlagName := fmt.Sprintf("%v.serverSettings", cmdPrefix)
	if cmd.Flags().Changed(serverSettingsFlagName) {
		// info: complex object serverSettings ServerSettings is retrieved outside this Changed() block
	}
	serverSettingsFlagValue := m.ServerSettings
	if swag.IsZero(serverSettingsFlagValue) {
		serverSettingsFlagValue = &models.ServerSettings{}
	}

	err, serverSettingsAdded := retrieveModelServerSettingsFlags(depth+1, serverSettingsFlagValue, serverSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverSettingsAdded
	if serverSettingsAdded {
		m.ServerSettings = serverSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterServerShuttingDownFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverShuttingDownFlagName := fmt.Sprintf("%v.serverShuttingDown", cmdPrefix)
	if cmd.Flags().Changed(serverShuttingDownFlagName) {

		var serverShuttingDownFlagName string
		if cmdPrefix == "" {
			serverShuttingDownFlagName = "serverShuttingDown"
		} else {
			serverShuttingDownFlagName = fmt.Sprintf("%v.serverShuttingDown", cmdPrefix)
		}

		serverShuttingDownFlagValue, err := cmd.Flags().GetBool(serverShuttingDownFlagName)
		if err != nil {
			return err, false
		}
		m.ServerShuttingDown = serverShuttingDownFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterShutdownProperlyFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	shutdownProperlyFlagName := fmt.Sprintf("%v.shutdownProperly", cmdPrefix)
	if cmd.Flags().Changed(shutdownProperlyFlagName) {

		var shutdownProperlyFlagName string
		if cmdPrefix == "" {
			shutdownProperlyFlagName = "shutdownProperly"
		} else {
			shutdownProperlyFlagName = fmt.Sprintf("%v.shutdownProperly", cmdPrefix)
		}

		shutdownProperlyFlagValue, err := cmd.Flags().GetBool(shutdownProperlyFlagName)
		if err != nil {
			return err, false
		}
		m.ShutdownProperly = shutdownProperlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterStorageClientFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageClientFlagName := fmt.Sprintf("%v.storageClient", cmdPrefix)
	if cmd.Flags().Changed(storageClientFlagName) {
		// info: complex object storageClient StorageClient is retrieved outside this Changed() block
	}
	storageClientFlagValue := m.StorageClient
	if swag.IsZero(storageClientFlagValue) {
		storageClientFlagValue = &models.StorageClient{}
	}

	err, storageClientAdded := retrieveModelStorageClientFlags(depth+1, storageClientFlagValue, storageClientFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageClientAdded
	if storageClientAdded {
		m.StorageClient = storageClientFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterStreamAcceptFilterFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamAcceptFilterFlagName := fmt.Sprintf("%v.streamAcceptFilter", cmdPrefix)
	if cmd.Flags().Changed(streamAcceptFilterFlagName) {
		// info: complex object streamAcceptFilter StreamAcceptFilter is retrieved outside this Changed() block
	}
	streamAcceptFilterFlagValue := m.StreamAcceptFilter
	if swag.IsZero(streamAcceptFilterFlagValue) {
		streamAcceptFilterFlagValue = &models.StreamAcceptFilter{}
	}

	err, streamAcceptFilterAdded := retrieveModelStreamAcceptFilterFlags(depth+1, streamAcceptFilterFlagValue, streamAcceptFilterFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamAcceptFilterAdded
	if streamAcceptFilterAdded {
		m.StreamAcceptFilter = streamAcceptFilterFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterStreamFetcherManagerFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamFetcherManagerFlagName := fmt.Sprintf("%v.streamFetcherManager", cmdPrefix)
	if cmd.Flags().Changed(streamFetcherManagerFlagName) {
		// info: complex object streamFetcherManager StreamFetcherManager is retrieved outside this Changed() block
	}
	streamFetcherManagerFlagValue := m.StreamFetcherManager
	if swag.IsZero(streamFetcherManagerFlagValue) {
		streamFetcherManagerFlagValue = &models.StreamFetcherManager{}
	}

	err, streamFetcherManagerAdded := retrieveModelStreamFetcherManagerFlags(depth+1, streamFetcherManagerFlagValue, streamFetcherManagerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamFetcherManagerAdded
	if streamFetcherManagerAdded {
		m.StreamFetcherManager = streamFetcherManagerFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterStreamPlaybackSecurityFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamPlaybackSecurityFlagName := fmt.Sprintf("%v.streamPlaybackSecurity", cmdPrefix)
	if cmd.Flags().Changed(streamPlaybackSecurityFlagName) {
		// warning: streamPlaybackSecurity array type []IStreamPlaybackSecurity is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterStreamPublishSecurityFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamPublishSecurityFlagName := fmt.Sprintf("%v.streamPublishSecurity", cmdPrefix)
	if cmd.Flags().Changed(streamPublishSecurityFlagName) {
		// warning: streamPublishSecurity array type []IStreamPublishSecurity is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterStreamPublishSecurityListFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamPublishSecurityListFlagName := fmt.Sprintf("%v.streamPublishSecurityList", cmdPrefix)
	if cmd.Flags().Changed(streamPublishSecurityListFlagName) {
		// warning: streamPublishSecurityList array type []IStreamPublishSecurity is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterVertxFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vertxFlagName := fmt.Sprintf("%v.vertx", cmdPrefix)
	if cmd.Flags().Changed(vertxFlagName) {
		// info: complex object vertx Vertx is retrieved outside this Changed() block
	}
	vertxFlagValue := m.Vertx
	if swag.IsZero(vertxFlagValue) {
		vertxFlagValue = &models.Vertx{}
	}

	err, vertxAdded := retrieveModelVertxFlags(depth+1, vertxFlagValue, vertxFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vertxAdded
	if vertxAdded {
		m.Vertx = vertxFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterWebRTCAudioReceiveStatsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCAudioReceiveStatsFlagName := fmt.Sprintf("%v.webRTCAudioReceiveStats", cmdPrefix)
	if cmd.Flags().Changed(webRTCAudioReceiveStatsFlagName) {
		// info: complex object webRTCAudioReceiveStats WebRTCAudioReceiveStats is retrieved outside this Changed() block
	}
	webRTCAudioReceiveStatsFlagValue := m.WebRTCAudioReceiveStats
	if swag.IsZero(webRTCAudioReceiveStatsFlagValue) {
		webRTCAudioReceiveStatsFlagValue = &models.WebRTCAudioReceiveStats{}
	}

	err, webRTCAudioReceiveStatsAdded := retrieveModelWebRTCAudioReceiveStatsFlags(depth+1, webRTCAudioReceiveStatsFlagValue, webRTCAudioReceiveStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCAudioReceiveStatsAdded
	if webRTCAudioReceiveStatsAdded {
		m.WebRTCAudioReceiveStats = webRTCAudioReceiveStatsFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterWebRTCAudioSendStatsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCAudioSendStatsFlagName := fmt.Sprintf("%v.webRTCAudioSendStats", cmdPrefix)
	if cmd.Flags().Changed(webRTCAudioSendStatsFlagName) {
		// info: complex object webRTCAudioSendStats WebRTCAudioSendStats is retrieved outside this Changed() block
	}
	webRTCAudioSendStatsFlagValue := m.WebRTCAudioSendStats
	if swag.IsZero(webRTCAudioSendStatsFlagValue) {
		webRTCAudioSendStatsFlagValue = &models.WebRTCAudioSendStats{}
	}

	err, webRTCAudioSendStatsAdded := retrieveModelWebRTCAudioSendStatsFlags(depth+1, webRTCAudioSendStatsFlagValue, webRTCAudioSendStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCAudioSendStatsAdded
	if webRTCAudioSendStatsAdded {
		m.WebRTCAudioSendStats = webRTCAudioSendStatsFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterWebRTCVideoReceiveStatsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCVideoReceiveStatsFlagName := fmt.Sprintf("%v.webRTCVideoReceiveStats", cmdPrefix)
	if cmd.Flags().Changed(webRTCVideoReceiveStatsFlagName) {
		// info: complex object webRTCVideoReceiveStats WebRTCVideoReceiveStats is retrieved outside this Changed() block
	}
	webRTCVideoReceiveStatsFlagValue := m.WebRTCVideoReceiveStats
	if swag.IsZero(webRTCVideoReceiveStatsFlagValue) {
		webRTCVideoReceiveStatsFlagValue = &models.WebRTCVideoReceiveStats{}
	}

	err, webRTCVideoReceiveStatsAdded := retrieveModelWebRTCVideoReceiveStatsFlags(depth+1, webRTCVideoReceiveStatsFlagValue, webRTCVideoReceiveStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCVideoReceiveStatsAdded
	if webRTCVideoReceiveStatsAdded {
		m.WebRTCVideoReceiveStats = webRTCVideoReceiveStatsFlagValue
	}

	return nil, retAdded
}

func retrieveAntMediaApplicationAdapterWebRTCVideoSendStatsFlags(depth int, m *models.AntMediaApplicationAdapter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCVideoSendStatsFlagName := fmt.Sprintf("%v.webRTCVideoSendStats", cmdPrefix)
	if cmd.Flags().Changed(webRTCVideoSendStatsFlagName) {
		// info: complex object webRTCVideoSendStats WebRTCVideoSendStats is retrieved outside this Changed() block
	}
	webRTCVideoSendStatsFlagValue := m.WebRTCVideoSendStats
	if swag.IsZero(webRTCVideoSendStatsFlagValue) {
		webRTCVideoSendStatsFlagValue = &models.WebRTCVideoSendStats{}
	}

	err, webRTCVideoSendStatsAdded := retrieveModelWebRTCVideoSendStatsFlags(depth+1, webRTCVideoSendStatsFlagValue, webRTCVideoSendStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCVideoSendStatsAdded
	if webRTCVideoSendStatsAdded {
		m.WebRTCVideoSendStats = webRTCVideoSendStatsFlagValue
	}

	return nil, retAdded
}
