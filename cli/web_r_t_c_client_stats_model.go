// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for WebRTCClientStats

// register flags to command
func registerModelWebRTCClientStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebRTCClientStatsAudioFrameSendPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsAudioPacketCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsAudioSentStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsClientInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsMeasuredBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsSendBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsVideoFrameSendPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsVideoPacketCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebRTCClientStatsVideoSentStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebRTCClientStatsAudioFrameSendPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioFrameSendPeriodDescription := `the audio frame send period of the WebRTC Client`

	var audioFrameSendPeriodFlagName string
	if cmdPrefix == "" {
		audioFrameSendPeriodFlagName = "audioFrameSendPeriod"
	} else {
		audioFrameSendPeriodFlagName = fmt.Sprintf("%v.audioFrameSendPeriod", cmdPrefix)
	}

	var audioFrameSendPeriodFlagDefault float64

	_ = cmd.PersistentFlags().Float64(audioFrameSendPeriodFlagName, audioFrameSendPeriodFlagDefault, audioFrameSendPeriodDescription)

	return nil
}

func registerWebRTCClientStatsAudioPacketCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioPacketCountDescription := `Number of audio packets sent`

	var audioPacketCountFlagName string
	if cmdPrefix == "" {
		audioPacketCountFlagName = "audioPacketCount"
	} else {
		audioPacketCountFlagName = fmt.Sprintf("%v.audioPacketCount", cmdPrefix)
	}

	var audioPacketCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(audioPacketCountFlagName, audioPacketCountFlagDefault, audioPacketCountDescription)

	return nil
}

func registerWebRTCClientStatsAudioSentStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var audioSentStatsFlagName string
	if cmdPrefix == "" {
		audioSentStatsFlagName = "audioSentStats"
	} else {
		audioSentStatsFlagName = fmt.Sprintf("%v.audioSentStats", cmdPrefix)
	}

	if err := registerModelWebRTCAudioSendStatsFlags(depth+1, audioSentStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebRTCClientStatsClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientIdDescription := `WebRTC Client Id which is basically hash of the object`

	var clientIdFlagName string
	if cmdPrefix == "" {
		clientIdFlagName = "clientId"
	} else {
		clientIdFlagName = fmt.Sprintf("%v.clientId", cmdPrefix)
	}

	var clientIdFlagDefault int32

	_ = cmd.PersistentFlags().Int32(clientIdFlagName, clientIdFlagDefault, clientIdDescription)

	return nil
}

func registerWebRTCClientStatsClientInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientInfoDescription := `Free text information for the client`

	var clientInfoFlagName string
	if cmdPrefix == "" {
		clientInfoFlagName = "clientInfo"
	} else {
		clientInfoFlagName = fmt.Sprintf("%v.clientInfo", cmdPrefix)
	}

	var clientInfoFlagDefault string

	_ = cmd.PersistentFlags().String(clientInfoFlagName, clientInfoFlagDefault, clientInfoDescription)

	return nil
}

func registerWebRTCClientStatsMeasuredBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	measuredBitrateDescription := `the measured bitrate of the WebRTC Client`

	var measuredBitrateFlagName string
	if cmdPrefix == "" {
		measuredBitrateFlagName = "measuredBitrate"
	} else {
		measuredBitrateFlagName = fmt.Sprintf("%v.measuredBitrate", cmdPrefix)
	}

	var measuredBitrateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(measuredBitrateFlagName, measuredBitrateFlagDefault, measuredBitrateDescription)

	return nil
}

func registerWebRTCClientStatsSendBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sendBitrateDescription := `the sent bitrate of the WebRTC Client`

	var sendBitrateFlagName string
	if cmdPrefix == "" {
		sendBitrateFlagName = "sendBitrate"
	} else {
		sendBitrateFlagName = fmt.Sprintf("%v.sendBitrate", cmdPrefix)
	}

	var sendBitrateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(sendBitrateFlagName, sendBitrateFlagDefault, sendBitrateDescription)

	return nil
}

func registerWebRTCClientStatsVideoFrameSendPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoFrameSendPeriodDescription := `the video frame sent period of the WebRTC Client`

	var videoFrameSendPeriodFlagName string
	if cmdPrefix == "" {
		videoFrameSendPeriodFlagName = "videoFrameSendPeriod"
	} else {
		videoFrameSendPeriodFlagName = fmt.Sprintf("%v.videoFrameSendPeriod", cmdPrefix)
	}

	var videoFrameSendPeriodFlagDefault float64

	_ = cmd.PersistentFlags().Float64(videoFrameSendPeriodFlagName, videoFrameSendPeriodFlagDefault, videoFrameSendPeriodDescription)

	return nil
}

func registerWebRTCClientStatsVideoPacketCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoPacketCountDescription := `Number of video packets sent`

	var videoPacketCountFlagName string
	if cmdPrefix == "" {
		videoPacketCountFlagName = "videoPacketCount"
	} else {
		videoPacketCountFlagName = fmt.Sprintf("%v.videoPacketCount", cmdPrefix)
	}

	var videoPacketCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(videoPacketCountFlagName, videoPacketCountFlagDefault, videoPacketCountDescription)

	return nil
}

func registerWebRTCClientStatsVideoSentStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var videoSentStatsFlagName string
	if cmdPrefix == "" {
		videoSentStatsFlagName = "videoSentStats"
	} else {
		videoSentStatsFlagName = fmt.Sprintf("%v.videoSentStats", cmdPrefix)
	}

	if err := registerModelWebRTCVideoSendStatsFlags(depth+1, videoSentStatsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebRTCClientStatsFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, audioFrameSendPeriodAdded := retrieveWebRTCClientStatsAudioFrameSendPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioFrameSendPeriodAdded

	err, audioPacketCountAdded := retrieveWebRTCClientStatsAudioPacketCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioPacketCountAdded

	err, audioSentStatsAdded := retrieveWebRTCClientStatsAudioSentStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioSentStatsAdded

	err, clientIdAdded := retrieveWebRTCClientStatsClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientIdAdded

	err, clientInfoAdded := retrieveWebRTCClientStatsClientInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientInfoAdded

	err, measuredBitrateAdded := retrieveWebRTCClientStatsMeasuredBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || measuredBitrateAdded

	err, sendBitrateAdded := retrieveWebRTCClientStatsSendBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sendBitrateAdded

	err, videoFrameSendPeriodAdded := retrieveWebRTCClientStatsVideoFrameSendPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoFrameSendPeriodAdded

	err, videoPacketCountAdded := retrieveWebRTCClientStatsVideoPacketCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoPacketCountAdded

	err, videoSentStatsAdded := retrieveWebRTCClientStatsVideoSentStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoSentStatsAdded

	return nil, retAdded
}

func retrieveWebRTCClientStatsAudioFrameSendPeriodFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioFrameSendPeriodFlagName := fmt.Sprintf("%v.audioFrameSendPeriod", cmdPrefix)
	if cmd.Flags().Changed(audioFrameSendPeriodFlagName) {

		var audioFrameSendPeriodFlagName string
		if cmdPrefix == "" {
			audioFrameSendPeriodFlagName = "audioFrameSendPeriod"
		} else {
			audioFrameSendPeriodFlagName = fmt.Sprintf("%v.audioFrameSendPeriod", cmdPrefix)
		}

		audioFrameSendPeriodFlagValue, err := cmd.Flags().GetFloat64(audioFrameSendPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.AudioFrameSendPeriod = audioFrameSendPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsAudioPacketCountFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioPacketCountFlagName := fmt.Sprintf("%v.audioPacketCount", cmdPrefix)
	if cmd.Flags().Changed(audioPacketCountFlagName) {

		var audioPacketCountFlagName string
		if cmdPrefix == "" {
			audioPacketCountFlagName = "audioPacketCount"
		} else {
			audioPacketCountFlagName = fmt.Sprintf("%v.audioPacketCount", cmdPrefix)
		}

		audioPacketCountFlagValue, err := cmd.Flags().GetInt64(audioPacketCountFlagName)
		if err != nil {
			return err, false
		}
		m.AudioPacketCount = audioPacketCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsAudioSentStatsFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioSentStatsFlagName := fmt.Sprintf("%v.audioSentStats", cmdPrefix)
	if cmd.Flags().Changed(audioSentStatsFlagName) {
		// info: complex object audioSentStats WebRTCAudioSendStats is retrieved outside this Changed() block
	}
	audioSentStatsFlagValue := m.AudioSentStats
	if swag.IsZero(audioSentStatsFlagValue) {
		audioSentStatsFlagValue = &models.WebRTCAudioSendStats{}
	}

	err, audioSentStatsAdded := retrieveModelWebRTCAudioSendStatsFlags(depth+1, audioSentStatsFlagValue, audioSentStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioSentStatsAdded
	if audioSentStatsAdded {
		m.AudioSentStats = audioSentStatsFlagValue
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsClientIDFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientIdFlagName := fmt.Sprintf("%v.clientId", cmdPrefix)
	if cmd.Flags().Changed(clientIdFlagName) {

		var clientIdFlagName string
		if cmdPrefix == "" {
			clientIdFlagName = "clientId"
		} else {
			clientIdFlagName = fmt.Sprintf("%v.clientId", cmdPrefix)
		}

		clientIdFlagValue, err := cmd.Flags().GetInt32(clientIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClientID = clientIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsClientInfoFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientInfoFlagName := fmt.Sprintf("%v.clientInfo", cmdPrefix)
	if cmd.Flags().Changed(clientInfoFlagName) {

		var clientInfoFlagName string
		if cmdPrefix == "" {
			clientInfoFlagName = "clientInfo"
		} else {
			clientInfoFlagName = fmt.Sprintf("%v.clientInfo", cmdPrefix)
		}

		clientInfoFlagValue, err := cmd.Flags().GetString(clientInfoFlagName)
		if err != nil {
			return err, false
		}
		m.ClientInfo = clientInfoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsMeasuredBitrateFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	measuredBitrateFlagName := fmt.Sprintf("%v.measuredBitrate", cmdPrefix)
	if cmd.Flags().Changed(measuredBitrateFlagName) {

		var measuredBitrateFlagName string
		if cmdPrefix == "" {
			measuredBitrateFlagName = "measuredBitrate"
		} else {
			measuredBitrateFlagName = fmt.Sprintf("%v.measuredBitrate", cmdPrefix)
		}

		measuredBitrateFlagValue, err := cmd.Flags().GetInt32(measuredBitrateFlagName)
		if err != nil {
			return err, false
		}
		m.MeasuredBitrate = measuredBitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsSendBitrateFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sendBitrateFlagName := fmt.Sprintf("%v.sendBitrate", cmdPrefix)
	if cmd.Flags().Changed(sendBitrateFlagName) {

		var sendBitrateFlagName string
		if cmdPrefix == "" {
			sendBitrateFlagName = "sendBitrate"
		} else {
			sendBitrateFlagName = fmt.Sprintf("%v.sendBitrate", cmdPrefix)
		}

		sendBitrateFlagValue, err := cmd.Flags().GetInt32(sendBitrateFlagName)
		if err != nil {
			return err, false
		}
		m.SendBitrate = sendBitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsVideoFrameSendPeriodFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoFrameSendPeriodFlagName := fmt.Sprintf("%v.videoFrameSendPeriod", cmdPrefix)
	if cmd.Flags().Changed(videoFrameSendPeriodFlagName) {

		var videoFrameSendPeriodFlagName string
		if cmdPrefix == "" {
			videoFrameSendPeriodFlagName = "videoFrameSendPeriod"
		} else {
			videoFrameSendPeriodFlagName = fmt.Sprintf("%v.videoFrameSendPeriod", cmdPrefix)
		}

		videoFrameSendPeriodFlagValue, err := cmd.Flags().GetFloat64(videoFrameSendPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.VideoFrameSendPeriod = videoFrameSendPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsVideoPacketCountFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoPacketCountFlagName := fmt.Sprintf("%v.videoPacketCount", cmdPrefix)
	if cmd.Flags().Changed(videoPacketCountFlagName) {

		var videoPacketCountFlagName string
		if cmdPrefix == "" {
			videoPacketCountFlagName = "videoPacketCount"
		} else {
			videoPacketCountFlagName = fmt.Sprintf("%v.videoPacketCount", cmdPrefix)
		}

		videoPacketCountFlagValue, err := cmd.Flags().GetInt64(videoPacketCountFlagName)
		if err != nil {
			return err, false
		}
		m.VideoPacketCount = videoPacketCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebRTCClientStatsVideoSentStatsFlags(depth int, m *models.WebRTCClientStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoSentStatsFlagName := fmt.Sprintf("%v.videoSentStats", cmdPrefix)
	if cmd.Flags().Changed(videoSentStatsFlagName) {
		// info: complex object videoSentStats WebRTCVideoSendStats is retrieved outside this Changed() block
	}
	videoSentStatsFlagValue := m.VideoSentStats
	if swag.IsZero(videoSentStatsFlagValue) {
		videoSentStatsFlagValue = &models.WebRTCVideoSendStats{}
	}

	err, videoSentStatsAdded := retrieveModelWebRTCVideoSendStatsFlags(depth+1, videoSentStatsFlagValue, videoSentStatsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoSentStatsAdded
	if videoSentStatsAdded {
		m.VideoSentStats = videoSentStatsFlagValue
	}

	return nil, retAdded
}
