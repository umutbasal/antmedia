// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for IoBuffer

// register flags to command
func registerModelIoBufferFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIoBufferAutoExpand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferAutoShrink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferChar(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferDerived(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferDirect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferDouble(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferFloat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferHexDump(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferInt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferLong(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferMediumInt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferObject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferShort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferUnsigned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferUnsignedInt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferUnsignedMediumInt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIoBufferUnsignedShort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIoBufferAutoExpand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoExpandDescription := ``

	var autoExpandFlagName string
	if cmdPrefix == "" {
		autoExpandFlagName = "autoExpand"
	} else {
		autoExpandFlagName = fmt.Sprintf("%v.autoExpand", cmdPrefix)
	}

	var autoExpandFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoExpandFlagName, autoExpandFlagDefault, autoExpandDescription)

	return nil
}

func registerIoBufferAutoShrink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoShrinkDescription := ``

	var autoShrinkFlagName string
	if cmdPrefix == "" {
		autoShrinkFlagName = "autoShrink"
	} else {
		autoShrinkFlagName = fmt.Sprintf("%v.autoShrink", cmdPrefix)
	}

	var autoShrinkFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoShrinkFlagName, autoShrinkFlagDefault, autoShrinkDescription)

	return nil
}

func registerIoBufferChar(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	charDescription := ``

	var charFlagName string
	if cmdPrefix == "" {
		charFlagName = "char"
	} else {
		charFlagName = fmt.Sprintf("%v.char", cmdPrefix)
	}

	var charFlagDefault string

	_ = cmd.PersistentFlags().String(charFlagName, charFlagDefault, charDescription)

	return nil
}

func registerIoBufferDerived(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	derivedDescription := ``

	var derivedFlagName string
	if cmdPrefix == "" {
		derivedFlagName = "derived"
	} else {
		derivedFlagName = fmt.Sprintf("%v.derived", cmdPrefix)
	}

	var derivedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(derivedFlagName, derivedFlagDefault, derivedDescription)

	return nil
}

func registerIoBufferDirect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	directDescription := ``

	var directFlagName string
	if cmdPrefix == "" {
		directFlagName = "direct"
	} else {
		directFlagName = fmt.Sprintf("%v.direct", cmdPrefix)
	}

	var directFlagDefault bool

	_ = cmd.PersistentFlags().Bool(directFlagName, directFlagDefault, directDescription)

	return nil
}

func registerIoBufferDouble(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	doubleDescription := ``

	var doubleFlagName string
	if cmdPrefix == "" {
		doubleFlagName = "double"
	} else {
		doubleFlagName = fmt.Sprintf("%v.double", cmdPrefix)
	}

	var doubleFlagDefault float64

	_ = cmd.PersistentFlags().Float64(doubleFlagName, doubleFlagDefault, doubleDescription)

	return nil
}

func registerIoBufferFloat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	floatDescription := ``

	var floatFlagName string
	if cmdPrefix == "" {
		floatFlagName = "float"
	} else {
		floatFlagName = fmt.Sprintf("%v.float", cmdPrefix)
	}

	var floatFlagDefault float32

	_ = cmd.PersistentFlags().Float32(floatFlagName, floatFlagDefault, floatDescription)

	return nil
}

func registerIoBufferHexDump(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hexDumpDescription := ``

	var hexDumpFlagName string
	if cmdPrefix == "" {
		hexDumpFlagName = "hexDump"
	} else {
		hexDumpFlagName = fmt.Sprintf("%v.hexDump", cmdPrefix)
	}

	var hexDumpFlagDefault string

	_ = cmd.PersistentFlags().String(hexDumpFlagName, hexDumpFlagDefault, hexDumpDescription)

	return nil
}

func registerIoBufferInt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	intDescription := ``

	var intFlagName string
	if cmdPrefix == "" {
		intFlagName = "int"
	} else {
		intFlagName = fmt.Sprintf("%v.int", cmdPrefix)
	}

	var intFlagDefault int32

	_ = cmd.PersistentFlags().Int32(intFlagName, intFlagDefault, intDescription)

	return nil
}

func registerIoBufferLong(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	longDescription := ``

	var longFlagName string
	if cmdPrefix == "" {
		longFlagName = "long"
	} else {
		longFlagName = fmt.Sprintf("%v.long", cmdPrefix)
	}

	var longFlagDefault int64

	_ = cmd.PersistentFlags().Int64(longFlagName, longFlagDefault, longDescription)

	return nil
}

func registerIoBufferMediumInt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mediumIntDescription := ``

	var mediumIntFlagName string
	if cmdPrefix == "" {
		mediumIntFlagName = "mediumInt"
	} else {
		mediumIntFlagName = fmt.Sprintf("%v.mediumInt", cmdPrefix)
	}

	var mediumIntFlagDefault int32

	_ = cmd.PersistentFlags().Int32(mediumIntFlagName, mediumIntFlagDefault, mediumIntDescription)

	return nil
}

func registerIoBufferObject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: object interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIoBufferReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readOnlyDescription := ``

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "readOnly"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.readOnly", cmdPrefix)
	}

	var readOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readOnlyFlagName, readOnlyFlagDefault, readOnlyDescription)

	return nil
}

func registerIoBufferShort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	shortDescription := ``

	var shortFlagName string
	if cmdPrefix == "" {
		shortFlagName = "short"
	} else {
		shortFlagName = fmt.Sprintf("%v.short", cmdPrefix)
	}

	var shortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(shortFlagName, shortFlagDefault, shortDescription)

	return nil
}

func registerIoBufferUnsigned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unsignedDescription := ``

	var unsignedFlagName string
	if cmdPrefix == "" {
		unsignedFlagName = "unsigned"
	} else {
		unsignedFlagName = fmt.Sprintf("%v.unsigned", cmdPrefix)
	}

	var unsignedFlagDefault int32

	_ = cmd.PersistentFlags().Int32(unsignedFlagName, unsignedFlagDefault, unsignedDescription)

	return nil
}

func registerIoBufferUnsignedInt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unsignedIntDescription := ``

	var unsignedIntFlagName string
	if cmdPrefix == "" {
		unsignedIntFlagName = "unsignedInt"
	} else {
		unsignedIntFlagName = fmt.Sprintf("%v.unsignedInt", cmdPrefix)
	}

	var unsignedIntFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unsignedIntFlagName, unsignedIntFlagDefault, unsignedIntDescription)

	return nil
}

func registerIoBufferUnsignedMediumInt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unsignedMediumIntDescription := ``

	var unsignedMediumIntFlagName string
	if cmdPrefix == "" {
		unsignedMediumIntFlagName = "unsignedMediumInt"
	} else {
		unsignedMediumIntFlagName = fmt.Sprintf("%v.unsignedMediumInt", cmdPrefix)
	}

	var unsignedMediumIntFlagDefault int32

	_ = cmd.PersistentFlags().Int32(unsignedMediumIntFlagName, unsignedMediumIntFlagDefault, unsignedMediumIntDescription)

	return nil
}

func registerIoBufferUnsignedShort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unsignedShortDescription := ``

	var unsignedShortFlagName string
	if cmdPrefix == "" {
		unsignedShortFlagName = "unsignedShort"
	} else {
		unsignedShortFlagName = fmt.Sprintf("%v.unsignedShort", cmdPrefix)
	}

	var unsignedShortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(unsignedShortFlagName, unsignedShortFlagDefault, unsignedShortDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIoBufferFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, autoExpandAdded := retrieveIoBufferAutoExpandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoExpandAdded

	err, autoShrinkAdded := retrieveIoBufferAutoShrinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoShrinkAdded

	err, charAdded := retrieveIoBufferCharFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || charAdded

	err, derivedAdded := retrieveIoBufferDerivedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || derivedAdded

	err, directAdded := retrieveIoBufferDirectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || directAdded

	err, doubleAdded := retrieveIoBufferDoubleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || doubleAdded

	err, floatAdded := retrieveIoBufferFloatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || floatAdded

	err, hexDumpAdded := retrieveIoBufferHexDumpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hexDumpAdded

	err, intAdded := retrieveIoBufferIntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intAdded

	err, longAdded := retrieveIoBufferLongFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || longAdded

	err, mediumIntAdded := retrieveIoBufferMediumIntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mediumIntAdded

	err, objectAdded := retrieveIoBufferObjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || objectAdded

	err, readOnlyAdded := retrieveIoBufferReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, shortAdded := retrieveIoBufferShortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || shortAdded

	err, unsignedAdded := retrieveIoBufferUnsignedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unsignedAdded

	err, unsignedIntAdded := retrieveIoBufferUnsignedIntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unsignedIntAdded

	err, unsignedMediumIntAdded := retrieveIoBufferUnsignedMediumIntFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unsignedMediumIntAdded

	err, unsignedShortAdded := retrieveIoBufferUnsignedShortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unsignedShortAdded

	return nil, retAdded
}

func retrieveIoBufferAutoExpandFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoExpandFlagName := fmt.Sprintf("%v.autoExpand", cmdPrefix)
	if cmd.Flags().Changed(autoExpandFlagName) {

		var autoExpandFlagName string
		if cmdPrefix == "" {
			autoExpandFlagName = "autoExpand"
		} else {
			autoExpandFlagName = fmt.Sprintf("%v.autoExpand", cmdPrefix)
		}

		autoExpandFlagValue, err := cmd.Flags().GetBool(autoExpandFlagName)
		if err != nil {
			return err, false
		}
		m.AutoExpand = autoExpandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferAutoShrinkFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoShrinkFlagName := fmt.Sprintf("%v.autoShrink", cmdPrefix)
	if cmd.Flags().Changed(autoShrinkFlagName) {

		var autoShrinkFlagName string
		if cmdPrefix == "" {
			autoShrinkFlagName = "autoShrink"
		} else {
			autoShrinkFlagName = fmt.Sprintf("%v.autoShrink", cmdPrefix)
		}

		autoShrinkFlagValue, err := cmd.Flags().GetBool(autoShrinkFlagName)
		if err != nil {
			return err, false
		}
		m.AutoShrink = autoShrinkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferCharFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	charFlagName := fmt.Sprintf("%v.char", cmdPrefix)
	if cmd.Flags().Changed(charFlagName) {

		var charFlagName string
		if cmdPrefix == "" {
			charFlagName = "char"
		} else {
			charFlagName = fmt.Sprintf("%v.char", cmdPrefix)
		}

		charFlagValue, err := cmd.Flags().GetString(charFlagName)
		if err != nil {
			return err, false
		}
		m.Char = charFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferDerivedFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	derivedFlagName := fmt.Sprintf("%v.derived", cmdPrefix)
	if cmd.Flags().Changed(derivedFlagName) {

		var derivedFlagName string
		if cmdPrefix == "" {
			derivedFlagName = "derived"
		} else {
			derivedFlagName = fmt.Sprintf("%v.derived", cmdPrefix)
		}

		derivedFlagValue, err := cmd.Flags().GetBool(derivedFlagName)
		if err != nil {
			return err, false
		}
		m.Derived = derivedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferDirectFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	directFlagName := fmt.Sprintf("%v.direct", cmdPrefix)
	if cmd.Flags().Changed(directFlagName) {

		var directFlagName string
		if cmdPrefix == "" {
			directFlagName = "direct"
		} else {
			directFlagName = fmt.Sprintf("%v.direct", cmdPrefix)
		}

		directFlagValue, err := cmd.Flags().GetBool(directFlagName)
		if err != nil {
			return err, false
		}
		m.Direct = directFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferDoubleFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	doubleFlagName := fmt.Sprintf("%v.double", cmdPrefix)
	if cmd.Flags().Changed(doubleFlagName) {

		var doubleFlagName string
		if cmdPrefix == "" {
			doubleFlagName = "double"
		} else {
			doubleFlagName = fmt.Sprintf("%v.double", cmdPrefix)
		}

		doubleFlagValue, err := cmd.Flags().GetFloat64(doubleFlagName)
		if err != nil {
			return err, false
		}
		m.Double = doubleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferFloatFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	floatFlagName := fmt.Sprintf("%v.float", cmdPrefix)
	if cmd.Flags().Changed(floatFlagName) {

		var floatFlagName string
		if cmdPrefix == "" {
			floatFlagName = "float"
		} else {
			floatFlagName = fmt.Sprintf("%v.float", cmdPrefix)
		}

		floatFlagValue, err := cmd.Flags().GetFloat32(floatFlagName)
		if err != nil {
			return err, false
		}
		m.Float = floatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferHexDumpFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hexDumpFlagName := fmt.Sprintf("%v.hexDump", cmdPrefix)
	if cmd.Flags().Changed(hexDumpFlagName) {

		var hexDumpFlagName string
		if cmdPrefix == "" {
			hexDumpFlagName = "hexDump"
		} else {
			hexDumpFlagName = fmt.Sprintf("%v.hexDump", cmdPrefix)
		}

		hexDumpFlagValue, err := cmd.Flags().GetString(hexDumpFlagName)
		if err != nil {
			return err, false
		}
		m.HexDump = hexDumpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferIntFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	intFlagName := fmt.Sprintf("%v.int", cmdPrefix)
	if cmd.Flags().Changed(intFlagName) {

		var intFlagName string
		if cmdPrefix == "" {
			intFlagName = "int"
		} else {
			intFlagName = fmt.Sprintf("%v.int", cmdPrefix)
		}

		intFlagValue, err := cmd.Flags().GetInt32(intFlagName)
		if err != nil {
			return err, false
		}
		m.Int = intFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferLongFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	longFlagName := fmt.Sprintf("%v.long", cmdPrefix)
	if cmd.Flags().Changed(longFlagName) {

		var longFlagName string
		if cmdPrefix == "" {
			longFlagName = "long"
		} else {
			longFlagName = fmt.Sprintf("%v.long", cmdPrefix)
		}

		longFlagValue, err := cmd.Flags().GetInt64(longFlagName)
		if err != nil {
			return err, false
		}
		m.Long = longFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferMediumIntFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mediumIntFlagName := fmt.Sprintf("%v.mediumInt", cmdPrefix)
	if cmd.Flags().Changed(mediumIntFlagName) {

		var mediumIntFlagName string
		if cmdPrefix == "" {
			mediumIntFlagName = "mediumInt"
		} else {
			mediumIntFlagName = fmt.Sprintf("%v.mediumInt", cmdPrefix)
		}

		mediumIntFlagValue, err := cmd.Flags().GetInt32(mediumIntFlagName)
		if err != nil {
			return err, false
		}
		m.MediumInt = mediumIntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferObjectFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	objectFlagName := fmt.Sprintf("%v.object", cmdPrefix)
	if cmd.Flags().Changed(objectFlagName) {
		// warning: object map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIoBufferReadOnlyFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyFlagName := fmt.Sprintf("%v.readOnly", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {

		var readOnlyFlagName string
		if cmdPrefix == "" {
			readOnlyFlagName = "readOnly"
		} else {
			readOnlyFlagName = fmt.Sprintf("%v.readOnly", cmdPrefix)
		}

		readOnlyFlagValue, err := cmd.Flags().GetBool(readOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = readOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferShortFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	shortFlagName := fmt.Sprintf("%v.short", cmdPrefix)
	if cmd.Flags().Changed(shortFlagName) {

		var shortFlagName string
		if cmdPrefix == "" {
			shortFlagName = "short"
		} else {
			shortFlagName = fmt.Sprintf("%v.short", cmdPrefix)
		}

		shortFlagValue, err := cmd.Flags().GetInt32(shortFlagName)
		if err != nil {
			return err, false
		}
		m.Short = shortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferUnsignedFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unsignedFlagName := fmt.Sprintf("%v.unsigned", cmdPrefix)
	if cmd.Flags().Changed(unsignedFlagName) {

		var unsignedFlagName string
		if cmdPrefix == "" {
			unsignedFlagName = "unsigned"
		} else {
			unsignedFlagName = fmt.Sprintf("%v.unsigned", cmdPrefix)
		}

		unsignedFlagValue, err := cmd.Flags().GetInt32(unsignedFlagName)
		if err != nil {
			return err, false
		}
		m.Unsigned = unsignedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferUnsignedIntFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unsignedIntFlagName := fmt.Sprintf("%v.unsignedInt", cmdPrefix)
	if cmd.Flags().Changed(unsignedIntFlagName) {

		var unsignedIntFlagName string
		if cmdPrefix == "" {
			unsignedIntFlagName = "unsignedInt"
		} else {
			unsignedIntFlagName = fmt.Sprintf("%v.unsignedInt", cmdPrefix)
		}

		unsignedIntFlagValue, err := cmd.Flags().GetInt64(unsignedIntFlagName)
		if err != nil {
			return err, false
		}
		m.UnsignedInt = unsignedIntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferUnsignedMediumIntFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unsignedMediumIntFlagName := fmt.Sprintf("%v.unsignedMediumInt", cmdPrefix)
	if cmd.Flags().Changed(unsignedMediumIntFlagName) {

		var unsignedMediumIntFlagName string
		if cmdPrefix == "" {
			unsignedMediumIntFlagName = "unsignedMediumInt"
		} else {
			unsignedMediumIntFlagName = fmt.Sprintf("%v.unsignedMediumInt", cmdPrefix)
		}

		unsignedMediumIntFlagValue, err := cmd.Flags().GetInt32(unsignedMediumIntFlagName)
		if err != nil {
			return err, false
		}
		m.UnsignedMediumInt = unsignedMediumIntFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIoBufferUnsignedShortFlags(depth int, m *models.IoBuffer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unsignedShortFlagName := fmt.Sprintf("%v.unsignedShort", cmdPrefix)
	if cmd.Flags().Changed(unsignedShortFlagName) {

		var unsignedShortFlagName string
		if cmdPrefix == "" {
			unsignedShortFlagName = "unsignedShort"
		} else {
			unsignedShortFlagName = fmt.Sprintf("%v.unsignedShort", cmdPrefix)
		}

		unsignedShortFlagValue, err := cmd.Flags().GetInt32(unsignedShortFlagName)
		if err != nil {
			return err, false
		}
		m.UnsignedShort = unsignedShortFlagValue

		retAdded = true
	}

	return nil, retAdded
}
