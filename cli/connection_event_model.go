// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for ConnectionEvent

// register flags to command
func registerModelConnectionEventFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConnectionEventEventType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectionEventTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConnectionEventEventType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eventTypeDescription := `the type of the event`

	var eventTypeFlagName string
	if cmdPrefix == "" {
		eventTypeFlagName = "eventType"
	} else {
		eventTypeFlagName = fmt.Sprintf("%v.eventType", cmdPrefix)
	}

	var eventTypeFlagDefault string

	_ = cmd.PersistentFlags().String(eventTypeFlagName, eventTypeFlagDefault, eventTypeDescription)

	return nil
}

func registerConnectionEventTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timestampDescription := `the timestamp of the event`

	var timestampFlagName string
	if cmdPrefix == "" {
		timestampFlagName = "timestamp"
	} else {
		timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	var timestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timestampFlagName, timestampFlagDefault, timestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConnectionEventFlags(depth int, m *models.ConnectionEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, eventTypeAdded := retrieveConnectionEventEventTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eventTypeAdded

	err, timestampAdded := retrieveConnectionEventTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	return nil, retAdded
}

func retrieveConnectionEventEventTypeFlags(depth int, m *models.ConnectionEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eventTypeFlagName := fmt.Sprintf("%v.eventType", cmdPrefix)
	if cmd.Flags().Changed(eventTypeFlagName) {

		var eventTypeFlagName string
		if cmdPrefix == "" {
			eventTypeFlagName = "eventType"
		} else {
			eventTypeFlagName = fmt.Sprintf("%v.eventType", cmdPrefix)
		}

		eventTypeFlagValue, err := cmd.Flags().GetString(eventTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EventType = eventTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectionEventTimestampFlags(depth int, m *models.ConnectionEvent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		var timestampFlagName string
		if cmdPrefix == "" {
			timestampFlagName = "timestamp"
		} else {
			timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		timestampFlagValue, err := cmd.Flags().GetInt64(timestampFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamp = timestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}
