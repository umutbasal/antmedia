// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Licence

// register flags to command
func registerModelLicenceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLicenceEndDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicenceLicenceCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicenceLicenceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicenceOwner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicenceStartDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicenceStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLicenceType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLicenceEndDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endDateDescription := ``

	var endDateFlagName string
	if cmdPrefix == "" {
		endDateFlagName = "endDate"
	} else {
		endDateFlagName = fmt.Sprintf("%v.endDate", cmdPrefix)
	}

	var endDateFlagDefault string

	_ = cmd.PersistentFlags().String(endDateFlagName, endDateFlagDefault, endDateDescription)

	return nil
}

func registerLicenceLicenceCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	licenceCountDescription := ``

	var licenceCountFlagName string
	if cmdPrefix == "" {
		licenceCountFlagName = "licenceCount"
	} else {
		licenceCountFlagName = fmt.Sprintf("%v.licenceCount", cmdPrefix)
	}

	var licenceCountFlagDefault string

	_ = cmd.PersistentFlags().String(licenceCountFlagName, licenceCountFlagDefault, licenceCountDescription)

	return nil
}

func registerLicenceLicenceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	licenceIdDescription := ``

	var licenceIdFlagName string
	if cmdPrefix == "" {
		licenceIdFlagName = "licenceId"
	} else {
		licenceIdFlagName = fmt.Sprintf("%v.licenceId", cmdPrefix)
	}

	var licenceIdFlagDefault string

	_ = cmd.PersistentFlags().String(licenceIdFlagName, licenceIdFlagDefault, licenceIdDescription)

	return nil
}

func registerLicenceOwner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerDescription := ``

	var ownerFlagName string
	if cmdPrefix == "" {
		ownerFlagName = "owner"
	} else {
		ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
	}

	var ownerFlagDefault string

	_ = cmd.PersistentFlags().String(ownerFlagName, ownerFlagDefault, ownerDescription)

	return nil
}

func registerLicenceStartDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDateDescription := ``

	var startDateFlagName string
	if cmdPrefix == "" {
		startDateFlagName = "startDate"
	} else {
		startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
	}

	var startDateFlagDefault string

	_ = cmd.PersistentFlags().String(startDateFlagName, startDateFlagDefault, startDateDescription)

	return nil
}

func registerLicenceStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerLicenceType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLicenceFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endDateAdded := retrieveLicenceEndDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endDateAdded

	err, licenceCountAdded := retrieveLicenceLicenceCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || licenceCountAdded

	err, licenceIdAdded := retrieveLicenceLicenceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || licenceIdAdded

	err, ownerAdded := retrieveLicenceOwnerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerAdded

	err, startDateAdded := retrieveLicenceStartDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startDateAdded

	err, statusAdded := retrieveLicenceStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, typeAdded := retrieveLicenceTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveLicenceEndDateFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endDateFlagName := fmt.Sprintf("%v.endDate", cmdPrefix)
	if cmd.Flags().Changed(endDateFlagName) {

		var endDateFlagName string
		if cmdPrefix == "" {
			endDateFlagName = "endDate"
		} else {
			endDateFlagName = fmt.Sprintf("%v.endDate", cmdPrefix)
		}

		endDateFlagValue, err := cmd.Flags().GetString(endDateFlagName)
		if err != nil {
			return err, false
		}
		m.EndDate = endDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicenceLicenceCountFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	licenceCountFlagName := fmt.Sprintf("%v.licenceCount", cmdPrefix)
	if cmd.Flags().Changed(licenceCountFlagName) {

		var licenceCountFlagName string
		if cmdPrefix == "" {
			licenceCountFlagName = "licenceCount"
		} else {
			licenceCountFlagName = fmt.Sprintf("%v.licenceCount", cmdPrefix)
		}

		licenceCountFlagValue, err := cmd.Flags().GetString(licenceCountFlagName)
		if err != nil {
			return err, false
		}
		m.LicenceCount = licenceCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicenceLicenceIDFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	licenceIdFlagName := fmt.Sprintf("%v.licenceId", cmdPrefix)
	if cmd.Flags().Changed(licenceIdFlagName) {

		var licenceIdFlagName string
		if cmdPrefix == "" {
			licenceIdFlagName = "licenceId"
		} else {
			licenceIdFlagName = fmt.Sprintf("%v.licenceId", cmdPrefix)
		}

		licenceIdFlagValue, err := cmd.Flags().GetString(licenceIdFlagName)
		if err != nil {
			return err, false
		}
		m.LicenceID = licenceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicenceOwnerFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerFlagName := fmt.Sprintf("%v.owner", cmdPrefix)
	if cmd.Flags().Changed(ownerFlagName) {

		var ownerFlagName string
		if cmdPrefix == "" {
			ownerFlagName = "owner"
		} else {
			ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
		}

		ownerFlagValue, err := cmd.Flags().GetString(ownerFlagName)
		if err != nil {
			return err, false
		}
		m.Owner = ownerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicenceStartDateFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startDateFlagName := fmt.Sprintf("%v.startDate", cmdPrefix)
	if cmd.Flags().Changed(startDateFlagName) {

		var startDateFlagName string
		if cmdPrefix == "" {
			startDateFlagName = "startDate"
		} else {
			startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
		}

		startDateFlagValue, err := cmd.Flags().GetString(startDateFlagName)
		if err != nil {
			return err, false
		}
		m.StartDate = startDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicenceStatusFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLicenceTypeFlags(depth int, m *models.Licence, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
