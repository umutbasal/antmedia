// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Version

// register flags to command
func registerModelVersionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVersionBuildNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionVersionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionVersionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVersionBuildNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buildNumberDescription := `Build number(timestamp) of the software.`

	var buildNumberFlagName string
	if cmdPrefix == "" {
		buildNumberFlagName = "buildNumber"
	} else {
		buildNumberFlagName = fmt.Sprintf("%v.buildNumber", cmdPrefix)
	}

	var buildNumberFlagDefault string

	_ = cmd.PersistentFlags().String(buildNumberFlagName, buildNumberFlagDefault, buildNumberDescription)

	return nil
}

func registerVersionVersionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionNameDescription := `Version of the software`

	var versionNameFlagName string
	if cmdPrefix == "" {
		versionNameFlagName = "versionName"
	} else {
		versionNameFlagName = fmt.Sprintf("%v.versionName", cmdPrefix)
	}

	var versionNameFlagDefault string

	_ = cmd.PersistentFlags().String(versionNameFlagName, versionNameFlagDefault, versionNameDescription)

	return nil
}

func registerVersionVersionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionTypeDescription := `Version type of the software (Community or Enterprise)`

	var versionTypeFlagName string
	if cmdPrefix == "" {
		versionTypeFlagName = "versionType"
	} else {
		versionTypeFlagName = fmt.Sprintf("%v.versionType", cmdPrefix)
	}

	var versionTypeFlagDefault string

	_ = cmd.PersistentFlags().String(versionTypeFlagName, versionTypeFlagDefault, versionTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVersionFlags(depth int, m *models.Version, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, buildNumberAdded := retrieveVersionBuildNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildNumberAdded

	err, versionNameAdded := retrieveVersionVersionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionNameAdded

	err, versionTypeAdded := retrieveVersionVersionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionTypeAdded

	return nil, retAdded
}

func retrieveVersionBuildNumberFlags(depth int, m *models.Version, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buildNumberFlagName := fmt.Sprintf("%v.buildNumber", cmdPrefix)
	if cmd.Flags().Changed(buildNumberFlagName) {

		var buildNumberFlagName string
		if cmdPrefix == "" {
			buildNumberFlagName = "buildNumber"
		} else {
			buildNumberFlagName = fmt.Sprintf("%v.buildNumber", cmdPrefix)
		}

		buildNumberFlagValue, err := cmd.Flags().GetString(buildNumberFlagName)
		if err != nil {
			return err, false
		}
		m.BuildNumber = buildNumberFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionVersionNameFlags(depth int, m *models.Version, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionNameFlagName := fmt.Sprintf("%v.versionName", cmdPrefix)
	if cmd.Flags().Changed(versionNameFlagName) {

		var versionNameFlagName string
		if cmdPrefix == "" {
			versionNameFlagName = "versionName"
		} else {
			versionNameFlagName = fmt.Sprintf("%v.versionName", cmdPrefix)
		}

		versionNameFlagValue, err := cmd.Flags().GetString(versionNameFlagName)
		if err != nil {
			return err, false
		}
		m.VersionName = versionNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionVersionTypeFlags(depth int, m *models.Version, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionTypeFlagName := fmt.Sprintf("%v.versionType", cmdPrefix)
	if cmd.Flags().Changed(versionTypeFlagName) {

		var versionTypeFlagName string
		if cmdPrefix == "" {
			versionTypeFlagName = "versionType"
		} else {
			versionTypeFlagName = fmt.Sprintf("%v.versionType", cmdPrefix)
		}

		versionTypeFlagValue, err := cmd.Flags().GetString(versionTypeFlagName)
		if err != nil {
			return err, false
		}
		m.VersionType = versionTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
