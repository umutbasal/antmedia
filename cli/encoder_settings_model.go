// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for EncoderSettings

// register flags to command
func registerModelEncoderSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEncoderSettingsAudioBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEncoderSettingsForceEncode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEncoderSettingsHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEncoderSettingsVideoBitrate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEncoderSettingsAudioBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioBitrateDescription := ``

	var audioBitrateFlagName string
	if cmdPrefix == "" {
		audioBitrateFlagName = "audioBitrate"
	} else {
		audioBitrateFlagName = fmt.Sprintf("%v.audioBitrate", cmdPrefix)
	}

	var audioBitrateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(audioBitrateFlagName, audioBitrateFlagDefault, audioBitrateDescription)

	return nil
}

func registerEncoderSettingsForceEncode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceEncodeDescription := ``

	var forceEncodeFlagName string
	if cmdPrefix == "" {
		forceEncodeFlagName = "forceEncode"
	} else {
		forceEncodeFlagName = fmt.Sprintf("%v.forceEncode", cmdPrefix)
	}

	var forceEncodeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceEncodeFlagName, forceEncodeFlagDefault, forceEncodeDescription)

	return nil
}

func registerEncoderSettingsHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	heightDescription := ``

	var heightFlagName string
	if cmdPrefix == "" {
		heightFlagName = "height"
	} else {
		heightFlagName = fmt.Sprintf("%v.height", cmdPrefix)
	}

	var heightFlagDefault int32

	_ = cmd.PersistentFlags().Int32(heightFlagName, heightFlagDefault, heightDescription)

	return nil
}

func registerEncoderSettingsVideoBitrate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoBitrateDescription := ``

	var videoBitrateFlagName string
	if cmdPrefix == "" {
		videoBitrateFlagName = "videoBitrate"
	} else {
		videoBitrateFlagName = fmt.Sprintf("%v.videoBitrate", cmdPrefix)
	}

	var videoBitrateFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoBitrateFlagName, videoBitrateFlagDefault, videoBitrateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEncoderSettingsFlags(depth int, m *models.EncoderSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, audioBitrateAdded := retrieveEncoderSettingsAudioBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioBitrateAdded

	err, forceEncodeAdded := retrieveEncoderSettingsForceEncodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceEncodeAdded

	err, heightAdded := retrieveEncoderSettingsHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || heightAdded

	err, videoBitrateAdded := retrieveEncoderSettingsVideoBitrateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoBitrateAdded

	return nil, retAdded
}

func retrieveEncoderSettingsAudioBitrateFlags(depth int, m *models.EncoderSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioBitrateFlagName := fmt.Sprintf("%v.audioBitrate", cmdPrefix)
	if cmd.Flags().Changed(audioBitrateFlagName) {

		var audioBitrateFlagName string
		if cmdPrefix == "" {
			audioBitrateFlagName = "audioBitrate"
		} else {
			audioBitrateFlagName = fmt.Sprintf("%v.audioBitrate", cmdPrefix)
		}

		audioBitrateFlagValue, err := cmd.Flags().GetInt32(audioBitrateFlagName)
		if err != nil {
			return err, false
		}
		m.AudioBitrate = audioBitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEncoderSettingsForceEncodeFlags(depth int, m *models.EncoderSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceEncodeFlagName := fmt.Sprintf("%v.forceEncode", cmdPrefix)
	if cmd.Flags().Changed(forceEncodeFlagName) {

		var forceEncodeFlagName string
		if cmdPrefix == "" {
			forceEncodeFlagName = "forceEncode"
		} else {
			forceEncodeFlagName = fmt.Sprintf("%v.forceEncode", cmdPrefix)
		}

		forceEncodeFlagValue, err := cmd.Flags().GetBool(forceEncodeFlagName)
		if err != nil {
			return err, false
		}
		m.ForceEncode = forceEncodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEncoderSettingsHeightFlags(depth int, m *models.EncoderSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	heightFlagName := fmt.Sprintf("%v.height", cmdPrefix)
	if cmd.Flags().Changed(heightFlagName) {

		var heightFlagName string
		if cmdPrefix == "" {
			heightFlagName = "height"
		} else {
			heightFlagName = fmt.Sprintf("%v.height", cmdPrefix)
		}

		heightFlagValue, err := cmd.Flags().GetInt32(heightFlagName)
		if err != nil {
			return err, false
		}
		m.Height = heightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEncoderSettingsVideoBitrateFlags(depth int, m *models.EncoderSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoBitrateFlagName := fmt.Sprintf("%v.videoBitrate", cmdPrefix)
	if cmd.Flags().Changed(videoBitrateFlagName) {

		var videoBitrateFlagName string
		if cmdPrefix == "" {
			videoBitrateFlagName = "videoBitrate"
		} else {
			videoBitrateFlagName = fmt.Sprintf("%v.videoBitrate", cmdPrefix)
		}

		videoBitrateFlagValue, err := cmd.Flags().GetInt32(videoBitrateFlagName)
		if err != nil {
			return err, false
		}
		m.VideoBitrate = videoBitrateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
