// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/management_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationManagementRestServiceCreateApplicationCmd returns a cmd to handle operation createApplication
func makeOperationManagementRestServiceCreateApplicationCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createApplication",
		Short: ``,
		RunE:  runOperationManagementRestServiceCreateApplication,
	}

	if err := registerOperationManagementRestServiceCreateApplicationParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationManagementRestServiceCreateApplication uses cmd flags to call endpoint api
func runOperationManagementRestServiceCreateApplication(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := management_rest_service.NewCreateApplicationParams()
	if err, _ := retrieveOperationManagementRestServiceCreateApplicationAppNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationManagementRestServiceCreateApplicationBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationManagementRestServiceCreateApplicationResult(appCli.ManagementRestService.CreateApplication(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationManagementRestServiceCreateApplicationParamFlags registers all flags needed to fill params
func registerOperationManagementRestServiceCreateApplicationParamFlags(cmd *cobra.Command) error {
	if err := registerOperationManagementRestServiceCreateApplicationAppNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationManagementRestServiceCreateApplicationBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationManagementRestServiceCreateApplicationAppNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	appNameDescription := `Required. Name for the new application`

	var appNameFlagName string
	if cmdPrefix == "" {
		appNameFlagName = "appName"
	} else {
		appNameFlagName = fmt.Sprintf("%v.appName", cmdPrefix)
	}

	var appNameFlagDefault string

	_ = cmd.PersistentFlags().String(appNameFlagName, appNameFlagDefault, appNameDescription)

	return nil
}
func registerOperationManagementRestServiceCreateApplicationBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {
	// warning: go type models.InputStream is not supported by go-swagger cli yet.
	return nil
}

func retrieveOperationManagementRestServiceCreateApplicationAppNameFlag(m *management_rest_service.CreateApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("appName") {

		var appNameFlagName string
		if cmdPrefix == "" {
			appNameFlagName = "appName"
		} else {
			appNameFlagName = fmt.Sprintf("%v.appName", cmdPrefix)
		}

		appNameFlagValue, err := cmd.Flags().GetString(appNameFlagName)
		if err != nil {
			return err, false
		}
		m.AppName = appNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationManagementRestServiceCreateApplicationBodyFlag(m *management_rest_service.CreateApplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// warning: body map type models.InputStream is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

// parseOperationManagementRestServiceCreateApplicationResult parses request result and return the string content
func parseOperationManagementRestServiceCreateApplicationResult(resp0 *management_rest_service.CreateApplicationOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*management_rest_service.CreateApplicationOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
