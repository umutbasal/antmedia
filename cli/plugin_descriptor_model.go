// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for PluginDescriptor

// register flags to command
func registerModelPluginDescriptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginDescriptorMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDescriptorMethodReturnType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDescriptorPluginName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDescriptorPluginType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDescriptorProperties(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginDescriptorMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodDescription := ``

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	return nil
}

func registerPluginDescriptorMethodReturnType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodReturnTypeDescription := ``

	var methodReturnTypeFlagName string
	if cmdPrefix == "" {
		methodReturnTypeFlagName = "methodReturnType"
	} else {
		methodReturnTypeFlagName = fmt.Sprintf("%v.methodReturnType", cmdPrefix)
	}

	var methodReturnTypeFlagDefault string

	_ = cmd.PersistentFlags().String(methodReturnTypeFlagName, methodReturnTypeFlagDefault, methodReturnTypeDescription)

	return nil
}

func registerPluginDescriptorPluginName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pluginNameDescription := ``

	var pluginNameFlagName string
	if cmdPrefix == "" {
		pluginNameFlagName = "pluginName"
	} else {
		pluginNameFlagName = fmt.Sprintf("%v.pluginName", cmdPrefix)
	}

	var pluginNameFlagDefault string

	_ = cmd.PersistentFlags().String(pluginNameFlagName, pluginNameFlagDefault, pluginNameDescription)

	return nil
}

func registerPluginDescriptorPluginType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pluginTypeDescription := ``

	var pluginTypeFlagName string
	if cmdPrefix == "" {
		pluginTypeFlagName = "pluginType"
	} else {
		pluginTypeFlagName = fmt.Sprintf("%v.pluginType", cmdPrefix)
	}

	var pluginTypeFlagDefault string

	_ = cmd.PersistentFlags().String(pluginTypeFlagName, pluginTypeFlagDefault, pluginTypeDescription)

	return nil
}

func registerPluginDescriptorProperties(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: properties map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginDescriptorFlags(depth int, m *models.PluginDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, methodAdded := retrievePluginDescriptorMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodAdded

	err, methodReturnTypeAdded := retrievePluginDescriptorMethodReturnTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodReturnTypeAdded

	err, pluginNameAdded := retrievePluginDescriptorPluginNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginNameAdded

	err, pluginTypeAdded := retrievePluginDescriptorPluginTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginTypeAdded

	err, propertiesAdded := retrievePluginDescriptorPropertiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || propertiesAdded

	return nil, retAdded
}

func retrievePluginDescriptorMethodFlags(depth int, m *models.PluginDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFlagName := fmt.Sprintf("%v.method", cmdPrefix)
	if cmd.Flags().Changed(methodFlagName) {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDescriptorMethodReturnTypeFlags(depth int, m *models.PluginDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodReturnTypeFlagName := fmt.Sprintf("%v.methodReturnType", cmdPrefix)
	if cmd.Flags().Changed(methodReturnTypeFlagName) {

		var methodReturnTypeFlagName string
		if cmdPrefix == "" {
			methodReturnTypeFlagName = "methodReturnType"
		} else {
			methodReturnTypeFlagName = fmt.Sprintf("%v.methodReturnType", cmdPrefix)
		}

		methodReturnTypeFlagValue, err := cmd.Flags().GetString(methodReturnTypeFlagName)
		if err != nil {
			return err, false
		}
		m.MethodReturnType = methodReturnTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDescriptorPluginNameFlags(depth int, m *models.PluginDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pluginNameFlagName := fmt.Sprintf("%v.pluginName", cmdPrefix)
	if cmd.Flags().Changed(pluginNameFlagName) {

		var pluginNameFlagName string
		if cmdPrefix == "" {
			pluginNameFlagName = "pluginName"
		} else {
			pluginNameFlagName = fmt.Sprintf("%v.pluginName", cmdPrefix)
		}

		pluginNameFlagValue, err := cmd.Flags().GetString(pluginNameFlagName)
		if err != nil {
			return err, false
		}
		m.PluginName = pluginNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDescriptorPluginTypeFlags(depth int, m *models.PluginDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pluginTypeFlagName := fmt.Sprintf("%v.pluginType", cmdPrefix)
	if cmd.Flags().Changed(pluginTypeFlagName) {

		var pluginTypeFlagName string
		if cmdPrefix == "" {
			pluginTypeFlagName = "pluginType"
		} else {
			pluginTypeFlagName = fmt.Sprintf("%v.pluginType", cmdPrefix)
		}

		pluginTypeFlagValue, err := cmd.Flags().GetString(pluginTypeFlagName)
		if err != nil {
			return err, false
		}
		m.PluginType = pluginTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDescriptorPropertiesFlags(depth int, m *models.PluginDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	propertiesFlagName := fmt.Sprintf("%v.properties", cmdPrefix)
	if cmd.Flags().Changed(propertiesFlagName) {
		// warning: properties map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
