// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for MuxAdaptor

// register flags to command
func registerModelMuxAdaptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMuxAdaptorAbsoluteTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorAppSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorAppending(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorAudioCodecParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorAudioStreamIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorAudioTimeBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorAvc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorBroadcast(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorBroadcastStream(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorBufferQueue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorBufferTimeMs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorBuffering(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorDashMuxer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorDataChannelWebHookURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorDataStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorDeleteDASHFilesOnExit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorEnableAudio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorEnableVideo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorEncoderSettingsList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorEndpointStatusUpdateMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorFileConsumer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorInputQueueSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorIsHealthCheckStartedMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorLastFrameTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorMuxerList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorObjectDetectionEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorPacketTimeList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorPreviewCreatePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorPreviewHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorPreviewOverwrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorRecording(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorStopRequestExist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorStorageClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorStreamHandler(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorStreamSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorVertx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorVideoCodecParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorVideoStreamIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorVideoTimeBase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMuxAdaptorWebRTCEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorAbsoluteTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	absoluteTimeMsDescription := ``

	var absoluteTimeMsFlagName string
	if cmdPrefix == "" {
		absoluteTimeMsFlagName = "absoluteTimeMs"
	} else {
		absoluteTimeMsFlagName = fmt.Sprintf("%v.absoluteTimeMs", cmdPrefix)
	}

	var absoluteTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(absoluteTimeMsFlagName, absoluteTimeMsFlagDefault, absoluteTimeMsDescription)

	return nil
}

func registerMuxAdaptorAppSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var appSettingsFlagName string
	if cmdPrefix == "" {
		appSettingsFlagName = "appSettings"
	} else {
		appSettingsFlagName = fmt.Sprintf("%v.appSettings", cmdPrefix)
	}

	if err := registerModelAppSettingsFlags(depth+1, appSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorAppending(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	appendingDescription := ``

	var appendingFlagName string
	if cmdPrefix == "" {
		appendingFlagName = "appending"
	} else {
		appendingFlagName = fmt.Sprintf("%v.appending", cmdPrefix)
	}

	var appendingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(appendingFlagName, appendingFlagDefault, appendingDescription)

	return nil
}

func registerMuxAdaptorAudioCodecParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var audioCodecParametersFlagName string
	if cmdPrefix == "" {
		audioCodecParametersFlagName = "audioCodecParameters"
	} else {
		audioCodecParametersFlagName = fmt.Sprintf("%v.audioCodecParameters", cmdPrefix)
	}

	if err := registerModelAVCodecParametersFlags(depth+1, audioCodecParametersFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorAudioStreamIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	audioStreamIndexDescription := ``

	var audioStreamIndexFlagName string
	if cmdPrefix == "" {
		audioStreamIndexFlagName = "audioStreamIndex"
	} else {
		audioStreamIndexFlagName = fmt.Sprintf("%v.audioStreamIndex", cmdPrefix)
	}

	var audioStreamIndexFlagDefault int32

	_ = cmd.PersistentFlags().Int32(audioStreamIndexFlagName, audioStreamIndexFlagDefault, audioStreamIndexDescription)

	return nil
}

func registerMuxAdaptorAudioTimeBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var audioTimeBaseFlagName string
	if cmdPrefix == "" {
		audioTimeBaseFlagName = "audioTimeBase"
	} else {
		audioTimeBaseFlagName = fmt.Sprintf("%v.audioTimeBase", cmdPrefix)
	}

	if err := registerModelAVRationalFlags(depth+1, audioTimeBaseFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorAvc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	avcDescription := ``

	var avcFlagName string
	if cmdPrefix == "" {
		avcFlagName = "avc"
	} else {
		avcFlagName = fmt.Sprintf("%v.avc", cmdPrefix)
	}

	var avcFlagDefault bool

	_ = cmd.PersistentFlags().Bool(avcFlagName, avcFlagDefault, avcDescription)

	return nil
}

func registerMuxAdaptorBroadcast(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var broadcastFlagName string
	if cmdPrefix == "" {
		broadcastFlagName = "broadcast"
	} else {
		broadcastFlagName = fmt.Sprintf("%v.broadcast", cmdPrefix)
	}

	if err := registerModelBroadcastFlags(depth+1, broadcastFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorBroadcastStream(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var broadcastStreamFlagName string
	if cmdPrefix == "" {
		broadcastStreamFlagName = "broadcastStream"
	} else {
		broadcastStreamFlagName = fmt.Sprintf("%v.broadcastStream", cmdPrefix)
	}

	if err := registerModelClientBroadcastStreamFlags(depth+1, broadcastStreamFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorBufferQueue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: bufferQueue []*IStreamPacket array type is not supported by go-swagger cli yet

	return nil
}

func registerMuxAdaptorBufferTimeMs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bufferTimeMsDescription := ``

	var bufferTimeMsFlagName string
	if cmdPrefix == "" {
		bufferTimeMsFlagName = "bufferTimeMs"
	} else {
		bufferTimeMsFlagName = fmt.Sprintf("%v.bufferTimeMs", cmdPrefix)
	}

	var bufferTimeMsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(bufferTimeMsFlagName, bufferTimeMsFlagDefault, bufferTimeMsDescription)

	return nil
}

func registerMuxAdaptorBuffering(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bufferingDescription := ``

	var bufferingFlagName string
	if cmdPrefix == "" {
		bufferingFlagName = "buffering"
	} else {
		bufferingFlagName = fmt.Sprintf("%v.buffering", cmdPrefix)
	}

	var bufferingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bufferingFlagName, bufferingFlagDefault, bufferingDescription)

	return nil
}

func registerMuxAdaptorDashMuxer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dashMuxerFlagName string
	if cmdPrefix == "" {
		dashMuxerFlagName = "dashMuxer"
	} else {
		dashMuxerFlagName = fmt.Sprintf("%v.dashMuxer", cmdPrefix)
	}

	if err := registerModelMuxerFlags(depth+1, dashMuxerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorDataChannelWebHookURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataChannelWebHookUrlDescription := ``

	var dataChannelWebHookUrlFlagName string
	if cmdPrefix == "" {
		dataChannelWebHookUrlFlagName = "dataChannelWebHookURL"
	} else {
		dataChannelWebHookUrlFlagName = fmt.Sprintf("%v.dataChannelWebHookURL", cmdPrefix)
	}

	var dataChannelWebHookUrlFlagDefault string

	_ = cmd.PersistentFlags().String(dataChannelWebHookUrlFlagName, dataChannelWebHookUrlFlagDefault, dataChannelWebHookUrlDescription)

	return nil
}

func registerMuxAdaptorDataStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataStoreFlagName string
	if cmdPrefix == "" {
		dataStoreFlagName = "dataStore"
	} else {
		dataStoreFlagName = fmt.Sprintf("%v.dataStore", cmdPrefix)
	}

	if err := registerModelDataStoreFlags(depth+1, dataStoreFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorDeleteDASHFilesOnExit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deleteDASHFilesOnExitDescription := ``

	var deleteDASHFilesOnExitFlagName string
	if cmdPrefix == "" {
		deleteDASHFilesOnExitFlagName = "deleteDASHFilesOnExit"
	} else {
		deleteDASHFilesOnExitFlagName = fmt.Sprintf("%v.deleteDASHFilesOnExit", cmdPrefix)
	}

	var deleteDASHFilesOnExitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deleteDASHFilesOnExitFlagName, deleteDASHFilesOnExitFlagDefault, deleteDASHFilesOnExitDescription)

	return nil
}

func registerMuxAdaptorEnableAudio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableAudioDescription := ``

	var enableAudioFlagName string
	if cmdPrefix == "" {
		enableAudioFlagName = "enableAudio"
	} else {
		enableAudioFlagName = fmt.Sprintf("%v.enableAudio", cmdPrefix)
	}

	var enableAudioFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableAudioFlagName, enableAudioFlagDefault, enableAudioDescription)

	return nil
}

func registerMuxAdaptorEnableVideo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableVideoDescription := ``

	var enableVideoFlagName string
	if cmdPrefix == "" {
		enableVideoFlagName = "enableVideo"
	} else {
		enableVideoFlagName = fmt.Sprintf("%v.enableVideo", cmdPrefix)
	}

	var enableVideoFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableVideoFlagName, enableVideoFlagDefault, enableVideoDescription)

	return nil
}

func registerMuxAdaptorEncoderSettingsList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: encoderSettingsList []*EncoderSettings array type is not supported by go-swagger cli yet

	return nil
}

func registerMuxAdaptorEndpointStatusUpdateMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: endpointStatusUpdateMap map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerMuxAdaptorFileConsumer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var fileConsumerFlagName string
	if cmdPrefix == "" {
		fileConsumerFlagName = "fileConsumer"
	} else {
		fileConsumerFlagName = fmt.Sprintf("%v.fileConsumer", cmdPrefix)
	}

	if err := registerModelFileConsumerFlags(depth+1, fileConsumerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileNameDescription := ``

	var fileNameFlagName string
	if cmdPrefix == "" {
		fileNameFlagName = "fileName"
	} else {
		fileNameFlagName = fmt.Sprintf("%v.fileName", cmdPrefix)
	}

	var fileNameFlagDefault string

	_ = cmd.PersistentFlags().String(fileNameFlagName, fileNameFlagDefault, fileNameDescription)

	return nil
}

func registerMuxAdaptorInputQueueSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputQueueSizeDescription := ``

	var inputQueueSizeFlagName string
	if cmdPrefix == "" {
		inputQueueSizeFlagName = "inputQueueSize"
	} else {
		inputQueueSizeFlagName = fmt.Sprintf("%v.inputQueueSize", cmdPrefix)
	}

	var inputQueueSizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(inputQueueSizeFlagName, inputQueueSizeFlagDefault, inputQueueSizeDescription)

	return nil
}

func registerMuxAdaptorIsHealthCheckStartedMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: isHealthCheckStartedMap map[string]bool map type is not supported by go-swagger cli yet

	return nil
}

func registerMuxAdaptorLastFrameTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastFrameTimestampDescription := ``

	var lastFrameTimestampFlagName string
	if cmdPrefix == "" {
		lastFrameTimestampFlagName = "lastFrameTimestamp"
	} else {
		lastFrameTimestampFlagName = fmt.Sprintf("%v.lastFrameTimestamp", cmdPrefix)
	}

	var lastFrameTimestampFlagDefault int32

	_ = cmd.PersistentFlags().Int32(lastFrameTimestampFlagName, lastFrameTimestampFlagDefault, lastFrameTimestampDescription)

	return nil
}

func registerMuxAdaptorMuxerList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: muxerList []*Muxer array type is not supported by go-swagger cli yet

	return nil
}

func registerMuxAdaptorObjectDetectionEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	objectDetectionEnabledDescription := ``

	var objectDetectionEnabledFlagName string
	if cmdPrefix == "" {
		objectDetectionEnabledFlagName = "objectDetectionEnabled"
	} else {
		objectDetectionEnabledFlagName = fmt.Sprintf("%v.objectDetectionEnabled", cmdPrefix)
	}

	var objectDetectionEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(objectDetectionEnabledFlagName, objectDetectionEnabledFlagDefault, objectDetectionEnabledDescription)

	return nil
}

func registerMuxAdaptorPacketTimeList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: packetTimeList []*PacketTime array type is not supported by go-swagger cli yet

	return nil
}

func registerMuxAdaptorPreviewCreatePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	previewCreatePeriodDescription := ``

	var previewCreatePeriodFlagName string
	if cmdPrefix == "" {
		previewCreatePeriodFlagName = "previewCreatePeriod"
	} else {
		previewCreatePeriodFlagName = fmt.Sprintf("%v.previewCreatePeriod", cmdPrefix)
	}

	var previewCreatePeriodFlagDefault int32

	_ = cmd.PersistentFlags().Int32(previewCreatePeriodFlagName, previewCreatePeriodFlagDefault, previewCreatePeriodDescription)

	return nil
}

func registerMuxAdaptorPreviewHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	previewHeightDescription := ``

	var previewHeightFlagName string
	if cmdPrefix == "" {
		previewHeightFlagName = "previewHeight"
	} else {
		previewHeightFlagName = fmt.Sprintf("%v.previewHeight", cmdPrefix)
	}

	var previewHeightFlagDefault int32

	_ = cmd.PersistentFlags().Int32(previewHeightFlagName, previewHeightFlagDefault, previewHeightDescription)

	return nil
}

func registerMuxAdaptorPreviewOverwrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	previewOverwriteDescription := ``

	var previewOverwriteFlagName string
	if cmdPrefix == "" {
		previewOverwriteFlagName = "previewOverwrite"
	} else {
		previewOverwriteFlagName = fmt.Sprintf("%v.previewOverwrite", cmdPrefix)
	}

	var previewOverwriteFlagDefault bool

	_ = cmd.PersistentFlags().Bool(previewOverwriteFlagName, previewOverwriteFlagDefault, previewOverwriteDescription)

	return nil
}

func registerMuxAdaptorRecording(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	recordingDescription := ``

	var recordingFlagName string
	if cmdPrefix == "" {
		recordingFlagName = "recording"
	} else {
		recordingFlagName = fmt.Sprintf("%v.recording", cmdPrefix)
	}

	var recordingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(recordingFlagName, recordingFlagDefault, recordingDescription)

	return nil
}

func registerMuxAdaptorStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := ``

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerMuxAdaptorStopRequestExist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stopRequestExistDescription := ``

	var stopRequestExistFlagName string
	if cmdPrefix == "" {
		stopRequestExistFlagName = "stopRequestExist"
	} else {
		stopRequestExistFlagName = fmt.Sprintf("%v.stopRequestExist", cmdPrefix)
	}

	var stopRequestExistFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stopRequestExistFlagName, stopRequestExistFlagDefault, stopRequestExistDescription)

	return nil
}

func registerMuxAdaptorStorageClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var storageClientFlagName string
	if cmdPrefix == "" {
		storageClientFlagName = "storageClient"
	} else {
		storageClientFlagName = fmt.Sprintf("%v.storageClient", cmdPrefix)
	}

	if err := registerModelStorageClientFlags(depth+1, storageClientFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorStreamHandler(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var streamHandlerFlagName string
	if cmdPrefix == "" {
		streamHandlerFlagName = "streamHandler"
	} else {
		streamHandlerFlagName = fmt.Sprintf("%v.streamHandler", cmdPrefix)
	}

	if err := registerModelIAntMediaStreamHandlerFlags(depth+1, streamHandlerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamIdDescription := ``

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func registerMuxAdaptorStreamSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamSourceDescription := ``

	var streamSourceFlagName string
	if cmdPrefix == "" {
		streamSourceFlagName = "streamSource"
	} else {
		streamSourceFlagName = fmt.Sprintf("%v.streamSource", cmdPrefix)
	}

	var streamSourceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(streamSourceFlagName, streamSourceFlagDefault, streamSourceDescription)

	return nil
}

func registerMuxAdaptorVertx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var vertxFlagName string
	if cmdPrefix == "" {
		vertxFlagName = "vertx"
	} else {
		vertxFlagName = fmt.Sprintf("%v.vertx", cmdPrefix)
	}

	if err := registerModelVertxFlags(depth+1, vertxFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorVideoCodecParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var videoCodecParametersFlagName string
	if cmdPrefix == "" {
		videoCodecParametersFlagName = "videoCodecParameters"
	} else {
		videoCodecParametersFlagName = fmt.Sprintf("%v.videoCodecParameters", cmdPrefix)
	}

	if err := registerModelAVCodecParametersFlags(depth+1, videoCodecParametersFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorVideoStreamIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	videoStreamIndexDescription := ``

	var videoStreamIndexFlagName string
	if cmdPrefix == "" {
		videoStreamIndexFlagName = "videoStreamIndex"
	} else {
		videoStreamIndexFlagName = fmt.Sprintf("%v.videoStreamIndex", cmdPrefix)
	}

	var videoStreamIndexFlagDefault int32

	_ = cmd.PersistentFlags().Int32(videoStreamIndexFlagName, videoStreamIndexFlagDefault, videoStreamIndexDescription)

	return nil
}

func registerMuxAdaptorVideoTimeBase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var videoTimeBaseFlagName string
	if cmdPrefix == "" {
		videoTimeBaseFlagName = "videoTimeBase"
	} else {
		videoTimeBaseFlagName = fmt.Sprintf("%v.videoTimeBase", cmdPrefix)
	}

	if err := registerModelAVRationalFlags(depth+1, videoTimeBaseFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMuxAdaptorWebRTCEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	webRTCEnabledDescription := ``

	var webRTCEnabledFlagName string
	if cmdPrefix == "" {
		webRTCEnabledFlagName = "webRTCEnabled"
	} else {
		webRTCEnabledFlagName = fmt.Sprintf("%v.webRTCEnabled", cmdPrefix)
	}

	var webRTCEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(webRTCEnabledFlagName, webRTCEnabledFlagDefault, webRTCEnabledDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMuxAdaptorFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, absoluteTimeMsAdded := retrieveMuxAdaptorAbsoluteTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || absoluteTimeMsAdded

	err, appSettingsAdded := retrieveMuxAdaptorAppSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appSettingsAdded

	err, appendingAdded := retrieveMuxAdaptorAppendingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appendingAdded

	err, audioCodecParametersAdded := retrieveMuxAdaptorAudioCodecParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioCodecParametersAdded

	err, audioStreamIndexAdded := retrieveMuxAdaptorAudioStreamIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioStreamIndexAdded

	err, audioTimeBaseAdded := retrieveMuxAdaptorAudioTimeBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioTimeBaseAdded

	err, avcAdded := retrieveMuxAdaptorAvcFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || avcAdded

	err, broadcastAdded := retrieveMuxAdaptorBroadcastFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || broadcastAdded

	err, broadcastStreamAdded := retrieveMuxAdaptorBroadcastStreamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || broadcastStreamAdded

	err, bufferQueueAdded := retrieveMuxAdaptorBufferQueueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufferQueueAdded

	err, bufferTimeMsAdded := retrieveMuxAdaptorBufferTimeMsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufferTimeMsAdded

	err, bufferingAdded := retrieveMuxAdaptorBufferingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bufferingAdded

	err, dashMuxerAdded := retrieveMuxAdaptorDashMuxerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashMuxerAdded

	err, dataChannelWebHookUrlAdded := retrieveMuxAdaptorDataChannelWebHookURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataChannelWebHookUrlAdded

	err, dataStoreAdded := retrieveMuxAdaptorDataStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded

	err, deleteDASHFilesOnExitAdded := retrieveMuxAdaptorDeleteDASHFilesOnExitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deleteDASHFilesOnExitAdded

	err, enableAudioAdded := retrieveMuxAdaptorEnableAudioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableAudioAdded

	err, enableVideoAdded := retrieveMuxAdaptorEnableVideoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableVideoAdded

	err, encoderSettingsListAdded := retrieveMuxAdaptorEncoderSettingsListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encoderSettingsListAdded

	err, endpointStatusUpdateMapAdded := retrieveMuxAdaptorEndpointStatusUpdateMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointStatusUpdateMapAdded

	err, fileConsumerAdded := retrieveMuxAdaptorFileConsumerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileConsumerAdded

	err, fileNameAdded := retrieveMuxAdaptorFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileNameAdded

	err, inputQueueSizeAdded := retrieveMuxAdaptorInputQueueSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputQueueSizeAdded

	err, isHealthCheckStartedMapAdded := retrieveMuxAdaptorIsHealthCheckStartedMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isHealthCheckStartedMapAdded

	err, lastFrameTimestampAdded := retrieveMuxAdaptorLastFrameTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastFrameTimestampAdded

	err, muxerListAdded := retrieveMuxAdaptorMuxerListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || muxerListAdded

	err, objectDetectionEnabledAdded := retrieveMuxAdaptorObjectDetectionEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || objectDetectionEnabledAdded

	err, packetTimeListAdded := retrieveMuxAdaptorPacketTimeListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || packetTimeListAdded

	err, previewCreatePeriodAdded := retrieveMuxAdaptorPreviewCreatePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || previewCreatePeriodAdded

	err, previewHeightAdded := retrieveMuxAdaptorPreviewHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || previewHeightAdded

	err, previewOverwriteAdded := retrieveMuxAdaptorPreviewOverwriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || previewOverwriteAdded

	err, recordingAdded := retrieveMuxAdaptorRecordingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || recordingAdded

	err, startTimeAdded := retrieveMuxAdaptorStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, stopRequestExistAdded := retrieveMuxAdaptorStopRequestExistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stopRequestExistAdded

	err, storageClientAdded := retrieveMuxAdaptorStorageClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageClientAdded

	err, streamHandlerAdded := retrieveMuxAdaptorStreamHandlerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamHandlerAdded

	err, streamIdAdded := retrieveMuxAdaptorStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, streamSourceAdded := retrieveMuxAdaptorStreamSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamSourceAdded

	err, vertxAdded := retrieveMuxAdaptorVertxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vertxAdded

	err, videoCodecParametersAdded := retrieveMuxAdaptorVideoCodecParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoCodecParametersAdded

	err, videoStreamIndexAdded := retrieveMuxAdaptorVideoStreamIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoStreamIndexAdded

	err, videoTimeBaseAdded := retrieveMuxAdaptorVideoTimeBaseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoTimeBaseAdded

	err, webRTCEnabledAdded := retrieveMuxAdaptorWebRTCEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || webRTCEnabledAdded

	return nil, retAdded
}

func retrieveMuxAdaptorAbsoluteTimeMsFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	absoluteTimeMsFlagName := fmt.Sprintf("%v.absoluteTimeMs", cmdPrefix)
	if cmd.Flags().Changed(absoluteTimeMsFlagName) {

		var absoluteTimeMsFlagName string
		if cmdPrefix == "" {
			absoluteTimeMsFlagName = "absoluteTimeMs"
		} else {
			absoluteTimeMsFlagName = fmt.Sprintf("%v.absoluteTimeMs", cmdPrefix)
		}

		absoluteTimeMsFlagValue, err := cmd.Flags().GetInt64(absoluteTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.AbsoluteTimeMs = absoluteTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorAppSettingsFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appSettingsFlagName := fmt.Sprintf("%v.appSettings", cmdPrefix)
	if cmd.Flags().Changed(appSettingsFlagName) {
		// info: complex object appSettings AppSettings is retrieved outside this Changed() block
	}
	appSettingsFlagValue := m.AppSettings
	if swag.IsZero(appSettingsFlagValue) {
		appSettingsFlagValue = &models.AppSettings{}
	}

	err, appSettingsAdded := retrieveModelAppSettingsFlags(depth+1, appSettingsFlagValue, appSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appSettingsAdded
	if appSettingsAdded {
		m.AppSettings = appSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorAppendingFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appendingFlagName := fmt.Sprintf("%v.appending", cmdPrefix)
	if cmd.Flags().Changed(appendingFlagName) {

		var appendingFlagName string
		if cmdPrefix == "" {
			appendingFlagName = "appending"
		} else {
			appendingFlagName = fmt.Sprintf("%v.appending", cmdPrefix)
		}

		appendingFlagValue, err := cmd.Flags().GetBool(appendingFlagName)
		if err != nil {
			return err, false
		}
		m.Appending = appendingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorAudioCodecParametersFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioCodecParametersFlagName := fmt.Sprintf("%v.audioCodecParameters", cmdPrefix)
	if cmd.Flags().Changed(audioCodecParametersFlagName) {
		// info: complex object audioCodecParameters AVCodecParameters is retrieved outside this Changed() block
	}
	audioCodecParametersFlagValue := m.AudioCodecParameters
	if swag.IsZero(audioCodecParametersFlagValue) {
		audioCodecParametersFlagValue = &models.AVCodecParameters{}
	}

	err, audioCodecParametersAdded := retrieveModelAVCodecParametersFlags(depth+1, audioCodecParametersFlagValue, audioCodecParametersFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioCodecParametersAdded
	if audioCodecParametersAdded {
		m.AudioCodecParameters = audioCodecParametersFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorAudioStreamIndexFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioStreamIndexFlagName := fmt.Sprintf("%v.audioStreamIndex", cmdPrefix)
	if cmd.Flags().Changed(audioStreamIndexFlagName) {

		var audioStreamIndexFlagName string
		if cmdPrefix == "" {
			audioStreamIndexFlagName = "audioStreamIndex"
		} else {
			audioStreamIndexFlagName = fmt.Sprintf("%v.audioStreamIndex", cmdPrefix)
		}

		audioStreamIndexFlagValue, err := cmd.Flags().GetInt32(audioStreamIndexFlagName)
		if err != nil {
			return err, false
		}
		m.AudioStreamIndex = audioStreamIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorAudioTimeBaseFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	audioTimeBaseFlagName := fmt.Sprintf("%v.audioTimeBase", cmdPrefix)
	if cmd.Flags().Changed(audioTimeBaseFlagName) {
		// info: complex object audioTimeBase AVRational is retrieved outside this Changed() block
	}
	audioTimeBaseFlagValue := m.AudioTimeBase
	if swag.IsZero(audioTimeBaseFlagValue) {
		audioTimeBaseFlagValue = &models.AVRational{}
	}

	err, audioTimeBaseAdded := retrieveModelAVRationalFlags(depth+1, audioTimeBaseFlagValue, audioTimeBaseFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || audioTimeBaseAdded
	if audioTimeBaseAdded {
		m.AudioTimeBase = audioTimeBaseFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorAvcFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	avcFlagName := fmt.Sprintf("%v.avc", cmdPrefix)
	if cmd.Flags().Changed(avcFlagName) {

		var avcFlagName string
		if cmdPrefix == "" {
			avcFlagName = "avc"
		} else {
			avcFlagName = fmt.Sprintf("%v.avc", cmdPrefix)
		}

		avcFlagValue, err := cmd.Flags().GetBool(avcFlagName)
		if err != nil {
			return err, false
		}
		m.Avc = avcFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorBroadcastFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	broadcastFlagName := fmt.Sprintf("%v.broadcast", cmdPrefix)
	if cmd.Flags().Changed(broadcastFlagName) {
		// info: complex object broadcast Broadcast is retrieved outside this Changed() block
	}
	broadcastFlagValue := m.Broadcast
	if swag.IsZero(broadcastFlagValue) {
		broadcastFlagValue = &models.Broadcast{}
	}

	err, broadcastAdded := retrieveModelBroadcastFlags(depth+1, broadcastFlagValue, broadcastFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || broadcastAdded
	if broadcastAdded {
		m.Broadcast = broadcastFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorBroadcastStreamFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	broadcastStreamFlagName := fmt.Sprintf("%v.broadcastStream", cmdPrefix)
	if cmd.Flags().Changed(broadcastStreamFlagName) {
		// info: complex object broadcastStream ClientBroadcastStream is retrieved outside this Changed() block
	}
	broadcastStreamFlagValue := m.BroadcastStream
	if swag.IsZero(broadcastStreamFlagValue) {
		broadcastStreamFlagValue = &models.ClientBroadcastStream{}
	}

	err, broadcastStreamAdded := retrieveModelClientBroadcastStreamFlags(depth+1, broadcastStreamFlagValue, broadcastStreamFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || broadcastStreamAdded
	if broadcastStreamAdded {
		m.BroadcastStream = broadcastStreamFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorBufferQueueFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufferQueueFlagName := fmt.Sprintf("%v.bufferQueue", cmdPrefix)
	if cmd.Flags().Changed(bufferQueueFlagName) {
		// warning: bufferQueue array type []*IStreamPacket is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxAdaptorBufferTimeMsFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufferTimeMsFlagName := fmt.Sprintf("%v.bufferTimeMs", cmdPrefix)
	if cmd.Flags().Changed(bufferTimeMsFlagName) {

		var bufferTimeMsFlagName string
		if cmdPrefix == "" {
			bufferTimeMsFlagName = "bufferTimeMs"
		} else {
			bufferTimeMsFlagName = fmt.Sprintf("%v.bufferTimeMs", cmdPrefix)
		}

		bufferTimeMsFlagValue, err := cmd.Flags().GetInt64(bufferTimeMsFlagName)
		if err != nil {
			return err, false
		}
		m.BufferTimeMs = bufferTimeMsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorBufferingFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bufferingFlagName := fmt.Sprintf("%v.buffering", cmdPrefix)
	if cmd.Flags().Changed(bufferingFlagName) {

		var bufferingFlagName string
		if cmdPrefix == "" {
			bufferingFlagName = "buffering"
		} else {
			bufferingFlagName = fmt.Sprintf("%v.buffering", cmdPrefix)
		}

		bufferingFlagValue, err := cmd.Flags().GetBool(bufferingFlagName)
		if err != nil {
			return err, false
		}
		m.Buffering = bufferingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorDashMuxerFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dashMuxerFlagName := fmt.Sprintf("%v.dashMuxer", cmdPrefix)
	if cmd.Flags().Changed(dashMuxerFlagName) {
		// info: complex object dashMuxer Muxer is retrieved outside this Changed() block
	}
	dashMuxerFlagValue := m.DashMuxer
	if swag.IsZero(dashMuxerFlagValue) {
		dashMuxerFlagValue = &models.Muxer{}
	}

	err, dashMuxerAdded := retrieveModelMuxerFlags(depth+1, dashMuxerFlagValue, dashMuxerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dashMuxerAdded
	if dashMuxerAdded {
		m.DashMuxer = dashMuxerFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorDataChannelWebHookURLFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataChannelWebHookUrlFlagName := fmt.Sprintf("%v.dataChannelWebHookURL", cmdPrefix)
	if cmd.Flags().Changed(dataChannelWebHookUrlFlagName) {

		var dataChannelWebHookUrlFlagName string
		if cmdPrefix == "" {
			dataChannelWebHookUrlFlagName = "dataChannelWebHookURL"
		} else {
			dataChannelWebHookUrlFlagName = fmt.Sprintf("%v.dataChannelWebHookURL", cmdPrefix)
		}

		dataChannelWebHookUrlFlagValue, err := cmd.Flags().GetString(dataChannelWebHookUrlFlagName)
		if err != nil {
			return err, false
		}
		m.DataChannelWebHookURL = dataChannelWebHookUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorDataStoreFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataStoreFlagName := fmt.Sprintf("%v.dataStore", cmdPrefix)
	if cmd.Flags().Changed(dataStoreFlagName) {
		// info: complex object dataStore DataStore is retrieved outside this Changed() block
	}
	dataStoreFlagValue := m.DataStore
	if swag.IsZero(dataStoreFlagValue) {
		dataStoreFlagValue = &models.DataStore{}
	}

	err, dataStoreAdded := retrieveModelDataStoreFlags(depth+1, dataStoreFlagValue, dataStoreFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataStoreAdded
	if dataStoreAdded {
		m.DataStore = dataStoreFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorDeleteDASHFilesOnExitFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deleteDASHFilesOnExitFlagName := fmt.Sprintf("%v.deleteDASHFilesOnExit", cmdPrefix)
	if cmd.Flags().Changed(deleteDASHFilesOnExitFlagName) {

		var deleteDASHFilesOnExitFlagName string
		if cmdPrefix == "" {
			deleteDASHFilesOnExitFlagName = "deleteDASHFilesOnExit"
		} else {
			deleteDASHFilesOnExitFlagName = fmt.Sprintf("%v.deleteDASHFilesOnExit", cmdPrefix)
		}

		deleteDASHFilesOnExitFlagValue, err := cmd.Flags().GetBool(deleteDASHFilesOnExitFlagName)
		if err != nil {
			return err, false
		}
		m.DeleteDASHFilesOnExit = deleteDASHFilesOnExitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorEnableAudioFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableAudioFlagName := fmt.Sprintf("%v.enableAudio", cmdPrefix)
	if cmd.Flags().Changed(enableAudioFlagName) {

		var enableAudioFlagName string
		if cmdPrefix == "" {
			enableAudioFlagName = "enableAudio"
		} else {
			enableAudioFlagName = fmt.Sprintf("%v.enableAudio", cmdPrefix)
		}

		enableAudioFlagValue, err := cmd.Flags().GetBool(enableAudioFlagName)
		if err != nil {
			return err, false
		}
		m.EnableAudio = enableAudioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorEnableVideoFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableVideoFlagName := fmt.Sprintf("%v.enableVideo", cmdPrefix)
	if cmd.Flags().Changed(enableVideoFlagName) {

		var enableVideoFlagName string
		if cmdPrefix == "" {
			enableVideoFlagName = "enableVideo"
		} else {
			enableVideoFlagName = fmt.Sprintf("%v.enableVideo", cmdPrefix)
		}

		enableVideoFlagValue, err := cmd.Flags().GetBool(enableVideoFlagName)
		if err != nil {
			return err, false
		}
		m.EnableVideo = enableVideoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorEncoderSettingsListFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encoderSettingsListFlagName := fmt.Sprintf("%v.encoderSettingsList", cmdPrefix)
	if cmd.Flags().Changed(encoderSettingsListFlagName) {
		// warning: encoderSettingsList array type []*EncoderSettings is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxAdaptorEndpointStatusUpdateMapFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointStatusUpdateMapFlagName := fmt.Sprintf("%v.endpointStatusUpdateMap", cmdPrefix)
	if cmd.Flags().Changed(endpointStatusUpdateMapFlagName) {
		// warning: endpointStatusUpdateMap map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxAdaptorFileConsumerFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileConsumerFlagName := fmt.Sprintf("%v.fileConsumer", cmdPrefix)
	if cmd.Flags().Changed(fileConsumerFlagName) {
		// info: complex object fileConsumer FileConsumer is retrieved outside this Changed() block
	}
	fileConsumerFlagValue := m.FileConsumer
	if swag.IsZero(fileConsumerFlagValue) {
		fileConsumerFlagValue = &models.FileConsumer{}
	}

	err, fileConsumerAdded := retrieveModelFileConsumerFlags(depth+1, fileConsumerFlagValue, fileConsumerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileConsumerAdded
	if fileConsumerAdded {
		m.FileConsumer = fileConsumerFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorFileNameFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileNameFlagName := fmt.Sprintf("%v.fileName", cmdPrefix)
	if cmd.Flags().Changed(fileNameFlagName) {

		var fileNameFlagName string
		if cmdPrefix == "" {
			fileNameFlagName = "fileName"
		} else {
			fileNameFlagName = fmt.Sprintf("%v.fileName", cmdPrefix)
		}

		fileNameFlagValue, err := cmd.Flags().GetString(fileNameFlagName)
		if err != nil {
			return err, false
		}
		m.FileName = fileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorInputQueueSizeFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputQueueSizeFlagName := fmt.Sprintf("%v.inputQueueSize", cmdPrefix)
	if cmd.Flags().Changed(inputQueueSizeFlagName) {

		var inputQueueSizeFlagName string
		if cmdPrefix == "" {
			inputQueueSizeFlagName = "inputQueueSize"
		} else {
			inputQueueSizeFlagName = fmt.Sprintf("%v.inputQueueSize", cmdPrefix)
		}

		inputQueueSizeFlagValue, err := cmd.Flags().GetInt32(inputQueueSizeFlagName)
		if err != nil {
			return err, false
		}
		m.InputQueueSize = inputQueueSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorIsHealthCheckStartedMapFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isHealthCheckStartedMapFlagName := fmt.Sprintf("%v.isHealthCheckStartedMap", cmdPrefix)
	if cmd.Flags().Changed(isHealthCheckStartedMapFlagName) {
		// warning: isHealthCheckStartedMap map type map[string]bool is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxAdaptorLastFrameTimestampFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastFrameTimestampFlagName := fmt.Sprintf("%v.lastFrameTimestamp", cmdPrefix)
	if cmd.Flags().Changed(lastFrameTimestampFlagName) {

		var lastFrameTimestampFlagName string
		if cmdPrefix == "" {
			lastFrameTimestampFlagName = "lastFrameTimestamp"
		} else {
			lastFrameTimestampFlagName = fmt.Sprintf("%v.lastFrameTimestamp", cmdPrefix)
		}

		lastFrameTimestampFlagValue, err := cmd.Flags().GetInt32(lastFrameTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.LastFrameTimestamp = lastFrameTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorMuxerListFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	muxerListFlagName := fmt.Sprintf("%v.muxerList", cmdPrefix)
	if cmd.Flags().Changed(muxerListFlagName) {
		// warning: muxerList array type []*Muxer is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxAdaptorObjectDetectionEnabledFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	objectDetectionEnabledFlagName := fmt.Sprintf("%v.objectDetectionEnabled", cmdPrefix)
	if cmd.Flags().Changed(objectDetectionEnabledFlagName) {

		var objectDetectionEnabledFlagName string
		if cmdPrefix == "" {
			objectDetectionEnabledFlagName = "objectDetectionEnabled"
		} else {
			objectDetectionEnabledFlagName = fmt.Sprintf("%v.objectDetectionEnabled", cmdPrefix)
		}

		objectDetectionEnabledFlagValue, err := cmd.Flags().GetBool(objectDetectionEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.ObjectDetectionEnabled = objectDetectionEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorPacketTimeListFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	packetTimeListFlagName := fmt.Sprintf("%v.packetTimeList", cmdPrefix)
	if cmd.Flags().Changed(packetTimeListFlagName) {
		// warning: packetTimeList array type []*PacketTime is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMuxAdaptorPreviewCreatePeriodFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	previewCreatePeriodFlagName := fmt.Sprintf("%v.previewCreatePeriod", cmdPrefix)
	if cmd.Flags().Changed(previewCreatePeriodFlagName) {

		var previewCreatePeriodFlagName string
		if cmdPrefix == "" {
			previewCreatePeriodFlagName = "previewCreatePeriod"
		} else {
			previewCreatePeriodFlagName = fmt.Sprintf("%v.previewCreatePeriod", cmdPrefix)
		}

		previewCreatePeriodFlagValue, err := cmd.Flags().GetInt32(previewCreatePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.PreviewCreatePeriod = previewCreatePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorPreviewHeightFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	previewHeightFlagName := fmt.Sprintf("%v.previewHeight", cmdPrefix)
	if cmd.Flags().Changed(previewHeightFlagName) {

		var previewHeightFlagName string
		if cmdPrefix == "" {
			previewHeightFlagName = "previewHeight"
		} else {
			previewHeightFlagName = fmt.Sprintf("%v.previewHeight", cmdPrefix)
		}

		previewHeightFlagValue, err := cmd.Flags().GetInt32(previewHeightFlagName)
		if err != nil {
			return err, false
		}
		m.PreviewHeight = previewHeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorPreviewOverwriteFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	previewOverwriteFlagName := fmt.Sprintf("%v.previewOverwrite", cmdPrefix)
	if cmd.Flags().Changed(previewOverwriteFlagName) {

		var previewOverwriteFlagName string
		if cmdPrefix == "" {
			previewOverwriteFlagName = "previewOverwrite"
		} else {
			previewOverwriteFlagName = fmt.Sprintf("%v.previewOverwrite", cmdPrefix)
		}

		previewOverwriteFlagValue, err := cmd.Flags().GetBool(previewOverwriteFlagName)
		if err != nil {
			return err, false
		}
		m.PreviewOverwrite = previewOverwriteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorRecordingFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	recordingFlagName := fmt.Sprintf("%v.recording", cmdPrefix)
	if cmd.Flags().Changed(recordingFlagName) {

		var recordingFlagName string
		if cmdPrefix == "" {
			recordingFlagName = "recording"
		} else {
			recordingFlagName = fmt.Sprintf("%v.recording", cmdPrefix)
		}

		recordingFlagValue, err := cmd.Flags().GetBool(recordingFlagName)
		if err != nil {
			return err, false
		}
		m.Recording = recordingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorStartTimeFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.startTime", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetInt64(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorStopRequestExistFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stopRequestExistFlagName := fmt.Sprintf("%v.stopRequestExist", cmdPrefix)
	if cmd.Flags().Changed(stopRequestExistFlagName) {

		var stopRequestExistFlagName string
		if cmdPrefix == "" {
			stopRequestExistFlagName = "stopRequestExist"
		} else {
			stopRequestExistFlagName = fmt.Sprintf("%v.stopRequestExist", cmdPrefix)
		}

		stopRequestExistFlagValue, err := cmd.Flags().GetBool(stopRequestExistFlagName)
		if err != nil {
			return err, false
		}
		m.StopRequestExist = stopRequestExistFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorStorageClientFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageClientFlagName := fmt.Sprintf("%v.storageClient", cmdPrefix)
	if cmd.Flags().Changed(storageClientFlagName) {
		// info: complex object storageClient StorageClient is retrieved outside this Changed() block
	}
	storageClientFlagValue := m.StorageClient
	if swag.IsZero(storageClientFlagValue) {
		storageClientFlagValue = &models.StorageClient{}
	}

	err, storageClientAdded := retrieveModelStorageClientFlags(depth+1, storageClientFlagValue, storageClientFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageClientAdded
	if storageClientAdded {
		m.StorageClient = storageClientFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorStreamHandlerFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamHandlerFlagName := fmt.Sprintf("%v.streamHandler", cmdPrefix)
	if cmd.Flags().Changed(streamHandlerFlagName) {
		// info: complex object streamHandler IAntMediaStreamHandler is retrieved outside this Changed() block
	}
	streamHandlerFlagValue := m.StreamHandler
	if swag.IsZero(streamHandlerFlagValue) {
		streamHandlerFlagValue = &models.IAntMediaStreamHandler{}
	}

	err, streamHandlerAdded := retrieveModelIAntMediaStreamHandlerFlags(depth+1, streamHandlerFlagValue, streamHandlerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamHandlerAdded
	if streamHandlerAdded {
		m.StreamHandler = streamHandlerFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorStreamIDFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorStreamSourceFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamSourceFlagName := fmt.Sprintf("%v.streamSource", cmdPrefix)
	if cmd.Flags().Changed(streamSourceFlagName) {

		var streamSourceFlagName string
		if cmdPrefix == "" {
			streamSourceFlagName = "streamSource"
		} else {
			streamSourceFlagName = fmt.Sprintf("%v.streamSource", cmdPrefix)
		}

		streamSourceFlagValue, err := cmd.Flags().GetBool(streamSourceFlagName)
		if err != nil {
			return err, false
		}
		m.StreamSource = streamSourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorVertxFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vertxFlagName := fmt.Sprintf("%v.vertx", cmdPrefix)
	if cmd.Flags().Changed(vertxFlagName) {
		// info: complex object vertx Vertx is retrieved outside this Changed() block
	}
	vertxFlagValue := m.Vertx
	if swag.IsZero(vertxFlagValue) {
		vertxFlagValue = &models.Vertx{}
	}

	err, vertxAdded := retrieveModelVertxFlags(depth+1, vertxFlagValue, vertxFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vertxAdded
	if vertxAdded {
		m.Vertx = vertxFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorVideoCodecParametersFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoCodecParametersFlagName := fmt.Sprintf("%v.videoCodecParameters", cmdPrefix)
	if cmd.Flags().Changed(videoCodecParametersFlagName) {
		// info: complex object videoCodecParameters AVCodecParameters is retrieved outside this Changed() block
	}
	videoCodecParametersFlagValue := m.VideoCodecParameters
	if swag.IsZero(videoCodecParametersFlagValue) {
		videoCodecParametersFlagValue = &models.AVCodecParameters{}
	}

	err, videoCodecParametersAdded := retrieveModelAVCodecParametersFlags(depth+1, videoCodecParametersFlagValue, videoCodecParametersFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoCodecParametersAdded
	if videoCodecParametersAdded {
		m.VideoCodecParameters = videoCodecParametersFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorVideoStreamIndexFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoStreamIndexFlagName := fmt.Sprintf("%v.videoStreamIndex", cmdPrefix)
	if cmd.Flags().Changed(videoStreamIndexFlagName) {

		var videoStreamIndexFlagName string
		if cmdPrefix == "" {
			videoStreamIndexFlagName = "videoStreamIndex"
		} else {
			videoStreamIndexFlagName = fmt.Sprintf("%v.videoStreamIndex", cmdPrefix)
		}

		videoStreamIndexFlagValue, err := cmd.Flags().GetInt32(videoStreamIndexFlagName)
		if err != nil {
			return err, false
		}
		m.VideoStreamIndex = videoStreamIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMuxAdaptorVideoTimeBaseFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	videoTimeBaseFlagName := fmt.Sprintf("%v.videoTimeBase", cmdPrefix)
	if cmd.Flags().Changed(videoTimeBaseFlagName) {
		// info: complex object videoTimeBase AVRational is retrieved outside this Changed() block
	}
	videoTimeBaseFlagValue := m.VideoTimeBase
	if swag.IsZero(videoTimeBaseFlagValue) {
		videoTimeBaseFlagValue = &models.AVRational{}
	}

	err, videoTimeBaseAdded := retrieveModelAVRationalFlags(depth+1, videoTimeBaseFlagValue, videoTimeBaseFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || videoTimeBaseAdded
	if videoTimeBaseAdded {
		m.VideoTimeBase = videoTimeBaseFlagValue
	}

	return nil, retAdded
}

func retrieveMuxAdaptorWebRTCEnabledFlags(depth int, m *models.MuxAdaptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	webRTCEnabledFlagName := fmt.Sprintf("%v.webRTCEnabled", cmdPrefix)
	if cmd.Flags().Changed(webRTCEnabledFlagName) {

		var webRTCEnabledFlagName string
		if cmdPrefix == "" {
			webRTCEnabledFlagName = "webRTCEnabled"
		} else {
			webRTCEnabledFlagName = fmt.Sprintf("%v.webRTCEnabled", cmdPrefix)
		}

		webRTCEnabledFlagValue, err := cmd.Flags().GetBool(webRTCEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.WebRTCEnabled = webRTCEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}
