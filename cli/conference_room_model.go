// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for ConferenceRoom

// register flags to command
func registerModelConferenceRoomFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConferenceRoomEndDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConferenceRoomMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConferenceRoomRoomID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConferenceRoomRoomStreamList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConferenceRoomStartDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConferenceRoomEndDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endDateDescription := `The end date of the Conference Room. It's unix timestamp in seconds`

	var endDateFlagName string
	if cmdPrefix == "" {
		endDateFlagName = "endDate"
	} else {
		endDateFlagName = fmt.Sprintf("%v.endDate", cmdPrefix)
	}

	var endDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(endDateFlagName, endDateFlagDefault, endDateDescription)

	return nil
}

func registerConferenceRoomMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Conference Room Mode: legacy | mcu | multi-track`

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	return nil
}

func registerConferenceRoomRoomID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roomIdDescription := `The id of the Conference Room`

	var roomIdFlagName string
	if cmdPrefix == "" {
		roomIdFlagName = "roomId"
	} else {
		roomIdFlagName = fmt.Sprintf("%v.roomId", cmdPrefix)
	}

	var roomIdFlagDefault string

	_ = cmd.PersistentFlags().String(roomIdFlagName, roomIdFlagDefault, roomIdDescription)

	return nil
}

func registerConferenceRoomRoomStreamList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: roomStreamList []string array type is not supported by go-swagger cli yet

	return nil
}

func registerConferenceRoomStartDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDateDescription := `The start date of the Conference Room. It's unix timestamp in seconds.`

	var startDateFlagName string
	if cmdPrefix == "" {
		startDateFlagName = "startDate"
	} else {
		startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
	}

	var startDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(startDateFlagName, startDateFlagDefault, startDateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConferenceRoomFlags(depth int, m *models.ConferenceRoom, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endDateAdded := retrieveConferenceRoomEndDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endDateAdded

	err, modeAdded := retrieveConferenceRoomModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, roomIdAdded := retrieveConferenceRoomRoomIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roomIdAdded

	err, roomStreamListAdded := retrieveConferenceRoomRoomStreamListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roomStreamListAdded

	err, startDateAdded := retrieveConferenceRoomStartDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startDateAdded

	return nil, retAdded
}

func retrieveConferenceRoomEndDateFlags(depth int, m *models.ConferenceRoom, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endDateFlagName := fmt.Sprintf("%v.endDate", cmdPrefix)
	if cmd.Flags().Changed(endDateFlagName) {

		var endDateFlagName string
		if cmdPrefix == "" {
			endDateFlagName = "endDate"
		} else {
			endDateFlagName = fmt.Sprintf("%v.endDate", cmdPrefix)
		}

		endDateFlagValue, err := cmd.Flags().GetInt64(endDateFlagName)
		if err != nil {
			return err, false
		}
		m.EndDate = endDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConferenceRoomModeFlags(depth int, m *models.ConferenceRoom, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConferenceRoomRoomIDFlags(depth int, m *models.ConferenceRoom, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roomIdFlagName := fmt.Sprintf("%v.roomId", cmdPrefix)
	if cmd.Flags().Changed(roomIdFlagName) {

		var roomIdFlagName string
		if cmdPrefix == "" {
			roomIdFlagName = "roomId"
		} else {
			roomIdFlagName = fmt.Sprintf("%v.roomId", cmdPrefix)
		}

		roomIdFlagValue, err := cmd.Flags().GetString(roomIdFlagName)
		if err != nil {
			return err, false
		}
		m.RoomID = roomIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConferenceRoomRoomStreamListFlags(depth int, m *models.ConferenceRoom, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roomStreamListFlagName := fmt.Sprintf("%v.roomStreamList", cmdPrefix)
	if cmd.Flags().Changed(roomStreamListFlagName) {
		// warning: roomStreamList array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveConferenceRoomStartDateFlags(depth int, m *models.ConferenceRoom, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startDateFlagName := fmt.Sprintf("%v.startDate", cmdPrefix)
	if cmd.Flags().Changed(startDateFlagName) {

		var startDateFlagName string
		if cmdPrefix == "" {
			startDateFlagName = "startDate"
		} else {
			startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
		}

		startDateFlagValue, err := cmd.Flags().GetInt64(startDateFlagName)
		if err != nil {
			return err, false
		}
		m.StartDate = startDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
