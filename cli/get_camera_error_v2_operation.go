// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/broadcast_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBroadcastRestServiceGetCameraErrorV2Cmd returns a cmd to handle operation getCameraErrorV2
func makeOperationBroadcastRestServiceGetCameraErrorV2Cmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getCameraErrorV2",
		Short: `Notes here`,
		RunE:  runOperationBroadcastRestServiceGetCameraErrorV2,
	}

	if err := registerOperationBroadcastRestServiceGetCameraErrorV2ParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBroadcastRestServiceGetCameraErrorV2 uses cmd flags to call endpoint api
func runOperationBroadcastRestServiceGetCameraErrorV2(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broadcast_rest_service.NewGetCameraErrorV2Params()
	if err, _ := retrieveOperationBroadcastRestServiceGetCameraErrorV2StreamIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBroadcastRestServiceGetCameraErrorV2Result(appCli.BroadcastRestService.GetCameraErrorV2(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBroadcastRestServiceGetCameraErrorV2ParamFlags registers all flags needed to fill params
func registerOperationBroadcastRestServiceGetCameraErrorV2ParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBroadcastRestServiceGetCameraErrorV2StreamIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBroadcastRestServiceGetCameraErrorV2StreamIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	streamIdDescription := `Required. StreamId of the IP Camera Streaming.`

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func retrieveOperationBroadcastRestServiceGetCameraErrorV2StreamIDFlag(m *broadcast_rest_service.GetCameraErrorV2Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("streamId") {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

	}
	return nil, retAdded
}

// parseOperationBroadcastRestServiceGetCameraErrorV2Result parses request result and return the string content
func parseOperationBroadcastRestServiceGetCameraErrorV2Result(resp0 *broadcast_rest_service.GetCameraErrorV2OK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broadcast_rest_service.GetCameraErrorV2OK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
