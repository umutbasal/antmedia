// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/go-openapi/swag"

	"antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for IServiceCall

// register flags to command
func registerModelIServiceCallFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIServiceCallArguments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallException(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallReadTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallServiceMethodName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallServiceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIServiceCallWriteTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIServiceCallArguments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: arguments []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerIServiceCallException(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var exceptionFlagName string
	if cmdPrefix == "" {
		exceptionFlagName = "exception"
	} else {
		exceptionFlagName = fmt.Sprintf("%v.exception", cmdPrefix)
	}

	if err := registerModelExceptionFlags(depth+1, exceptionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIServiceCallReadTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readTimeDescription := ``

	var readTimeFlagName string
	if cmdPrefix == "" {
		readTimeFlagName = "readTime"
	} else {
		readTimeFlagName = fmt.Sprintf("%v.readTime", cmdPrefix)
	}

	var readTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(readTimeFlagName, readTimeFlagDefault, readTimeDescription)

	return nil
}

func registerIServiceCallServiceMethodName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceMethodNameDescription := ``

	var serviceMethodNameFlagName string
	if cmdPrefix == "" {
		serviceMethodNameFlagName = "serviceMethodName"
	} else {
		serviceMethodNameFlagName = fmt.Sprintf("%v.serviceMethodName", cmdPrefix)
	}

	var serviceMethodNameFlagDefault string

	_ = cmd.PersistentFlags().String(serviceMethodNameFlagName, serviceMethodNameFlagDefault, serviceMethodNameDescription)

	return nil
}

func registerIServiceCallServiceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceNameDescription := ``

	var serviceNameFlagName string
	if cmdPrefix == "" {
		serviceNameFlagName = "serviceName"
	} else {
		serviceNameFlagName = fmt.Sprintf("%v.serviceName", cmdPrefix)
	}

	var serviceNameFlagDefault string

	_ = cmd.PersistentFlags().String(serviceNameFlagName, serviceNameFlagDefault, serviceNameDescription)

	return nil
}

func registerIServiceCallStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive status strfmt.Base64 is not supported by go-swagger cli yet

	return nil
}

func registerIServiceCallSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	successDescription := ``

	var successFlagName string
	if cmdPrefix == "" {
		successFlagName = "success"
	} else {
		successFlagName = fmt.Sprintf("%v.success", cmdPrefix)
	}

	var successFlagDefault bool

	_ = cmd.PersistentFlags().Bool(successFlagName, successFlagDefault, successDescription)

	return nil
}

func registerIServiceCallWriteTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	writeTimeDescription := ``

	var writeTimeFlagName string
	if cmdPrefix == "" {
		writeTimeFlagName = "writeTime"
	} else {
		writeTimeFlagName = fmt.Sprintf("%v.writeTime", cmdPrefix)
	}

	var writeTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(writeTimeFlagName, writeTimeFlagDefault, writeTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIServiceCallFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, argumentsAdded := retrieveIServiceCallArgumentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || argumentsAdded

	err, exceptionAdded := retrieveIServiceCallExceptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exceptionAdded

	err, readTimeAdded := retrieveIServiceCallReadTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readTimeAdded

	err, serviceMethodNameAdded := retrieveIServiceCallServiceMethodNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceMethodNameAdded

	err, serviceNameAdded := retrieveIServiceCallServiceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceNameAdded

	err, statusAdded := retrieveIServiceCallStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, successAdded := retrieveIServiceCallSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || successAdded

	err, writeTimeAdded := retrieveIServiceCallWriteTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || writeTimeAdded

	return nil, retAdded
}

func retrieveIServiceCallArgumentsFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	argumentsFlagName := fmt.Sprintf("%v.arguments", cmdPrefix)
	if cmd.Flags().Changed(argumentsFlagName) {
		// warning: arguments array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIServiceCallExceptionFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exceptionFlagName := fmt.Sprintf("%v.exception", cmdPrefix)
	if cmd.Flags().Changed(exceptionFlagName) {
		// info: complex object exception Exception is retrieved outside this Changed() block
	}
	exceptionFlagValue := m.Exception
	if swag.IsZero(exceptionFlagValue) {
		exceptionFlagValue = &models.Exception{}
	}

	err, exceptionAdded := retrieveModelExceptionFlags(depth+1, exceptionFlagValue, exceptionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exceptionAdded
	if exceptionAdded {
		m.Exception = exceptionFlagValue
	}

	return nil, retAdded
}

func retrieveIServiceCallReadTimeFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readTimeFlagName := fmt.Sprintf("%v.readTime", cmdPrefix)
	if cmd.Flags().Changed(readTimeFlagName) {

		var readTimeFlagName string
		if cmdPrefix == "" {
			readTimeFlagName = "readTime"
		} else {
			readTimeFlagName = fmt.Sprintf("%v.readTime", cmdPrefix)
		}

		readTimeFlagValue, err := cmd.Flags().GetInt64(readTimeFlagName)
		if err != nil {
			return err, false
		}
		m.ReadTime = readTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIServiceCallServiceMethodNameFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceMethodNameFlagName := fmt.Sprintf("%v.serviceMethodName", cmdPrefix)
	if cmd.Flags().Changed(serviceMethodNameFlagName) {

		var serviceMethodNameFlagName string
		if cmdPrefix == "" {
			serviceMethodNameFlagName = "serviceMethodName"
		} else {
			serviceMethodNameFlagName = fmt.Sprintf("%v.serviceMethodName", cmdPrefix)
		}

		serviceMethodNameFlagValue, err := cmd.Flags().GetString(serviceMethodNameFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceMethodName = serviceMethodNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIServiceCallServiceNameFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceNameFlagName := fmt.Sprintf("%v.serviceName", cmdPrefix)
	if cmd.Flags().Changed(serviceNameFlagName) {

		var serviceNameFlagName string
		if cmdPrefix == "" {
			serviceNameFlagName = "serviceName"
		} else {
			serviceNameFlagName = fmt.Sprintf("%v.serviceName", cmdPrefix)
		}

		serviceNameFlagValue, err := cmd.Flags().GetString(serviceNameFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceName = serviceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIServiceCallStatusFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		// warning: primitive status strfmt.Base64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIServiceCallSuccessFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	successFlagName := fmt.Sprintf("%v.success", cmdPrefix)
	if cmd.Flags().Changed(successFlagName) {

		var successFlagName string
		if cmdPrefix == "" {
			successFlagName = "success"
		} else {
			successFlagName = fmt.Sprintf("%v.success", cmdPrefix)
		}

		successFlagValue, err := cmd.Flags().GetBool(successFlagName)
		if err != nil {
			return err, false
		}
		m.Success = successFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIServiceCallWriteTimeFlags(depth int, m *models.IServiceCall, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	writeTimeFlagName := fmt.Sprintf("%v.writeTime", cmdPrefix)
	if cmd.Flags().Changed(writeTimeFlagName) {

		var writeTimeFlagName string
		if cmdPrefix == "" {
			writeTimeFlagName = "writeTime"
		} else {
			writeTimeFlagName = fmt.Sprintf("%v.writeTime", cmdPrefix)
		}

		writeTimeFlagValue, err := cmd.Flags().GetInt64(writeTimeFlagName)
		if err != nil {
			return err, false
		}
		m.WriteTime = writeTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
