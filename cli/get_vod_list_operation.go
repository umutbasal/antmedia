// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/umutbasal/antmedia/client/vo_d_rest_service"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationVodRestServiceGetVodListCmd returns a cmd to handle operation getVodList
func makeOperationVodRestServiceGetVodListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getVodList",
		Short: ``,
		RunE:  runOperationVodRestServiceGetVodList,
	}

	if err := registerOperationVodRestServiceGetVodListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationVodRestServiceGetVodList uses cmd flags to call endpoint api
func runOperationVodRestServiceGetVodList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := vo_d_rest_service.NewGetVodListParams()
	if err, _ := retrieveOperationVodRestServiceGetVodListOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationVodRestServiceGetVodListOrderByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationVodRestServiceGetVodListSearchFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationVodRestServiceGetVodListSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationVodRestServiceGetVodListSortByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationVodRestServiceGetVodListStreamIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationVodRestServiceGetVodListResult(appCli.VodRestService.GetVodList(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationVodRestServiceGetVodListParamFlags registers all flags needed to fill params
func registerOperationVodRestServiceGetVodListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationVodRestServiceGetVodListOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationVodRestServiceGetVodListOrderByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationVodRestServiceGetVodListSearchParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationVodRestServiceGetVodListSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationVodRestServiceGetVodListSortByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationVodRestServiceGetVodListStreamIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationVodRestServiceGetVodListOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `Required. Offset of the list`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}
func registerOperationVodRestServiceGetVodListOrderByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orderByDescription := `"asc" for Ascending, "desc" Descening order`

	var orderByFlagName string
	if cmdPrefix == "" {
		orderByFlagName = "order_by"
	} else {
		orderByFlagName = fmt.Sprintf("%v.order_by", cmdPrefix)
	}

	var orderByFlagDefault string

	_ = cmd.PersistentFlags().String(orderByFlagName, orderByFlagDefault, orderByDescription)

	return nil
}
func registerOperationVodRestServiceGetVodListSearchParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	searchDescription := `Search string`

	var searchFlagName string
	if cmdPrefix == "" {
		searchFlagName = "search"
	} else {
		searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
	}

	var searchFlagDefault string

	_ = cmd.PersistentFlags().String(searchFlagName, searchFlagDefault, searchDescription)

	return nil
}
func registerOperationVodRestServiceGetVodListSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sizeDescription := `Required. Number of items that will be fetched`

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}
func registerOperationVodRestServiceGetVodListSortByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortByDescription := `Field to sort. Possible values are "name", "date"`

	var sortByFlagName string
	if cmdPrefix == "" {
		sortByFlagName = "sort_by"
	} else {
		sortByFlagName = fmt.Sprintf("%v.sort_by", cmdPrefix)
	}

	var sortByFlagDefault string

	_ = cmd.PersistentFlags().String(sortByFlagName, sortByFlagDefault, sortByDescription)

	return nil
}
func registerOperationVodRestServiceGetVodListStreamIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	streamIdDescription := `Required. Id of the stream to filter the results by stream id`

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func retrieveOperationVodRestServiceGetVodListOffsetFlag(m *vo_d_rest_service.GetVodListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = offsetFlagValue

	}
	return nil, retAdded
}
func retrieveOperationVodRestServiceGetVodListOrderByFlag(m *vo_d_rest_service.GetVodListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("order_by") {

		var orderByFlagName string
		if cmdPrefix == "" {
			orderByFlagName = "order_by"
		} else {
			orderByFlagName = fmt.Sprintf("%v.order_by", cmdPrefix)
		}

		orderByFlagValue, err := cmd.Flags().GetString(orderByFlagName)
		if err != nil {
			return err, false
		}
		m.OrderBy = &orderByFlagValue

	}
	return nil, retAdded
}
func retrieveOperationVodRestServiceGetVodListSearchFlag(m *vo_d_rest_service.GetVodListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("search") {

		var searchFlagName string
		if cmdPrefix == "" {
			searchFlagName = "search"
		} else {
			searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
		}

		searchFlagValue, err := cmd.Flags().GetString(searchFlagName)
		if err != nil {
			return err, false
		}
		m.Search = &searchFlagValue

	}
	return nil, retAdded
}
func retrieveOperationVodRestServiceGetVodListSizeFlag(m *vo_d_rest_service.GetVodListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt32(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationVodRestServiceGetVodListSortByFlag(m *vo_d_rest_service.GetVodListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sort_by") {

		var sortByFlagName string
		if cmdPrefix == "" {
			sortByFlagName = "sort_by"
		} else {
			sortByFlagName = fmt.Sprintf("%v.sort_by", cmdPrefix)
		}

		sortByFlagValue, err := cmd.Flags().GetString(sortByFlagName)
		if err != nil {
			return err, false
		}
		m.SortBy = &sortByFlagValue

	}
	return nil, retAdded
}
func retrieveOperationVodRestServiceGetVodListStreamIDFlag(m *vo_d_rest_service.GetVodListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("streamId") {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

	}
	return nil, retAdded
}

// parseOperationVodRestServiceGetVodListResult parses request result and return the string content
func parseOperationVodRestServiceGetVodListResult(resp0 *vo_d_rest_service.GetVodListOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*vo_d_rest_service.GetVodListOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
