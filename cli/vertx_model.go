// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Vertx

// register flags to command
func registerModelVertxFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVertxClustered(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVertxMetricsEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVertxNativeTransportEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVertxOrCreateContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVertxClustered(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clusteredDescription := ``

	var clusteredFlagName string
	if cmdPrefix == "" {
		clusteredFlagName = "clustered"
	} else {
		clusteredFlagName = fmt.Sprintf("%v.clustered", cmdPrefix)
	}

	var clusteredFlagDefault bool

	_ = cmd.PersistentFlags().Bool(clusteredFlagName, clusteredFlagDefault, clusteredDescription)

	return nil
}

func registerVertxMetricsEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	metricsEnabledDescription := ``

	var metricsEnabledFlagName string
	if cmdPrefix == "" {
		metricsEnabledFlagName = "metricsEnabled"
	} else {
		metricsEnabledFlagName = fmt.Sprintf("%v.metricsEnabled", cmdPrefix)
	}

	var metricsEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(metricsEnabledFlagName, metricsEnabledFlagDefault, metricsEnabledDescription)

	return nil
}

func registerVertxNativeTransportEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nativeTransportEnabledDescription := ``

	var nativeTransportEnabledFlagName string
	if cmdPrefix == "" {
		nativeTransportEnabledFlagName = "nativeTransportEnabled"
	} else {
		nativeTransportEnabledFlagName = fmt.Sprintf("%v.nativeTransportEnabled", cmdPrefix)
	}

	var nativeTransportEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nativeTransportEnabledFlagName, nativeTransportEnabledFlagDefault, nativeTransportEnabledDescription)

	return nil
}

func registerVertxOrCreateContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var orCreateContextFlagName string
	if cmdPrefix == "" {
		orCreateContextFlagName = "orCreateContext"
	} else {
		orCreateContextFlagName = fmt.Sprintf("%v.orCreateContext", cmdPrefix)
	}

	if err := registerModelContextFlags(depth+1, orCreateContextFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVertxFlags(depth int, m *models.Vertx, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clusteredAdded := retrieveVertxClusteredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clusteredAdded

	err, metricsEnabledAdded := retrieveVertxMetricsEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metricsEnabledAdded

	err, nativeTransportEnabledAdded := retrieveVertxNativeTransportEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nativeTransportEnabledAdded

	err, orCreateContextAdded := retrieveVertxOrCreateContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || orCreateContextAdded

	return nil, retAdded
}

func retrieveVertxClusteredFlags(depth int, m *models.Vertx, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clusteredFlagName := fmt.Sprintf("%v.clustered", cmdPrefix)
	if cmd.Flags().Changed(clusteredFlagName) {

		var clusteredFlagName string
		if cmdPrefix == "" {
			clusteredFlagName = "clustered"
		} else {
			clusteredFlagName = fmt.Sprintf("%v.clustered", cmdPrefix)
		}

		clusteredFlagValue, err := cmd.Flags().GetBool(clusteredFlagName)
		if err != nil {
			return err, false
		}
		m.Clustered = clusteredFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVertxMetricsEnabledFlags(depth int, m *models.Vertx, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metricsEnabledFlagName := fmt.Sprintf("%v.metricsEnabled", cmdPrefix)
	if cmd.Flags().Changed(metricsEnabledFlagName) {

		var metricsEnabledFlagName string
		if cmdPrefix == "" {
			metricsEnabledFlagName = "metricsEnabled"
		} else {
			metricsEnabledFlagName = fmt.Sprintf("%v.metricsEnabled", cmdPrefix)
		}

		metricsEnabledFlagValue, err := cmd.Flags().GetBool(metricsEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.MetricsEnabled = metricsEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVertxNativeTransportEnabledFlags(depth int, m *models.Vertx, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nativeTransportEnabledFlagName := fmt.Sprintf("%v.nativeTransportEnabled", cmdPrefix)
	if cmd.Flags().Changed(nativeTransportEnabledFlagName) {

		var nativeTransportEnabledFlagName string
		if cmdPrefix == "" {
			nativeTransportEnabledFlagName = "nativeTransportEnabled"
		} else {
			nativeTransportEnabledFlagName = fmt.Sprintf("%v.nativeTransportEnabled", cmdPrefix)
		}

		nativeTransportEnabledFlagValue, err := cmd.Flags().GetBool(nativeTransportEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.NativeTransportEnabled = nativeTransportEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVertxOrCreateContextFlags(depth int, m *models.Vertx, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	orCreateContextFlagName := fmt.Sprintf("%v.orCreateContext", cmdPrefix)
	if cmd.Flags().Changed(orCreateContextFlagName) {
		// info: complex object orCreateContext Context is retrieved outside this Changed() block
	}
	orCreateContextFlagValue := m.OrCreateContext
	if swag.IsZero(orCreateContextFlagValue) {
		orCreateContextFlagValue = &models.Context{}
	}

	err, orCreateContextAdded := retrieveModelContextFlags(depth+1, orCreateContextFlagValue, orCreateContextFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || orCreateContextAdded
	if orCreateContextAdded {
		m.OrCreateContext = orCreateContextFlagValue
	}

	return nil, retAdded
}
