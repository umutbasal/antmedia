// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for PlayListItem

// register flags to command
func registerModelPlayListItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlayListItemStreamURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlayListItemType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlayListItemStreamURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamUrlDescription := ``

	var streamUrlFlagName string
	if cmdPrefix == "" {
		streamUrlFlagName = "streamUrl"
	} else {
		streamUrlFlagName = fmt.Sprintf("%v.streamUrl", cmdPrefix)
	}

	var streamUrlFlagDefault string

	_ = cmd.PersistentFlags().String(streamUrlFlagName, streamUrlFlagDefault, streamUrlDescription)

	return nil
}

func registerPlayListItemType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlayListItemFlags(depth int, m *models.PlayListItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, streamUrlAdded := retrievePlayListItemStreamURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamUrlAdded

	err, typeAdded := retrievePlayListItemTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePlayListItemStreamURLFlags(depth int, m *models.PlayListItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamUrlFlagName := fmt.Sprintf("%v.streamUrl", cmdPrefix)
	if cmd.Flags().Changed(streamUrlFlagName) {

		var streamUrlFlagName string
		if cmdPrefix == "" {
			streamUrlFlagName = "streamUrl"
		} else {
			streamUrlFlagName = fmt.Sprintf("%v.streamUrl", cmdPrefix)
		}

		streamUrlFlagValue, err := cmd.Flags().GetString(streamUrlFlagName)
		if err != nil {
			return err, false
		}
		m.StreamURL = streamUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlayListItemTypeFlags(depth int, m *models.PlayListItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
