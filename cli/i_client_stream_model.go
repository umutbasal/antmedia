// Code generated by go-swagger;

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/umutbasal/antmedia/models"

	"github.com/spf13/cobra"
)

// Schema cli for IClientStream

// register flags to command
func registerModelIClientStreamFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIClientStreamBroadcastStreamPublishName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamClientBufferDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamCodecInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamConnection(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIClientStreamStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIClientStreamBroadcastStreamPublishName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	broadcastStreamPublishNameDescription := ``

	var broadcastStreamPublishNameFlagName string
	if cmdPrefix == "" {
		broadcastStreamPublishNameFlagName = "broadcastStreamPublishName"
	} else {
		broadcastStreamPublishNameFlagName = fmt.Sprintf("%v.broadcastStreamPublishName", cmdPrefix)
	}

	var broadcastStreamPublishNameFlagDefault string

	_ = cmd.PersistentFlags().String(broadcastStreamPublishNameFlagName, broadcastStreamPublishNameFlagDefault, broadcastStreamPublishNameDescription)

	return nil
}

func registerIClientStreamClientBufferDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientBufferDurationDescription := ``

	var clientBufferDurationFlagName string
	if cmdPrefix == "" {
		clientBufferDurationFlagName = "clientBufferDuration"
	} else {
		clientBufferDurationFlagName = fmt.Sprintf("%v.clientBufferDuration", cmdPrefix)
	}

	var clientBufferDurationFlagDefault int32

	_ = cmd.PersistentFlags().Int32(clientBufferDurationFlagName, clientBufferDurationFlagDefault, clientBufferDurationDescription)

	return nil
}

func registerIClientStreamCodecInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var codecInfoFlagName string
	if cmdPrefix == "" {
		codecInfoFlagName = "codecInfo"
	} else {
		codecInfoFlagName = fmt.Sprintf("%v.codecInfo", cmdPrefix)
	}

	if err := registerModelIStreamCodecInfoFlags(depth+1, codecInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIClientStreamConnection(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var connectionFlagName string
	if cmdPrefix == "" {
		connectionFlagName = "connection"
	} else {
		connectionFlagName = fmt.Sprintf("%v.connection", cmdPrefix)
	}

	if err := registerModelIStreamCapableConnectionFlags(depth+1, connectionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIClientStreamCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := ``

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creationTime"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creationTime", cmdPrefix)
	}

	var creationTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(creationTimeFlagName, creationTimeFlagDefault, creationTimeDescription)

	return nil
}

func registerIClientStreamName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerIClientStreamScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scopeFlagName string
	if cmdPrefix == "" {
		scopeFlagName = "scope"
	} else {
		scopeFlagName = fmt.Sprintf("%v.scope", cmdPrefix)
	}

	if err := registerModelIScopeFlags(depth+1, scopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIClientStreamStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamId Number map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIClientStreamFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, broadcastStreamPublishNameAdded := retrieveIClientStreamBroadcastStreamPublishNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || broadcastStreamPublishNameAdded

	err, clientBufferDurationAdded := retrieveIClientStreamClientBufferDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientBufferDurationAdded

	err, codecInfoAdded := retrieveIClientStreamCodecInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codecInfoAdded

	err, connectionAdded := retrieveIClientStreamConnectionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionAdded

	err, creationTimeAdded := retrieveIClientStreamCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, nameAdded := retrieveIClientStreamNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, scopeAdded := retrieveIClientStreamScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, streamIdAdded := retrieveIClientStreamStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	return nil, retAdded
}

func retrieveIClientStreamBroadcastStreamPublishNameFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	broadcastStreamPublishNameFlagName := fmt.Sprintf("%v.broadcastStreamPublishName", cmdPrefix)
	if cmd.Flags().Changed(broadcastStreamPublishNameFlagName) {

		var broadcastStreamPublishNameFlagName string
		if cmdPrefix == "" {
			broadcastStreamPublishNameFlagName = "broadcastStreamPublishName"
		} else {
			broadcastStreamPublishNameFlagName = fmt.Sprintf("%v.broadcastStreamPublishName", cmdPrefix)
		}

		broadcastStreamPublishNameFlagValue, err := cmd.Flags().GetString(broadcastStreamPublishNameFlagName)
		if err != nil {
			return err, false
		}
		m.BroadcastStreamPublishName = broadcastStreamPublishNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientStreamClientBufferDurationFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientBufferDurationFlagName := fmt.Sprintf("%v.clientBufferDuration", cmdPrefix)
	if cmd.Flags().Changed(clientBufferDurationFlagName) {

		var clientBufferDurationFlagName string
		if cmdPrefix == "" {
			clientBufferDurationFlagName = "clientBufferDuration"
		} else {
			clientBufferDurationFlagName = fmt.Sprintf("%v.clientBufferDuration", cmdPrefix)
		}

		clientBufferDurationFlagValue, err := cmd.Flags().GetInt32(clientBufferDurationFlagName)
		if err != nil {
			return err, false
		}
		m.ClientBufferDuration = clientBufferDurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientStreamCodecInfoFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	codecInfoFlagName := fmt.Sprintf("%v.codecInfo", cmdPrefix)
	if cmd.Flags().Changed(codecInfoFlagName) {
		// info: complex object codecInfo IStreamCodecInfo is retrieved outside this Changed() block
	}
	codecInfoFlagValue := m.CodecInfo
	if swag.IsZero(codecInfoFlagValue) {
		codecInfoFlagValue = &models.IStreamCodecInfo{}
	}

	err, codecInfoAdded := retrieveModelIStreamCodecInfoFlags(depth+1, codecInfoFlagValue, codecInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codecInfoAdded
	if codecInfoAdded {
		m.CodecInfo = codecInfoFlagValue
	}

	return nil, retAdded
}

func retrieveIClientStreamConnectionFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionFlagName := fmt.Sprintf("%v.connection", cmdPrefix)
	if cmd.Flags().Changed(connectionFlagName) {
		// info: complex object connection IStreamCapableConnection is retrieved outside this Changed() block
	}
	connectionFlagValue := m.Connection
	if swag.IsZero(connectionFlagValue) {
		connectionFlagValue = &models.IStreamCapableConnection{}
	}

	err, connectionAdded := retrieveModelIStreamCapableConnectionFlags(depth+1, connectionFlagValue, connectionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionAdded
	if connectionAdded {
		m.Connection = connectionFlagValue
	}

	return nil, retAdded
}

func retrieveIClientStreamCreationTimeFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creationTime", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creationTime"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creationTime", cmdPrefix)
		}

		creationTimeFlagValue, err := cmd.Flags().GetInt64(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientStreamNameFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIClientStreamScopeFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeFlagName := fmt.Sprintf("%v.scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {
		// info: complex object scope IScope is retrieved outside this Changed() block
	}
	scopeFlagValue := m.Scope
	if swag.IsZero(scopeFlagValue) {
		scopeFlagValue = &models.IScope{}
	}

	err, scopeAdded := retrieveModelIScopeFlags(depth+1, scopeFlagValue, scopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded
	if scopeAdded {
		m.Scope = scopeFlagValue
	}

	return nil, retAdded
}

func retrieveIClientStreamStreamIDFlags(depth int, m *models.IClientStream, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {
		// warning: streamId map type Number is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
