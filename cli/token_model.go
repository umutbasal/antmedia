// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for Token

// register flags to command
func registerModelTokenFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTokenExpireDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenRoomID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenStreamID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenTokenID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokenExpireDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expireDateDescription := `the expire date of the token`

	var expireDateFlagName string
	if cmdPrefix == "" {
		expireDateFlagName = "expireDate"
	} else {
		expireDateFlagName = fmt.Sprintf("%v.expireDate", cmdPrefix)
	}

	var expireDateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expireDateFlagName, expireDateFlagDefault, expireDateDescription)

	return nil
}

func registerTokenRoomID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roomIdDescription := `the id of the conference room which requested streams belongs to`

	var roomIdFlagName string
	if cmdPrefix == "" {
		roomIdFlagName = "roomId"
	} else {
		roomIdFlagName = fmt.Sprintf("%v.roomId", cmdPrefix)
	}

	var roomIdFlagDefault string

	_ = cmd.PersistentFlags().String(roomIdFlagName, roomIdFlagDefault, roomIdDescription)

	return nil
}

func registerTokenStreamID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamIdDescription := `the stream id of the token`

	var streamIdFlagName string
	if cmdPrefix == "" {
		streamIdFlagName = "streamId"
	} else {
		streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
	}

	var streamIdFlagDefault string

	_ = cmd.PersistentFlags().String(streamIdFlagName, streamIdFlagDefault, streamIdDescription)

	return nil
}

func registerTokenTokenID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenIdDescription := `the token id of the token`

	var tokenIdFlagName string
	if cmdPrefix == "" {
		tokenIdFlagName = "tokenId"
	} else {
		tokenIdFlagName = fmt.Sprintf("%v.tokenId", cmdPrefix)
	}

	var tokenIdFlagDefault string

	_ = cmd.PersistentFlags().String(tokenIdFlagName, tokenIdFlagDefault, tokenIdDescription)

	return nil
}

func registerTokenType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `the type of the token`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTokenFlags(depth int, m *models.Token, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, expireDateAdded := retrieveTokenExpireDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expireDateAdded

	err, roomIdAdded := retrieveTokenRoomIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roomIdAdded

	err, streamIdAdded := retrieveTokenStreamIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIdAdded

	err, tokenIdAdded := retrieveTokenTokenIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenIdAdded

	err, typeAdded := retrieveTokenTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveTokenExpireDateFlags(depth int, m *models.Token, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expireDateFlagName := fmt.Sprintf("%v.expireDate", cmdPrefix)
	if cmd.Flags().Changed(expireDateFlagName) {

		var expireDateFlagName string
		if cmdPrefix == "" {
			expireDateFlagName = "expireDate"
		} else {
			expireDateFlagName = fmt.Sprintf("%v.expireDate", cmdPrefix)
		}

		expireDateFlagValue, err := cmd.Flags().GetInt64(expireDateFlagName)
		if err != nil {
			return err, false
		}
		m.ExpireDate = expireDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenRoomIDFlags(depth int, m *models.Token, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roomIdFlagName := fmt.Sprintf("%v.roomId", cmdPrefix)
	if cmd.Flags().Changed(roomIdFlagName) {

		var roomIdFlagName string
		if cmdPrefix == "" {
			roomIdFlagName = "roomId"
		} else {
			roomIdFlagName = fmt.Sprintf("%v.roomId", cmdPrefix)
		}

		roomIdFlagValue, err := cmd.Flags().GetString(roomIdFlagName)
		if err != nil {
			return err, false
		}
		m.RoomID = roomIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenStreamIDFlags(depth int, m *models.Token, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIdFlagName := fmt.Sprintf("%v.streamId", cmdPrefix)
	if cmd.Flags().Changed(streamIdFlagName) {

		var streamIdFlagName string
		if cmdPrefix == "" {
			streamIdFlagName = "streamId"
		} else {
			streamIdFlagName = fmt.Sprintf("%v.streamId", cmdPrefix)
		}

		streamIdFlagValue, err := cmd.Flags().GetString(streamIdFlagName)
		if err != nil {
			return err, false
		}
		m.StreamID = streamIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenTokenIDFlags(depth int, m *models.Token, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenIdFlagName := fmt.Sprintf("%v.tokenId", cmdPrefix)
	if cmd.Flags().Changed(tokenIdFlagName) {

		var tokenIdFlagName string
		if cmdPrefix == "" {
			tokenIdFlagName = "tokenId"
		} else {
			tokenIdFlagName = fmt.Sprintf("%v.tokenId", cmdPrefix)
		}

		tokenIdFlagValue, err := cmd.Flags().GetString(tokenIdFlagName)
		if err != nil {
			return err, false
		}
		m.TokenID = tokenIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenTypeFlags(depth int, m *models.Token, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
