// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/models"
	"fmt"

	"github.com/spf13/cobra"
)

// Schema cli for TaglibDescriptor

// register flags to command
func registerModelTaglibDescriptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaglibDescriptorTaglibLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaglibDescriptorTaglibURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaglibDescriptorTaglibLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taglibLocationDescription := ``

	var taglibLocationFlagName string
	if cmdPrefix == "" {
		taglibLocationFlagName = "taglibLocation"
	} else {
		taglibLocationFlagName = fmt.Sprintf("%v.taglibLocation", cmdPrefix)
	}

	var taglibLocationFlagDefault string

	_ = cmd.PersistentFlags().String(taglibLocationFlagName, taglibLocationFlagDefault, taglibLocationDescription)

	return nil
}

func registerTaglibDescriptorTaglibURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taglibUriDescription := ``

	var taglibUriFlagName string
	if cmdPrefix == "" {
		taglibUriFlagName = "taglibURI"
	} else {
		taglibUriFlagName = fmt.Sprintf("%v.taglibURI", cmdPrefix)
	}

	var taglibUriFlagDefault string

	_ = cmd.PersistentFlags().String(taglibUriFlagName, taglibUriFlagDefault, taglibUriDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaglibDescriptorFlags(depth int, m *models.TaglibDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, taglibLocationAdded := retrieveTaglibDescriptorTaglibLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taglibLocationAdded

	err, taglibUriAdded := retrieveTaglibDescriptorTaglibURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taglibUriAdded

	return nil, retAdded
}

func retrieveTaglibDescriptorTaglibLocationFlags(depth int, m *models.TaglibDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taglibLocationFlagName := fmt.Sprintf("%v.taglibLocation", cmdPrefix)
	if cmd.Flags().Changed(taglibLocationFlagName) {

		var taglibLocationFlagName string
		if cmdPrefix == "" {
			taglibLocationFlagName = "taglibLocation"
		} else {
			taglibLocationFlagName = fmt.Sprintf("%v.taglibLocation", cmdPrefix)
		}

		taglibLocationFlagValue, err := cmd.Flags().GetString(taglibLocationFlagName)
		if err != nil {
			return err, false
		}
		m.TaglibLocation = taglibLocationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaglibDescriptorTaglibURIFlags(depth int, m *models.TaglibDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taglibUriFlagName := fmt.Sprintf("%v.taglibURI", cmdPrefix)
	if cmd.Flags().Changed(taglibUriFlagName) {

		var taglibUriFlagName string
		if cmdPrefix == "" {
			taglibUriFlagName = "taglibURI"
		} else {
			taglibUriFlagName = fmt.Sprintf("%v.taglibURI", cmdPrefix)
		}

		taglibUriFlagValue, err := cmd.Flags().GetString(taglibUriFlagName)
		if err != nil {
			return err, false
		}
		m.TaglibURI = taglibUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}
