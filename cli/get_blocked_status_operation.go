// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"antmedia/client/management_rest_service"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationManagementRestServiceGetBlockedStatusCmd returns a cmd to handle operation getBlockedStatus
func makeOperationManagementRestServiceGetBlockedStatusCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getBlockedStatus",
		Short: ``,
		RunE:  runOperationManagementRestServiceGetBlockedStatus,
	}

	if err := registerOperationManagementRestServiceGetBlockedStatusParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationManagementRestServiceGetBlockedStatus uses cmd flags to call endpoint api
func runOperationManagementRestServiceGetBlockedStatus(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := management_rest_service.NewGetBlockedStatusParams()
	if err, _ := retrieveOperationManagementRestServiceGetBlockedStatusUsermailFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationManagementRestServiceGetBlockedStatusResult(appCli.ManagementRestService.GetBlockedStatus(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationManagementRestServiceGetBlockedStatusParamFlags registers all flags needed to fill params
func registerOperationManagementRestServiceGetBlockedStatusParamFlags(cmd *cobra.Command) error {
	if err := registerOperationManagementRestServiceGetBlockedStatusUsermailParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationManagementRestServiceGetBlockedStatusUsermailParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	usermailDescription := `Required. User name or e-mail of the user to check it status`

	var usermailFlagName string
	if cmdPrefix == "" {
		usermailFlagName = "usermail"
	} else {
		usermailFlagName = fmt.Sprintf("%v.usermail", cmdPrefix)
	}

	var usermailFlagDefault string

	_ = cmd.PersistentFlags().String(usermailFlagName, usermailFlagDefault, usermailDescription)

	return nil
}

func retrieveOperationManagementRestServiceGetBlockedStatusUsermailFlag(m *management_rest_service.GetBlockedStatusParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("usermail") {

		var usermailFlagName string
		if cmdPrefix == "" {
			usermailFlagName = "usermail"
		} else {
			usermailFlagName = fmt.Sprintf("%v.usermail", cmdPrefix)
		}

		usermailFlagValue, err := cmd.Flags().GetString(usermailFlagName)
		if err != nil {
			return err, false
		}
		m.Usermail = usermailFlagValue

	}
	return nil, retAdded
}

// parseOperationManagementRestServiceGetBlockedStatusResult parses request result and return the string content
func parseOperationManagementRestServiceGetBlockedStatusResult(resp0 *management_rest_service.GetBlockedStatusOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*management_rest_service.GetBlockedStatusOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
